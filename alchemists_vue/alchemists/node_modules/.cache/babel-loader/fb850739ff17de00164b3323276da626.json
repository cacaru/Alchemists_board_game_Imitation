{"ast":null,"code":"import { RequestError } from './errors.js';\nexport const isResponseOk = response => {\n  const {\n    statusCode\n  } = response;\n  const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n  return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;\n};\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/\n\nexport class ParseError extends RequestError {\n  constructor(error, response) {\n    const {\n      options\n    } = response.request;\n    super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n    this.name = 'ParseError';\n    this.code = 'ERR_BODY_PARSE_FAILURE';\n  }\n\n}\nexport const parseBody = (response, responseType, parseJson, encoding) => {\n  const {\n    rawBody\n  } = response;\n\n  try {\n    if (responseType === 'text') {\n      return rawBody.toString(encoding);\n    }\n\n    if (responseType === 'json') {\n      return rawBody.length === 0 ? '' : parseJson(rawBody.toString(encoding));\n    }\n\n    if (responseType === 'buffer') {\n      return rawBody;\n    }\n  } catch (error) {\n    throw new ParseError(error, response);\n  }\n\n  throw new ParseError({\n    message: `Unknown body type '${responseType}'`,\n    name: 'Error'\n  }, response);\n};","map":{"version":3,"names":["RequestError","isResponseOk","response","statusCode","limitStatusCode","request","options","followRedirect","ParseError","constructor","error","message","url","toString","name","code","parseBody","responseType","parseJson","encoding","rawBody","length"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/got/dist/source/core/response.js"],"sourcesContent":["import { RequestError } from './errors.js';\nexport const isResponseOk = (response) => {\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return (statusCode >= 200 && statusCode <= limitStatusCode) || statusCode === 304;\n};\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/\nexport class ParseError extends RequestError {\n    constructor(error, response) {\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = 'ParseError';\n        this.code = 'ERR_BODY_PARSE_FAILURE';\n    }\n}\nexport const parseBody = (response, responseType, parseJson, encoding) => {\n    const { rawBody } = response;\n    try {\n        if (responseType === 'text') {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === 'json') {\n            return rawBody.length === 0 ? '' : parseJson(rawBody.toString(encoding));\n        }\n        if (responseType === 'buffer') {\n            return rawBody;\n        }\n    }\n    catch (error) {\n        throw new ParseError(error, response);\n    }\n    throw new ParseError({\n        message: `Unknown body type '${responseType}'`,\n        name: 'Error',\n    }, response);\n};\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,aAA7B;AACA,OAAO,MAAMC,YAAY,GAAIC,QAAD,IAAc;EACtC,MAAM;IAAEC;EAAF,IAAiBD,QAAvB;EACA,MAAME,eAAe,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,OAAjB,CAAyBC,cAAzB,GAA0C,GAA1C,GAAgD,GAAxE;EACA,OAAQJ,UAAU,IAAI,GAAd,IAAqBA,UAAU,IAAIC,eAApC,IAAwDD,UAAU,KAAK,GAA9E;AACH,CAJM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMK,UAAN,SAAyBR,YAAzB,CAAsC;EACzCS,WAAW,CAACC,KAAD,EAAQR,QAAR,EAAkB;IACzB,MAAM;MAAEI;IAAF,IAAcJ,QAAQ,CAACG,OAA7B;IACA,MAAO,GAAEK,KAAK,CAACC,OAAQ,QAAOL,OAAO,CAACM,GAAR,CAAYC,QAAZ,EAAuB,GAArD,EAAyDH,KAAzD,EAAgER,QAAQ,CAACG,OAAzE;IACA,KAAKS,IAAL,GAAY,YAAZ;IACA,KAAKC,IAAL,GAAY,wBAAZ;EACH;;AANwC;AAQ7C,OAAO,MAAMC,SAAS,GAAG,CAACd,QAAD,EAAWe,YAAX,EAAyBC,SAAzB,EAAoCC,QAApC,KAAiD;EACtE,MAAM;IAAEC;EAAF,IAAclB,QAApB;;EACA,IAAI;IACA,IAAIe,YAAY,KAAK,MAArB,EAA6B;MACzB,OAAOG,OAAO,CAACP,QAAR,CAAiBM,QAAjB,CAAP;IACH;;IACD,IAAIF,YAAY,KAAK,MAArB,EAA6B;MACzB,OAAOG,OAAO,CAACC,MAAR,KAAmB,CAAnB,GAAuB,EAAvB,GAA4BH,SAAS,CAACE,OAAO,CAACP,QAAR,CAAiBM,QAAjB,CAAD,CAA5C;IACH;;IACD,IAAIF,YAAY,KAAK,QAArB,EAA+B;MAC3B,OAAOG,OAAP;IACH;EACJ,CAVD,CAWA,OAAOV,KAAP,EAAc;IACV,MAAM,IAAIF,UAAJ,CAAeE,KAAf,EAAsBR,QAAtB,CAAN;EACH;;EACD,MAAM,IAAIM,UAAJ,CAAe;IACjBG,OAAO,EAAG,sBAAqBM,YAAa,GAD3B;IAEjBH,IAAI,EAAE;EAFW,CAAf,EAGHZ,QAHG,CAAN;AAIH,CApBM"},"metadata":{},"sourceType":"module"}