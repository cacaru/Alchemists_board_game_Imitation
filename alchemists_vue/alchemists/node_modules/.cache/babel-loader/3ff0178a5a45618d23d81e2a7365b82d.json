{"ast":null,"code":"import { socket } from '@/components/game_lobby.vue';\nimport { default as modal_area } from '@/components/modal_area.vue';\nimport { default as personal_game_data } from '@/components/personal_game_data.vue';\nimport { default as personal_reasoning_table } from '@/components/reasoning_table.vue';\nexport default {\n  name: 'game_board',\n\n  created() {\n    // 게임 초기화 & 시작 트리거\n    socket.emit(\"created_data_announce\");\n  },\n\n  mounted() {\n    //최초 분배된 기본 재료 수령\n    socket.on(\"get_ingame_data\", data => {\n      this.user_data = data;\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].is_master === 'true') {\n          this.room_owner = data[i].user_name;\n        }\n\n        if (this.my_key == data[i].user_key) {\n          this.my_name = data[i].user_name;\n          this.my_color = data[i].user_color;\n        }\n      }\n\n      let msg = {\n        speaker: this.my_name,\n        msg: \"방에 입장하였습니다.\",\n        type: 'announce'\n      };\n      socket.emit(\"chat\", msg);\n    }); //채팅 on\n\n    socket.on(\"chat\", data => {\n      // console.log(\"서버에서 받아온 데이터\");\n      // console.log(data);\n      // console.log(\"받아오기 끝\");\n      switch (data.type) {\n        case \"announce\":\n          this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\n          break;\n\n        case \"normal\":\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\n          break;\n      } // 스크롤을 자동으로 내림\n\n\n      this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\n    }); // 선택할 수 있는 카드 공개\n\n    socket.on(\"ingredient_select_card_open\", data => {\n      //console.log(data);\n      this.ingredient_card_selected.card_1 = data[0];\n      this.ingredient_card_selected.card_2 = data[1];\n      this.ingredient_card_selected.card_3 = data[2];\n      this.ingredient_card_selected.card_4 = data[3];\n      this.ingredient_card_selected.card_5 = data[4];\n    }); // 변경된 게임 데이터를 받는 함수\n\n    socket.on(\"change_user_data\", data => {\n      this.user_data = data; //console.log(this.user_data);\n    }); // 변경된 final_round_order를 데이터를 받는 함수 \n\n    socket.on(\"change_final_round_order\", data => {\n      this.final_round_order = data; //console.log(this.final_round_order);\n    }); // 변경된 result_table : 추리 테이블 데이터를 받는 함수\n\n    socket.on(\"change_result_table\", data => {\n      this.result_table = data; //console.log(this.result_table);\n    }); // 게임 순서를 정하는 순서의 정보 받는 함수\n\n    socket.on(\"round_order_setting_before\", data => {\n      //console.log(data);\n      let as = [];\n\n      for (let i = 0; i < data.length; i++) {\n        for (let j = 0; j < this.user_data.length; j++) {\n          if (data[i] == this.user_data[j].user_key) {\n            let choice_data = {\n              user_key: this.user_data[j].user_key,\n              user_name: this.user_data[j].user_name\n            };\n            as.push(choice_data);\n            choice_data = '';\n          }\n        }\n      }\n\n      this.round_setting_order = as; //console.log(this.round_setting_order[0].user_key);\n      //console.log(this.round_order[this.round_order_selecter].user_key);\n    }); // 게임 순서를 정하는 순서를 정하는 변수를 받는 함수 \n\n    socket.on(\"decide_round_setting_order_counter_send\", data => {\n      this.round_setting_order_counter = data;\n    }); // 라운드 진행 순서를 고른 정보를 받는 함수\n\n    socket.on(\"select_round_order_recive\", data => {\n      let btn_ele = '';\n      let btn_before_ele = '';\n\n      for (let i = 0; i < data.length; i++) {\n        // 순서에 맞는 element를 선택\n        switch (data[i].order) {\n          case 1:\n            btn_ele = this.$refs.btn_1;\n            break;\n\n          case 2:\n            btn_ele = this.$refs.btn_2;\n            break;\n\n          case 3:\n            btn_ele = this.$refs.btn_3;\n            break;\n\n          case 4:\n            btn_ele = this.$refs.btn_4;\n            break;\n\n          case 5:\n            btn_ele = this.$refs.btn_5;\n            break;\n\n          case 6:\n            btn_ele = this.$refs.btn_6;\n            break;\n\n          case 7:\n            btn_ele = this.$refs.btn_7;\n            break;\n\n          case 8:\n            btn_ele = this.$refs.btn_8;\n            break;\n        }\n\n        switch (data[i].before_order) {\n          case 1:\n            btn_before_ele = this.$refs.btn_1;\n            break;\n\n          case 2:\n            btn_before_ele = this.$refs.btn_2;\n            break;\n\n          case 3:\n            btn_before_ele = this.$refs.btn_3;\n            break;\n\n          case 4:\n            btn_before_ele = this.$refs.btn_4;\n            break;\n\n          case 5:\n            btn_before_ele = this.$refs.btn_5;\n            break;\n\n          case 6:\n            btn_before_ele = this.$refs.btn_6;\n            break;\n\n          case 7:\n            btn_before_ele = this.$refs.btn_7;\n            break;\n\n          case 8:\n            btn_before_ele = this.$refs.btn_8;\n            break;\n        } //console.log(btn_ele[0].className);\n        // 기존의 것이 있으면 기존 색 class 제거\n\n\n        if (btn_before_ele != '') {\n          let num = btn_before_ele[0].className.indexOf(data[i].user_color); // 문구 검색 결과가 있으면 제거 \n\n          if (num > 0) {\n            let str = btn_before_ele[0].className.substring(0, num - 1);\n            btn_before_ele[0].className = str;\n          } // 결과가 음수면 없는 것이므로 넘김\n\n        } // 기존의 것을 없앤 완전 초기화 상태이므로  기존의 것과 중복 되더라도 그냥 진행 가능\n        // 기존 : 5 신규 5 일 경우 위에서 이미 검사하지 않고 지웠으므로\n        // 신규 5를 다시 칠함\n        // 두 함수에서 모두 if로 구분하여 ifif중복하기 귀찮아서 그냥 무조건 지우고 무조건 색칠\n\n\n        if (btn_ele != '') {\n          btn_ele[0].className += ' ' + data[i].user_color; //console.log(btn_ele[0].className);\n        } // 변수 초기화\n\n\n        btn_before_ele = '';\n        btn_ele = '';\n      } // 내부 변수에도 값을 적용\n\n\n      this.final_round_order = data; //console.log(data);\n    }); // 라운드 진행 순서를 고르는 것이 끝났다는 알림을 받는 함수 \n\n    socket.on(\"decide_round_setting_order_end\", data => {\n      this.decide_order = !this.decide_order; // final_round_order을 고른 order에 맞게 재정렬한 값으로 재전송 받음\n\n      this.final_round_order = data;\n    }); // 판매하는 아티펙트 정보를 받는 함수\n\n    socket.on(\"can_buy_artifacts_list\", data => {\n      this.can_buy_artifacts = data;\n    }); // 큐브 선택시 사용 가능 큐브가 없을 때\n\n    socket.on(\"cant_use_cube\", data => {\n      alert(data.say);\n    }); // 보드 순서 시작\n\n    socket.on(\"board_start\", start_board => {\n      // 모두 false로 만들고 선택된 보드만 true로 변경\n      this.board_1_selected = false;\n      this.board_2_selected = false;\n      this.board_3_selected = false;\n      this.board_4_selected = false;\n      this.board_5_selected = false;\n      this.board_6_selected = false;\n      this.board_7_selected = false;\n      this.board_8_selected = false;\n\n      switch (start_board) {\n        case 1:\n          this.board_1_selected = true;\n          break;\n\n        case 2:\n          this.board_2_selected = true;\n          break;\n\n        case 3:\n          this.board_3_selected = true;\n          break;\n\n        case 4:\n          this.board_4_selected = true;\n          break;\n\n        case 5:\n          this.board_5_selected = true;\n          break;\n\n        case 6:\n          this.board_6_selected = true;\n          break;\n\n        case 7:\n          this.board_7_selected = true;\n          break;\n\n        case 8:\n          this.board_8_selected = true;\n          break;\n      } // 선택되지 못한 보드가 눌렸을 경우 현재 선택된 보드만 누르게 경고를 띄워야함\n\n    });\n  },\n\n  components: {\n    modal_component: modal_area,\n    personal_game_data: personal_game_data,\n    personal_reasoning_table: personal_reasoning_table\n  },\n\n  data() {\n    return {\n      user_data: '',\n      my_key: socket.id,\n      my_name: '',\n      my_color: '',\n      room_owner: '',\n      total_dicount_adventruer: 4,\n      textarea: '',\n      message: '',\n      ingredient_card_selected: {\n        card_1: '0',\n        card_2: '0',\n        card_3: '0',\n        card_4: '0',\n        card_5: '0'\n      },\n      // overlay\n      decide_order: false,\n      // overlay 완료버튼으로 나오는 modal\n      decide_order_modal: false,\n      // 라운드 순서를 정하는 순서 정보\n      round_setting_order: '',\n      // 라운드 순서를 정하는 순서 \n      round_setting_order_counter: 0,\n      // 해당 라운드의 순서 결정완료 후 순서\n      final_round_order: [],\n      // 라운드 준비 완료 확인 모달\n      round_order_check: false,\n      // 구매 가능한 아티펙트 변수\n      can_buy_artifacts: '',\n      // 재료조합 추리 및 결과 테이블\n      result_table: [],\n      // board 선택을 위한 변수 8개\n      board_1_selected: false,\n      board_2_selected: false,\n      board_3_selected: false,\n      board_4_selected: false,\n      board_5_selected: false,\n      board_6_selected: false,\n      board_7_selected: false,\n      board_8_selected: false,\n      // 매 보드마다 순서를 정할 변수\n      board_order: 0\n    };\n  },\n\n  methods: {\n    use_chat: function () {\n      if (this.message !== '') {\n        let msg = {\n          speaker: this.my_name,\n          msg: this.message,\n          type: \"normal\"\n        }; //   console.log(\"서버에 보낼 데이터\");\n        //   console.log(msg);\n        //   console.log(\"보낼준비 끝\");\n\n        this.message = '';\n        socket.emit(\"chat\", msg);\n      }\n    },\n    draw_ingredient_card: function (cnt) {\n      let data = {\n        cnt: cnt,\n        my_key: this.my_key\n      };\n      socket.emit(\"draw_ingredient_card\", data);\n    },\n    // 인게임 라운드 진행 준비 완료를 알리는 함수\n    round_ready: function () {\n      this.round_order_check = true;\n    },\n    round_order_setting_end: function () {\n      this.round_order_check = false;\n      socket.emit(\"round_ready_on\", this.my_key);\n    },\n    round_order_setting_close: function () {\n      this.round_order_check = false;\n    },\n    // decide_order overlay의 완료 버튼\n    decide_order_modal_open: function () {\n      // 선택 순서에 따라 클릭 막기\n      if (this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key) {\n        alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\n        return;\n      }\n\n      this.decide_order_modal = !this.decide_order_modal;\n    },\n    // decide_order_modal 의 결정 버튼\n    decide_order_setting_end: function () {\n      let is_select_order = false;\n\n      for (let i = 0; i < this.final_round_order.length; i++) {\n        if (this.final_round_order[i].user_key == this.my_key) {\n          is_select_order = true;\n          break;\n        }\n      }\n\n      if (!is_select_order) {\n        alert(\"순서를 고르고 결정을 눌러주세요\");\n        this.decide_order_modal = false;\n        return;\n      } //위 if문에 안걸리면 선택한 순서가 있다는 것 이므로 진행\n      // 게임 결정 순서를 공유해야 하므로 서버에 값을 증가시키라고 전송\n\n\n      socket.emit(\"decide_round_setting_order_counter_incre\");\n      this.decide_order_modal = false;\n    },\n    select_order_btn: function (val) {\n      // 선택 순서에 따라 클릭 막기\n      if (this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key) {\n        alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\n        return;\n      } //\n\n\n      if (this.final_round_order != '') {\n        for (let i = 0; i < this.final_round_order.length; i++) {\n          if (this.final_round_order[i].user_key != this.my_key) {\n            if (val == this.final_round_order[i].order) {\n              alert(\"다른 사람이 선택한 순서는 선택 할 수 없습니다.\");\n              return;\n            }\n          }\n        }\n      }\n\n      let round_order_data = {\n        user_key: this.my_key,\n        order: val\n      }; // 버튼 선택 결과 전송\n\n      socket.emit(\"select_round_order\", round_order_data);\n    },\n    // 큐브로 순서를 선택할 때 반응\n    click_order_btn: function (n, u, user_key) {\n      if (user_key != this.my_key) {\n        alert(\"본인의 색으로 구분된 버튼만 골라주세요!\");\n        return;\n      } // 라운드가 진행중이면 클릭되선 안됨\n\n\n      for (let i = 0; i < this.user_data.length; i++) {\n        if (this.user_data[i].user_key == this.my_key) {\n          if (this.user_data[i].is_ingame == true) {\n            alert(\"라운드 진행 중에는 클릭 할 수 없습니다!\");\n            return;\n          }\n        }\n      } // n :: final_round_order[유저].user_cube_data[n]\n      // u :: final_round_order[유저].user_cube_data[n][u]\n\n\n      let send_data = {\n        user_key: user_key,\n        cube_round_order_num: n,\n        button_order_num: u\n      }; //console.log(send_data);\n      //버튼 선택 결과 전송\n\n      socket.emit(\"select_cube\", send_data);\n    },\n    // 추리테이블 눌렀을 때 반응\n    click_reasoning_ele: function (data) {\n      let reasoning_data = {\n        user_key: this.my_key,\n        x: data.x,\n        y: data.y,\n        change_val: data.change_val\n      };\n      socket.emit(\"reasoning_table_change\", reasoning_data); //console.log(reasoning_data);\n    },\n    // 재료카드 선택 이벤트\n    pick_ingredient: function (data) {\n      if (this.board_1_selected == false || this.final_round_order[this.board_order].user_key != this.my_key) {\n        alert(\"아직 재료를 고를 수 없습니다.\");\n        return;\n      }\n\n      console.log(data);\n    }\n  }\n};","map":{"version":3,"names":["socket","default","modal_area","personal_game_data","personal_reasoning_table","name","created","emit","mounted","on","data","user_data","i","length","is_master","room_owner","user_name","my_key","user_key","my_name","my_color","user_color","msg","speaker","type","textarea","$refs","show_chat","scrollTop","scrollHeight","ingredient_card_selected","card_1","card_2","card_3","card_4","card_5","final_round_order","result_table","as","j","choice_data","push","round_setting_order","round_setting_order_counter","btn_ele","btn_before_ele","order","btn_1","btn_2","btn_3","btn_4","btn_5","btn_6","btn_7","btn_8","before_order","num","className","indexOf","str","substring","decide_order","can_buy_artifacts","alert","say","start_board","board_1_selected","board_2_selected","board_3_selected","board_4_selected","board_5_selected","board_6_selected","board_7_selected","board_8_selected","components","modal_component","id","total_dicount_adventruer","message","decide_order_modal","round_order_check","board_order","methods","use_chat","draw_ingredient_card","cnt","round_ready","round_order_setting_end","round_order_setting_close","decide_order_modal_open","decide_order_setting_end","is_select_order","select_order_btn","val","round_order_data","click_order_btn","n","u","is_ingame","send_data","cube_round_order_num","button_order_num","click_reasoning_ele","reasoning_data","x","y","change_val","pick_ingredient","console","log"],"sources":["E:/GitHub/personal_tranning/alchemists_vue/alchemists/src/assets/script/game_board.js"],"sourcesContent":["import { socket } from '@/components/game_lobby.vue'\r\nimport { default as modal_area } from '@/components/modal_area.vue'\r\nimport { default as personal_game_data } from '@/components/personal_game_data.vue' \r\nimport { default as personal_reasoning_table } from '@/components/reasoning_table.vue'\r\n\r\nexport default {\r\n    name : 'game_board',\r\n    created() {\r\n        // 게임 초기화 & 시작 트리거\r\n        socket.emit(\"created_data_announce\");\r\n    },\r\n    mounted () {\r\n         //최초 분배된 기본 재료 수령\r\n         socket.on(\"get_ingame_data\", (data) => {\r\n            this.user_data = data;\r\n            for(let i = 0; i < data.length; i++){\r\n                if( data[i].is_master === 'true' ) {\r\n                    this.room_owner = data[i].user_name;\r\n                }\r\n                if( this.my_key == data[i].user_key ){\r\n                    this.my_name = data[i].user_name;\r\n                    this.my_color = data[i].user_color;\r\n                }\r\n            }\r\n\r\n            let msg = {\r\n                speaker : this.my_name,\r\n                msg     : \"방에 입장하였습니다.\",\r\n                type    : 'announce',\r\n            }\r\n            socket.emit(\"chat\", msg);\r\n        });\r\n\r\n        //채팅 on\r\n        socket.on(\"chat\", (data) => {\r\n            // console.log(\"서버에서 받아온 데이터\");\r\n            // console.log(data);\r\n            // console.log(\"받아오기 끝\");\r\n            switch ( data.type ) {\r\n                case \"announce\" :\r\n                    this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\r\n                    break;\r\n                case \"normal\" :\r\n                    this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\r\n                    break;\r\n            }\r\n            // 스크롤을 자동으로 내림\r\n            this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\r\n        });\r\n\r\n        // 선택할 수 있는 카드 공개\r\n        socket.on(\"ingredient_select_card_open\", (data) => {\r\n            //console.log(data);\r\n            this.ingredient_card_selected.card_1 = data[0];\r\n            this.ingredient_card_selected.card_2 = data[1];\r\n            this.ingredient_card_selected.card_3 = data[2];\r\n            this.ingredient_card_selected.card_4 = data[3];\r\n            this.ingredient_card_selected.card_5 = data[4];\r\n        });\r\n\r\n        // 변경된 게임 데이터를 받는 함수\r\n        socket.on(\"change_user_data\", (data) => {\r\n            this.user_data = data;\r\n            //console.log(this.user_data);\r\n        });\r\n        // 변경된 final_round_order를 데이터를 받는 함수 \r\n        socket.on(\"change_final_round_order\", (data) => {\r\n            this.final_round_order = data;\r\n            //console.log(this.final_round_order);\r\n        });\r\n\r\n        // 변경된 result_table : 추리 테이블 데이터를 받는 함수\r\n        socket.on(\"change_result_table\", (data) => {\r\n            this.result_table = data;\r\n            //console.log(this.result_table);\r\n        });\r\n\r\n        // 게임 순서를 정하는 순서의 정보 받는 함수\r\n        socket.on(\"round_order_setting_before\" , (data) => {\r\n            //console.log(data);\r\n            let as = [];\r\n\r\n            for( let i = 0; i < data.length; i++) {\r\n                for( let j = 0; j < this.user_data.length; j++){\r\n                    if( data[i] == this.user_data[j].user_key ){\r\n\r\n                        let choice_data = {\r\n                            user_key  : this.user_data[j].user_key,\r\n                            user_name : this.user_data[j].user_name,\r\n                        }\r\n                        \r\n                        as.push(choice_data);\r\n                        \r\n                        choice_data = '';\r\n                    }\r\n                }\r\n            }\r\n            this.round_setting_order = as;\r\n            //console.log(this.round_setting_order[0].user_key);\r\n            //console.log(this.round_order[this.round_order_selecter].user_key);\r\n        });\r\n\r\n        // 게임 순서를 정하는 순서를 정하는 변수를 받는 함수 \r\n        socket.on(\"decide_round_setting_order_counter_send\", (data) => {\r\n            this.round_setting_order_counter = data;\r\n        });\r\n\r\n        // 라운드 진행 순서를 고른 정보를 받는 함수\r\n        socket.on(\"select_round_order_recive\", (data) => {\r\n            let btn_ele = '';\r\n            let btn_before_ele = '';\r\n            \r\n            for( let i = 0; i < data.length; i++){\r\n                 // 순서에 맞는 element를 선택\r\n                switch(data[i].order) {\r\n                    case 1 : \r\n                        btn_ele = this.$refs.btn_1;\r\n                        break;\r\n                    case 2 :\r\n                        btn_ele = this.$refs.btn_2;\r\n                        break;\r\n                    case 3 :\r\n                        btn_ele = this.$refs.btn_3;\r\n                        break;\r\n                    case 4 : \r\n                        btn_ele = this.$refs.btn_4;\r\n                        break;\r\n                    case 5 :\r\n                        btn_ele = this.$refs.btn_5;\r\n                        break;\r\n                    case 6 :\r\n                        btn_ele = this.$refs.btn_6;\r\n                        break;\r\n                    case 7 :\r\n                        btn_ele = this.$refs.btn_7;\r\n                        break;\r\n                    case 8 :\r\n                        btn_ele = this.$refs.btn_8;\r\n                        break;\r\n                }\r\n                switch( data[i].before_order ){\r\n                    case 1 : \r\n                        btn_before_ele = this.$refs.btn_1;\r\n                        break;\r\n                    case 2 :\r\n                        btn_before_ele = this.$refs.btn_2;\r\n                        break;\r\n                    case 3 :\r\n                        btn_before_ele = this.$refs.btn_3;\r\n                        break;\r\n                    case 4 : \r\n                        btn_before_ele = this.$refs.btn_4;\r\n                        break;\r\n                    case 5 :\r\n                        btn_before_ele = this.$refs.btn_5;\r\n                        break;\r\n                    case 6 :\r\n                        btn_before_ele = this.$refs.btn_6;\r\n                        break;\r\n                    case 7 :\r\n                        btn_before_ele = this.$refs.btn_7;\r\n                        break;\r\n                    case 8 :\r\n                        btn_before_ele = this.$refs.btn_8;\r\n                        break;\r\n                }\r\n                //console.log(btn_ele[0].className);\r\n                // 기존의 것이 있으면 기존 색 class 제거\r\n                if( btn_before_ele != '' ){\r\n\r\n                    let num = btn_before_ele[0].className.indexOf(data[i].user_color);\r\n                    // 문구 검색 결과가 있으면 제거 \r\n                    if ( num > 0 ){\r\n                        let str = btn_before_ele[0].className.substring(0, num-1);\r\n                        btn_before_ele[0].className = str;\r\n                    }\r\n                    // 결과가 음수면 없는 것이므로 넘김\r\n                }\r\n\r\n                // 기존의 것을 없앤 완전 초기화 상태이므로  기존의 것과 중복 되더라도 그냥 진행 가능\r\n                // 기존 : 5 신규 5 일 경우 위에서 이미 검사하지 않고 지웠으므로\r\n                // 신규 5를 다시 칠함\r\n                // 두 함수에서 모두 if로 구분하여 ifif중복하기 귀찮아서 그냥 무조건 지우고 무조건 색칠\r\n                if( btn_ele != '' ){\r\n                    btn_ele[0].className += ' ' + data[i].user_color;\r\n                    //console.log(btn_ele[0].className);\r\n                }\r\n                // 변수 초기화\r\n                btn_before_ele = '';\r\n                btn_ele = '';\r\n\r\n            }\r\n            // 내부 변수에도 값을 적용\r\n            this.final_round_order = data;\r\n            //console.log(data);\r\n        });\r\n\r\n        // 라운드 진행 순서를 고르는 것이 끝났다는 알림을 받는 함수 \r\n        socket.on(\"decide_round_setting_order_end\", (data) => {\r\n            this.decide_order = !this.decide_order;\r\n            // final_round_order을 고른 order에 맞게 재정렬한 값으로 재전송 받음\r\n            this.final_round_order = data;\r\n        });\r\n\r\n        // 판매하는 아티펙트 정보를 받는 함수\r\n        socket.on(\"can_buy_artifacts_list\", (data) => {\r\n            this.can_buy_artifacts = data;\r\n        });\r\n\r\n        // 큐브 선택시 사용 가능 큐브가 없을 때\r\n        socket.on(\"cant_use_cube\", (data) => {\r\n            alert(data.say);\r\n        });\r\n\r\n        // 보드 순서 시작\r\n        socket.on(\"board_start\", (start_board) => {\r\n            // 모두 false로 만들고 선택된 보드만 true로 변경\r\n            this.board_1_selected = false;\r\n            this.board_2_selected = false;\r\n            this.board_3_selected = false;\r\n            this.board_4_selected = false;\r\n            this.board_5_selected = false;\r\n            this.board_6_selected = false;\r\n            this.board_7_selected = false;\r\n            this.board_8_selected = false;\r\n            switch(start_board) {\r\n                case 1 : \r\n                    this.board_1_selected = true;\r\n                    break;\r\n                case 2 : \r\n                    this.board_2_selected = true;\r\n                    break;\r\n                case 3 :\r\n                    this.board_3_selected = true;\r\n                    break;\r\n                case 4 : \r\n                    this.board_4_selected = true;\r\n                    break;\r\n                case 5 :\r\n                    this.board_5_selected = true;\r\n                    break;\r\n                case 6 :\r\n                    this.board_6_selected = true;\r\n                    break;\r\n                case 7 :\r\n                    this.board_7_selected = true;\r\n                    break;\r\n                case 8 :\r\n                    this.board_8_selected = true;\r\n                    break;\r\n            }\r\n            \r\n            // 선택되지 못한 보드가 눌렸을 경우 현재 선택된 보드만 누르게 경고를 띄워야함\r\n\r\n        });\r\n\r\n    },\r\n    components : {\r\n        modal_component : modal_area,\r\n        personal_game_data : personal_game_data,\r\n        personal_reasoning_table : personal_reasoning_table,\r\n    },\r\n    data() {\r\n        return  {\r\n            user_data : '', \r\n            my_key : socket.id,\r\n            my_name : '',\r\n            my_color : '',\r\n            room_owner : '',\r\n            total_dicount_adventruer : 4,\r\n            textarea : '',\r\n            message : '',\r\n            ingredient_card_selected : {\r\n                card_1 : '0',\r\n                card_2 : '0',\r\n                card_3 : '0',\r\n                card_4 : '0',\r\n                card_5 : '0',\r\n            },\r\n            // overlay\r\n            decide_order : false,\r\n            // overlay 완료버튼으로 나오는 modal\r\n            decide_order_modal : false,\r\n            // 라운드 순서를 정하는 순서 정보\r\n            round_setting_order : '',\r\n            // 라운드 순서를 정하는 순서 \r\n            round_setting_order_counter : 0,\r\n            // 해당 라운드의 순서 결정완료 후 순서\r\n            final_round_order : [],\r\n            // 라운드 준비 완료 확인 모달\r\n            round_order_check : false,\r\n            // 구매 가능한 아티펙트 변수\r\n            can_buy_artifacts : '',\r\n            // 재료조합 추리 및 결과 테이블\r\n            result_table : [],\r\n            // board 선택을 위한 변수 8개\r\n            board_1_selected :false,\r\n            board_2_selected :false,\r\n            board_3_selected :false,\r\n            board_4_selected :false,\r\n            board_5_selected :false,\r\n            board_6_selected :false,\r\n            board_7_selected :false,\r\n            board_8_selected :false,\r\n            // 매 보드마다 순서를 정할 변수\r\n            board_order : 0,\r\n        }\r\n    },\r\n\r\n    methods : {\r\n        use_chat : function(){\r\n            if( this.message !== '' ){\r\n              let msg = {\r\n                speaker : this.my_name,\r\n                msg : this.message,\r\n                type : \"normal\"\r\n              }\r\n            //   console.log(\"서버에 보낼 데이터\");\r\n            //   console.log(msg);\r\n            //   console.log(\"보낼준비 끝\");\r\n              this.message = '';\r\n              socket.emit(\"chat\", msg);\r\n            }\r\n        },\r\n\r\n        draw_ingredient_card : function(cnt) {\r\n            let data = {\r\n                cnt : cnt,\r\n                my_key : this.my_key,\r\n            }\r\n            socket.emit(\"draw_ingredient_card\", data);\r\n        },\r\n\r\n        // 인게임 라운드 진행 준비 완료를 알리는 함수\r\n        round_ready : function() {\r\n            this.round_order_check = true;\r\n        },\r\n\r\n        round_order_setting_end : function() {\r\n            this.round_order_check = false;\r\n            socket.emit(\"round_ready_on\", this.my_key);\r\n        },\r\n        round_order_setting_close : function() {\r\n            this.round_order_check = false;\r\n        },\r\n\r\n        // decide_order overlay의 완료 버튼\r\n        decide_order_modal_open : function() {\r\n            // 선택 순서에 따라 클릭 막기\r\n            if( this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key){\r\n                alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\r\n                return;\r\n            }\r\n            this.decide_order_modal = !this.decide_order_modal;\r\n        },\r\n        \r\n        // decide_order_modal 의 결정 버튼\r\n        decide_order_setting_end : function() {\r\n            \r\n            let is_select_order = false;\r\n\r\n            for( let i = 0; i < this.final_round_order.length; i++){\r\n                if( this.final_round_order[i].user_key == this.my_key ){\r\n                    is_select_order = true;\r\n                    break;\r\n                }\r\n            }\r\n            if( !is_select_order ) {\r\n                alert(\"순서를 고르고 결정을 눌러주세요\");\r\n                this.decide_order_modal = false;\r\n                return;\r\n            }\r\n            //위 if문에 안걸리면 선택한 순서가 있다는 것 이므로 진행\r\n            // 게임 결정 순서를 공유해야 하므로 서버에 값을 증가시키라고 전송\r\n            socket.emit(\"decide_round_setting_order_counter_incre\");\r\n            this.decide_order_modal = false;\r\n        },\r\n\r\n        select_order_btn : function(val){\r\n            // 선택 순서에 따라 클릭 막기\r\n            if( this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key){\r\n                alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\r\n                return;\r\n            }\r\n\r\n            //\r\n            if( this.final_round_order != '' ){\r\n                for( let i = 0; i < this.final_round_order.length; i++ ){\r\n                    if( this.final_round_order[i].user_key != this.my_key ){\r\n                        if( val == this.final_round_order[i].order) {\r\n                            alert(\"다른 사람이 선택한 순서는 선택 할 수 없습니다.\");\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let round_order_data = {\r\n                user_key : this.my_key,\r\n                order : val\r\n            };\r\n\r\n            // 버튼 선택 결과 전송\r\n            socket.emit(\"select_round_order\", round_order_data);\r\n        },\r\n\r\n        // 큐브로 순서를 선택할 때 반응\r\n        click_order_btn : function(n, u, user_key) {\r\n            if( user_key != this.my_key ){\r\n                alert(\"본인의 색으로 구분된 버튼만 골라주세요!\");\r\n                return;\r\n            }\r\n\r\n            // 라운드가 진행중이면 클릭되선 안됨\r\n            for( let i = 0; i < this.user_data.length; i++ ) {\r\n                if( this.user_data[i].user_key == this.my_key ){\r\n                    if( this.user_data[i].is_ingame == true ){\r\n                        alert(\"라운드 진행 중에는 클릭 할 수 없습니다!\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // n :: final_round_order[유저].user_cube_data[n]\r\n            // u :: final_round_order[유저].user_cube_data[n][u]\r\n            let send_data = {\r\n                user_key : user_key,\r\n                cube_round_order_num : n,\r\n                button_order_num : u,\r\n            }\r\n            //console.log(send_data);\r\n            //버튼 선택 결과 전송\r\n            socket.emit(\"select_cube\", send_data);\r\n        },\r\n\r\n        // 추리테이블 눌렀을 때 반응\r\n        click_reasoning_ele : function(data) {\r\n            let reasoning_data = {\r\n                user_key : this.my_key,\r\n                x : data.x,\r\n                y : data.y,\r\n                change_val : data.change_val\r\n            }\r\n            socket.emit(\"reasoning_table_change\", reasoning_data);\r\n            //console.log(reasoning_data);\r\n        },\r\n\r\n        // 재료카드 선택 이벤트\r\n        pick_ingredient : function(data) {\r\n            if( this.board_1_selected == false || this.final_round_order[this.board_order].user_key != this.my_key){\r\n                alert(\"아직 재료를 고를 수 없습니다.\")\r\n                return;\r\n            }\r\n            console.log(data);\r\n        },\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}