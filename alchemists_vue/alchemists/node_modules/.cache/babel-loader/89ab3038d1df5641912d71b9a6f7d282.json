{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst JSONB = require('json-buffer');\n\nconst zlib = require('zlib');\n\nconst mergeOptions = require('./merge-options');\n\nconst compress = promisify(zlib.brotliCompress);\nconst decompress = promisify(zlib.brotliDecompress);\n\nconst identity = val => val;\n\nconst createCompress = ({\n  enable = true,\n  serialize = JSONB.stringify,\n  deserialize = JSONB.parse,\n  compressOptions,\n  decompressOptions\n} = {}) => {\n  if (!enable) {\n    return {\n      serialize,\n      deserialize,\n      decompress: identity,\n      compress: identity\n    };\n  }\n\n  return {\n    serialize,\n    deserialize,\n    compress: async (data, options = {}) => {\n      if (data === undefined) return data;\n      const serializedData = serialize(data);\n      return compress(serializedData, mergeOptions(compressOptions, options));\n    },\n    decompress: async (data, options = {}) => {\n      if (data === undefined) return data;\n      return deserialize(await decompress(data, mergeOptions(decompressOptions, options)));\n    }\n  };\n};\n\nmodule.exports = createCompress;\nmodule.exports.stringify = JSONB.stringify;\nmodule.exports.parse = JSONB.parse;","map":{"version":3,"names":["promisify","require","JSONB","zlib","mergeOptions","compress","brotliCompress","decompress","brotliDecompress","identity","val","createCompress","enable","serialize","stringify","deserialize","parse","compressOptions","decompressOptions","data","options","undefined","serializedData","module","exports"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/compress-brotli/src/index.js"],"sourcesContent":["'use strict'\n\nconst { promisify } = require('util')\nconst JSONB = require('json-buffer')\nconst zlib = require('zlib')\n\nconst mergeOptions = require('./merge-options')\n\nconst compress = promisify(zlib.brotliCompress)\n\nconst decompress = promisify(zlib.brotliDecompress)\n\nconst identity = val => val\n\nconst createCompress = ({\n  enable = true,\n  serialize = JSONB.stringify,\n  deserialize = JSONB.parse,\n  compressOptions,\n  decompressOptions\n} = {}) => {\n  if (!enable) {\n    return { serialize, deserialize, decompress: identity, compress: identity }\n  }\n\n  return {\n    serialize,\n    deserialize,\n    compress: async (data, options = {}) => {\n      if (data === undefined) return data\n      const serializedData = serialize(data)\n      return compress(serializedData, mergeOptions(compressOptions, options))\n    },\n    decompress: async (data, options = {}) => {\n      if (data === undefined) return data\n      return deserialize(\n        await decompress(data, mergeOptions(decompressOptions, options))\n      )\n    }\n  }\n}\n\nmodule.exports = createCompress\nmodule.exports.stringify = JSONB.stringify\nmodule.exports.parse = JSONB.parse\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,MAAD,CAA7B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,YAAY,GAAGH,OAAO,CAAC,iBAAD,CAA5B;;AAEA,MAAMI,QAAQ,GAAGL,SAAS,CAACG,IAAI,CAACG,cAAN,CAA1B;AAEA,MAAMC,UAAU,GAAGP,SAAS,CAACG,IAAI,CAACK,gBAAN,CAA5B;;AAEA,MAAMC,QAAQ,GAAGC,GAAG,IAAIA,GAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC;EACtBC,MAAM,GAAG,IADa;EAEtBC,SAAS,GAAGX,KAAK,CAACY,SAFI;EAGtBC,WAAW,GAAGb,KAAK,CAACc,KAHE;EAItBC,eAJsB;EAKtBC;AALsB,IAMpB,EANmB,KAMZ;EACT,IAAI,CAACN,MAAL,EAAa;IACX,OAAO;MAAEC,SAAF;MAAaE,WAAb;MAA0BR,UAAU,EAAEE,QAAtC;MAAgDJ,QAAQ,EAAEI;IAA1D,CAAP;EACD;;EAED,OAAO;IACLI,SADK;IAELE,WAFK;IAGLV,QAAQ,EAAE,OAAOc,IAAP,EAAaC,OAAO,GAAG,EAAvB,KAA8B;MACtC,IAAID,IAAI,KAAKE,SAAb,EAAwB,OAAOF,IAAP;MACxB,MAAMG,cAAc,GAAGT,SAAS,CAACM,IAAD,CAAhC;MACA,OAAOd,QAAQ,CAACiB,cAAD,EAAiBlB,YAAY,CAACa,eAAD,EAAkBG,OAAlB,CAA7B,CAAf;IACD,CAPI;IAQLb,UAAU,EAAE,OAAOY,IAAP,EAAaC,OAAO,GAAG,EAAvB,KAA8B;MACxC,IAAID,IAAI,KAAKE,SAAb,EAAwB,OAAOF,IAAP;MACxB,OAAOJ,WAAW,CAChB,MAAMR,UAAU,CAACY,IAAD,EAAOf,YAAY,CAACc,iBAAD,EAAoBE,OAApB,CAAnB,CADA,CAAlB;IAGD;EAbI,CAAP;AAeD,CA1BD;;AA4BAG,MAAM,CAACC,OAAP,GAAiBb,cAAjB;AACAY,MAAM,CAACC,OAAP,CAAeV,SAAf,GAA2BZ,KAAK,CAACY,SAAjC;AACAS,MAAM,CAACC,OAAP,CAAeR,KAAf,GAAuBd,KAAK,CAACc,KAA7B"},"metadata":{},"sourceType":"script"}