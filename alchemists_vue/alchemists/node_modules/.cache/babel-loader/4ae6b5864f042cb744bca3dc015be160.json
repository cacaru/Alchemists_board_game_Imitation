{"ast":null,"code":"export default {\n  name: 'game_lobby_master',\n\n  created() {\n    var server_app = require('express')();\n\n    var server = require('http').createServer(server_app); // http server를 socket.io server로 upgrade한다\n\n\n    var io = require('socket.io')(server);\n\n    app.get('/', function (req, res) {\n      res.sendFile(__dirname + '/index.html');\n    }); //* 웹소켓 연결 시 \n\n    io.on('connection', socket => {\n      const req = socket.request; // 웹소켓과는 달리 req객체를 따로 뽑아야함 \n      //* ip 정보 얻기\n\n      const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n      console.log('새로운 클라이언트 접속!', ip, socket.id, req.ip); // socket.id 는 소켓 연결된 고유한 클라이언트 식별자라고 보면된다. 채팅방의 입장한 고유한 사람 \n      //* 연결 종료 시 \n\n      socket.on('disconnect', () => {\n        console.log('클라이언트 접속 해제', ip, socket.id);\n        clearInterval(socket.interval);\n      }); //* 에러 시 \n\n      socket.on('error', error => {\n        console.error(error);\n      }); //* 클라이언트로부터 메시지 \n\n      socket.on('reply', data => {\n        console.log(data);\n      }); //* 클라이언트로 메세지 보내기 \n\n      socket.interval = setInterval(() => {\n        // 3초마다 클라이언트로 메시지 전송 \n        socket.emit('news', 'Hello Socket.IO');\n      }, 3000);\n    });\n  },\n\n  methods: {}\n};\n/*\r\n  import socketio from 'socket.io-client';\r\n\r\n  var ioInstance = socketio('http://socketserver.com:1923');\r\n\r\n  Vue.use(VueSocketio, ioInstance); // bind custom socketio instance\r\n*/\n\n/*\r\nnew Vue({\r\n  sockets:{\r\n    connect: function(){\r\n      console.log('socket connected')\r\n    },\r\n    customEmit: function(val){\r\n      console.log('this method fired by socket server. eg: io.emit(\"customEmit\", data) :: ' + val)\r\n    }\r\n  },\r\n  methods: {\r\n    clickButton: function(val){\r\n        // $socket is socket.io-client instance\r\n        this.$socket.emit('emit_method', val);\r\n    }\r\n  }\r\n})\r\n*/","map":{"version":3,"mappings":"AAUA,eAAe;EACbA,IAAG,EAAI,mBADM;;EAEbC,OAAO,GAAG;IACR,IAAIC,UAAS,GAAIC,OAAO,CAAC,SAAD,CAAP,EAAjB;;IACA,IAAIC,MAAK,GAAID,OAAO,CAAC,MAAD,CAAP,CAAgBE,YAAhB,CAA6BH,UAA7B,CAAb,CAFQ,CAGR;;;IACA,IAAII,EAAC,GAAIH,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAArB,CAAT;;IAEAG,GAAG,CAACC,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAmB;MAC9BA,GAAG,CAACC,QAAJ,CAAaC,SAAQ,GAAI,aAAzB;IACD,CAFD,EANQ,CAUR;;IACAN,EAAE,CAACO,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;MAC5B,MAAML,GAAE,GAAIK,MAAM,CAACC,OAAnB,CAD4B,CAE5B;MAEA;;MACA,MAAMC,EAAC,GAAIP,GAAG,CAACQ,OAAJ,CAAY,iBAAZ,KAAkCR,GAAG,CAACS,UAAJ,CAAeC,aAA5D;MACAC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,EAA7B,EAAiCF,MAAM,CAACQ,EAAxC,EAA4Cb,GAAG,CAACO,EAAhD,EAN4B,CAO5B;MAEA;;MACAF,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,MAAM;QAC1BO,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,EAA3B,EAA+BF,MAAM,CAACQ,EAAtC;QACAC,aAAa,CAACT,MAAM,CAACU,QAAR,CAAb;MACH,CAHD,EAV4B,CAc5B;;MACAV,MAAM,CAACD,EAAP,CAAU,OAAV,EAAoBY,KAAD,IAAW;QAC1BL,OAAO,CAACK,KAAR,CAAcA,KAAd;MACH,CAFD,EAf4B,CAkB5B;;MACAX,MAAM,CAACD,EAAP,CAAU,OAAV,EAAoBa,IAAD,IAAU;QACzBN,OAAO,CAACC,GAAR,CAAYK,IAAZ;MACH,CAFD,EAnB4B,CAsB5B;;MACAZ,MAAM,CAACU,QAAP,GAAkBG,WAAW,CAAC,MAAM;QAChC;QACAb,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB,iBAApB;MAAyC,CAFhB,EAEkB,IAFlB,CAA7B;IAGC,CA1BL;EA4BD,CAzCY;;EA2CbC,OAAM,EAAI;AA3CG,CAAf;AAkDA;;;;;;AAMA;;AACA;AACA;;;;;;;;;;;;;;;AAeA;AACA","names":["name","created","server_app","require","server","createServer","io","app","get","req","res","sendFile","__dirname","on","socket","request","ip","headers","connection","remoteAddress","console","log","id","clearInterval","interval","error","data","setInterval","emit","methods"],"sourceRoot":"","sources":["E:\\web\\alchemists_vue\\alchemists\\src\\components\\game_lobby_master.vue"],"sourcesContent":["<template>\r\n    <div id=\"game_lobby_master\">\r\n        {{ this.$route.params }}\r\n    </div>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name : 'game_lobby_master',\r\n  created() {\r\n    var server_app = require('express')();\r\n    var server = require('http').createServer(server_app);\r\n    // http server를 socket.io server로 upgrade한다\r\n    var io = require('socket.io')(server);\r\n\r\n    app.get('/', function(req, res) {\r\n      res.sendFile(__dirname + '/index.html');\r\n    });\r\n\r\n    //* 웹소켓 연결 시 \r\n    io.on('connection', (socket) => { \r\n        const req = socket.request; \r\n        // 웹소켓과는 달리 req객체를 따로 뽑아야함 \r\n\r\n        //* ip 정보 얻기\r\n        const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress; \r\n        console.log('새로운 클라이언트 접속!', ip, socket.id, req.ip); \r\n        // socket.id 는 소켓 연결된 고유한 클라이언트 식별자라고 보면된다. 채팅방의 입장한 고유한 사람 \r\n\r\n        //* 연결 종료 시 \r\n        socket.on('disconnect', () => { \r\n            console.log('클라이언트 접속 해제', ip, socket.id); \r\n            clearInterval(socket.interval); \r\n        }); \r\n        //* 에러 시 \r\n        socket.on('error', (error) => { \r\n            console.error(error); \r\n        }); \r\n        //* 클라이언트로부터 메시지 \r\n        socket.on('reply', (data) => { \r\n            console.log(data); \r\n        }); \r\n        //* 클라이언트로 메세지 보내기 \r\n        socket.interval = setInterval(() => { \r\n            // 3초마다 클라이언트로 메시지 전송 \r\n            socket.emit('news', 'Hello Socket.IO'); }, 3000); \r\n        }); \r\n\r\n  },\r\n\r\n  methods : {\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n/*\r\n  import socketio from 'socket.io-client';\r\n\r\n  var ioInstance = socketio('http://socketserver.com:1923');\r\n\r\n  Vue.use(VueSocketio, ioInstance); // bind custom socketio instance\r\n*/\r\n/*\r\nnew Vue({\r\n  sockets:{\r\n    connect: function(){\r\n      console.log('socket connected')\r\n    },\r\n    customEmit: function(val){\r\n      console.log('this method fired by socket server. eg: io.emit(\"customEmit\", data) :: ' + val)\r\n    }\r\n  },\r\n  methods: {\r\n    clickButton: function(val){\r\n        // $socket is socket.io-client instance\r\n        this.$socket.emit('emit_method', val);\r\n    }\r\n  }\r\n})\r\n*/\r\n</script>"]},"metadata":{},"sourceType":"module"}