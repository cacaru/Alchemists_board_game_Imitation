{"ast":null,"code":"'use strict';\n\nconst {\n  Agent\n} = require('../agent.js');\n\nconst JSStreamSocket = require('../utils/js-stream-socket.js');\n\nconst UnexpectedStatusCodeError = require('./unexpected-status-code-error.js');\n\nconst initialize = require('./initialize.js');\n\nclass Http2OverHttpX extends Agent {\n  constructor(options) {\n    super(options);\n    initialize(this, options.proxyOptions);\n  }\n\n  async createConnection(origin, options) {\n    const authority = `${origin.hostname}:${origin.port || 443}`;\n    const [stream, statusCode] = await this._getProxyStream(authority);\n\n    if (statusCode !== 200) {\n      throw new UnexpectedStatusCodeError(statusCode);\n    }\n\n    if (this.proxyOptions.raw) {\n      options.socket = stream;\n    } else {\n      const socket = new JSStreamSocket(stream);\n      socket.encrypted = false;\n\n      socket._handle.getpeername = out => {\n        out.family = undefined;\n        out.address = undefined;\n        out.port = undefined;\n      };\n\n      return socket;\n    }\n\n    return super.createConnection(origin, options);\n  }\n\n}\n\nmodule.exports = Http2OverHttpX;","map":{"version":3,"names":["Agent","require","JSStreamSocket","UnexpectedStatusCodeError","initialize","Http2OverHttpX","constructor","options","proxyOptions","createConnection","origin","authority","hostname","port","stream","statusCode","_getProxyStream","raw","socket","encrypted","_handle","getpeername","out","family","undefined","address","module","exports"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/http2-wrapper/source/proxies/h2-over-hx.js"],"sourcesContent":["'use strict';\nconst {Agent} = require('../agent.js');\nconst JSStreamSocket = require('../utils/js-stream-socket.js');\nconst UnexpectedStatusCodeError = require('./unexpected-status-code-error.js');\nconst initialize = require('./initialize.js');\n\nclass Http2OverHttpX extends Agent {\n\tconstructor(options) {\n\t\tsuper(options);\n\n\t\tinitialize(this, options.proxyOptions);\n\t}\n\n\tasync createConnection(origin, options) {\n\t\tconst authority = `${origin.hostname}:${origin.port || 443}`;\n\n\t\tconst [stream, statusCode] = await this._getProxyStream(authority);\n\t\tif (statusCode !== 200) {\n\t\t\tthrow new UnexpectedStatusCodeError(statusCode);\n\t\t}\n\n\t\tif (this.proxyOptions.raw) {\n\t\t\toptions.socket = stream;\n\t\t} else {\n\t\t\tconst socket = new JSStreamSocket(stream);\n\t\t\tsocket.encrypted = false;\n\t\t\tsocket._handle.getpeername = out => {\n\t\t\t\tout.family = undefined;\n\t\t\t\tout.address = undefined;\n\t\t\t\tout.port = undefined;\n\t\t\t};\n\n\t\t\treturn socket;\n\t\t}\n\n\t\treturn super.createConnection(origin, options);\n\t}\n}\n\nmodule.exports = Http2OverHttpX;\n"],"mappings":"AAAA;;AACA,MAAM;EAACA;AAAD,IAAUC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,8BAAD,CAA9B;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,mCAAD,CAAzC;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,iBAAD,CAA1B;;AAEA,MAAMI,cAAN,SAA6BL,KAA7B,CAAmC;EAClCM,WAAW,CAACC,OAAD,EAAU;IACpB,MAAMA,OAAN;IAEAH,UAAU,CAAC,IAAD,EAAOG,OAAO,CAACC,YAAf,CAAV;EACA;;EAEqB,MAAhBC,gBAAgB,CAACC,MAAD,EAASH,OAAT,EAAkB;IACvC,MAAMI,SAAS,GAAI,GAAED,MAAM,CAACE,QAAS,IAAGF,MAAM,CAACG,IAAP,IAAe,GAAI,EAA3D;IAEA,MAAM,CAACC,MAAD,EAASC,UAAT,IAAuB,MAAM,KAAKC,eAAL,CAAqBL,SAArB,CAAnC;;IACA,IAAII,UAAU,KAAK,GAAnB,EAAwB;MACvB,MAAM,IAAIZ,yBAAJ,CAA8BY,UAA9B,CAAN;IACA;;IAED,IAAI,KAAKP,YAAL,CAAkBS,GAAtB,EAA2B;MAC1BV,OAAO,CAACW,MAAR,GAAiBJ,MAAjB;IACA,CAFD,MAEO;MACN,MAAMI,MAAM,GAAG,IAAIhB,cAAJ,CAAmBY,MAAnB,CAAf;MACAI,MAAM,CAACC,SAAP,GAAmB,KAAnB;;MACAD,MAAM,CAACE,OAAP,CAAeC,WAAf,GAA6BC,GAAG,IAAI;QACnCA,GAAG,CAACC,MAAJ,GAAaC,SAAb;QACAF,GAAG,CAACG,OAAJ,GAAcD,SAAd;QACAF,GAAG,CAACT,IAAJ,GAAWW,SAAX;MACA,CAJD;;MAMA,OAAON,MAAP;IACA;;IAED,OAAO,MAAMT,gBAAN,CAAuBC,MAAvB,EAA+BH,OAA/B,CAAP;EACA;;AA9BiC;;AAiCnCmB,MAAM,CAACC,OAAP,GAAiBtB,cAAjB"},"metadata":{},"sourceType":"script"}