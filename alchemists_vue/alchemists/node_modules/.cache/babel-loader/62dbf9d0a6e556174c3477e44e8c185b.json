{"ast":null,"code":"import io from 'socket.io-client'; // 다른 곳에서도 쓸 수 있게 전역 선언\n\nvar socket;\nexport default {\n  name: 'game_lobby',\n\n  created() {\n    //this.$route.params.room_address:this.$route.params.port\n    socket = io(`http://192.168.0.102:3000`); // console.log(params);\n    // console.log(params.nick_name);\n    //console.log(\"server in\");\n    //console.log(this.$route.params);\n\n    let msg; //마스터 인 입장만 count를 가지고 있으므로\n\n    if (this.$route.params.is_master === 'true') {\n      msg = {\n        user_name: this.$route.params.nick_name,\n        room_pw: this.$route.params.room_pw,\n        count: this.$route.params.count,\n        is_master: this.$route.params.is_master,\n        is_ready: false,\n        msg: this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\n      }; //console.log(\"master\");\n    } else {\n      msg = {\n        user_name: this.$route.params.nick_name,\n        room_pw: this.$route.params.room_pw,\n        is_master: this.$route.params.is_master,\n        is_ready: false,\n        msg: this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\n      }; //console.log(\"entras\");\n    } // 입장했음을 알림\n\n\n    socket.emit(\"enter\", msg); // 방 정보를 받음 - 입장 했을 때 자신에게만 한 번 전송\n\n    socket.on(\"announce_room_name\", room_data => {\n      this.room_name = room_data.room_name;\n      this.my_key = room_data.my_key; //console.log(this.my_key);\n    }); //다른 채팅이 있는지 확인\n\n    socket.on(\"chat\", data => {\n      switch (data.type) {\n        case \"announce\":\n          this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\n          break;\n\n        case \"normal\":\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\n          break;\n      } //console.log(\"chat :: \");\n      //console.log(data);\n\n    }); // 다른 플레이어가 입장시 / 색깔 선택 시 정보를 받음\n\n    socket.on(\"all_player\", data => {\n      //console.log(data);\n      this.users = data;\n    }); //입장시 방이 가득 찼는지 확인\n\n    socket.on(\"pull_room\", () => {\n      //console.log(res + \"방이 가득 찼습니다.\");\n      alert(\"방이 가득 찼습니다. 뒤로 돌아갑니다\"); // master 면 create 로\n\n      if (this.$route.params.is_master === 'true') {\n        this.$router.push({\n          name: 'create_lobby',\n          params: {\n            count: this.$route.params.count\n          }\n        });\n      } // entrans 면 enter 로\n      else {\n        this.$router.push({\n          name: 'enter_lobby'\n        });\n      }\n    }); // 마스터가 아닌데 방이 없는 곳에 들어갈 경우\n\n    socket.on(\"no_room\", () => {\n      alert(\"방이 아직 생성되지 않았거나 잘못된 주소입니다. 주소를 확인해주세요\");\n      alert(\"뒤로 돌아갑니다.\");\n      this.$router.push({\n        name: 'enter_lobby'\n      });\n    }); // 비밀번호가 잘못 된 경우\n\n    socket.on(\"wrong_pw\", () => {\n      alert(\"비밀번호가 잘못되었습니다. 비밀번호를 확인해주세요\");\n      this.$router.push({\n        name: 'enter_lobby'\n      });\n    }); // 게임 시작으로 인해 모두 방으로 이동\n\n    socket.on(\"everyone_move_to_board\", () => {\n      this.$router.push({\n        name: 'game_board',\n        params: {\n          users: JSON.stringify(this.users)\n        }\n      });\n    });\n  },\n\n  data() {\n    return {\n      users: '',\n      textarea: '',\n      message: '',\n      room_name: '',\n      my_key: '',\n      my_name: this.$route.params.nick_name,\n      color_button: 'inline-block',\n      back_button: 'none',\n      toggle_game_start: \"준비완료\"\n    };\n  },\n\n  methods: {\n    // 고른 색을 서버에 알림\n    choose_color: function (color, my_name, my_key) {\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\n      let data = {\n        user_name: my_name,\n        user_color: color,\n        user_key: my_key\n      }; //선택한 값을 서버에 전송\n\n      socket.emit(\"edit_color\", data);\n    },\n    sending_message: function () {\n      if (this.message !== '') {\n        let msg = {\n          speaker: this.my_name,\n          msg: this.message,\n          type: \"normal\"\n        }; //console.log(msg);\n\n        this.message = '';\n        socket.emit(\"chat\", msg);\n      }\n    },\n    back_choose_color: function () {\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\n      let data = {\n        user_name: this.my_name,\n        user_color: '',\n        user_key: this.my_key\n      }; //선택한 값을 서버에 전송\n\n      socket.emit(\"edit_color\", data);\n    },\n    game_start: function () {\n      var ready_player = 0; // 준비 완료 시 데이터를 갱신하므로 is_ready 값이 true 인 수를 셈\n\n      for (var i = 0; i < this.users.length; i++) {\n        if (this.users[i].is_ready === true) {\n          ready_player++;\n        }\n      } // master는 is_ready 값이 false 이므로 +1 \n      // 방최대 인원까지 모두 모여야 게임 시작 가능하게 함\n\n\n      if (ready_player + 1 == this.users.length && this.users.length == this.$route.params.count) {\n        console.log(\"게임 시작 준비 완료\");\n        console.log(socket);\n        socket.emit(\"move_to_board_everyone\");\n      } else {\n        alert(\"모든 플레이어가 준비 완료상태가 되어야 합니다.\");\n      }\n    },\n    game_ready: function () {\n      var is_select_color = false;\n\n      for (var i = 0; i < this.users.length; i++) {\n        if (this.users[i].user_key === this.my_key) {\n          if (this.users[i].user_color != '') {\n            is_select_color = true;\n          }\n        }\n      }\n\n      if (!is_select_color) {\n        alert(\"색을 먼저 선택해주세요!\");\n        return;\n      }\n\n      this.toggle_game_start = this.toggle_game_start === '준비완료' ? '시작대기' : '준비완료';\n      var ready_var;\n\n      if (this.toggle_game_start === '준비완료') {\n        ready_var = false;\n      } else {\n        ready_var = true;\n      }\n\n      let data = {\n        is_ready: ready_var,\n        user_key: this.my_key\n      };\n      socket.emit(\"lobby_ready\", data);\n    }\n  }\n};\nexport { socket };","map":{"version":3,"mappings":"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","names":["io","socket","name","created","msg","$route","params","is_master","user_name","nick_name","room_pw","count","is_ready","emit","on","room_data","room_name","my_key","data","type","textarea","speaker","users","alert","$router","push","JSON","stringify","message","my_name","color_button","back_button","toggle_game_start","methods","choose_color","color","user_color","user_key","sending_message","back_choose_color","game_start","ready_player","i","length","console","log","game_ready","is_select_color","ready_var"],"sourceRoot":"","sources":["E:\\web\\alchemists_vue\\alchemists\\src\\components\\game_lobby.vue"],"sourcesContent":["<template>\r\n    <b-container id=\"game_lobby\">\r\n      <b-row>\r\n        <b-col>\r\n          <div id=\"room_title\">\r\n              {{ room_name }}\r\n          </div>\r\n        </b-col>\r\n      </b-row>\r\n      <b-row id=\"room_back\">\r\n        <b-col>\r\n          <b-container id=\"room_back\">\r\n            <b-row align-v=\"stretch\" v-for=\"i in Math.ceil(users.length / 2 )\" :key=\"i\">\r\n              <b-col sm=\"6\" v-for=\"entrans in users.slice((i - 1) * 2, i * 2)\" :key=\"entrans\">\r\n                \r\n                <div>\r\n                  <b-overlay v-bind:show=\"entrans.is_ready == true\" class=\"entrans\" rounded=\"lg\" >\r\n                    <p class=\"inline name\" v-if=\"entrans.is_master === 'true'\">방장</p>\r\n                    <p class=\"inline name\">이름</p>\r\n                    <p class=\"inline user_name\"> {{ entrans.user_name }} </p>\r\n                    \r\n                    <div class=\"choose_color_section\">\r\n                      <p class=\"user_color_announce\" v-if=\"entrans.user_color == '' \"> 색 선택 중 </p>\r\n                      <p class=\"user_color_announce\" v-else > 고른 색 </p>\r\n                      <div class=\"button_area\" v-if=\"my_key === entrans.user_key\">\r\n                        <b-icon-funnel-fill v-on:click=\"choose_color('red',   entrans.user_name, entrans.user_key)\" v-bind:style=\"{display : color_button }\" style=\"width : 45px; height: 45px; color:red; transform: rotate(180deg);\"></b-icon-funnel-fill>\r\n                        <b-icon-funnel-fill v-on:click=\"choose_color('blue',  entrans.user_name, entrans.user_key)\" v-bind:style=\"{display : color_button }\" style=\"width : 45px; height: 45px; color:blue; transform: rotate(180deg);\"></b-icon-funnel-fill>\r\n                        <b-icon-funnel-fill v-on:click=\"choose_color('black', entrans.user_name, entrans.user_key)\" v-bind:style=\"{display : color_button }\" style=\"width : 45px; height: 45px; color:black; transform: rotate(180deg);\"></b-icon-funnel-fill>\r\n                        <b-icon-funnel-fill v-on:click=\"choose_color('white', entrans.user_name, entrans.user_key)\" v-bind:style=\"{display : color_button }\" style=\"width : 45px; height: 45px; color:white; transform: rotate(180deg);\"></b-icon-funnel-fill>\r\n                        <b-icon-funnel-fill v-on:click=\"back_choose_color\" v-bind:style=\"{display : back_button , color: entrans.user_color }\" style=\"width : 45px; height: 45px; transform: rotate(180deg);\"></b-icon-funnel-fill>\r\n                        <p class=\"announce\" v-bind:style=\"{display : back_button }\"> 한 번 더 누르면 고른 색이 취소됩니다. </p>\r\n                      </div>\r\n                      <div v-else>\r\n                        <b-icon-funnel-fill v-bind:style=\"{ color : entrans.user_color }\" style=\"width : 40px; height: 40px; transform: rotate(180deg);\"/>\r\n                      </div>\r\n                    </div>\r\n                    <template v-slot:overlay>\r\n                      <div class=\"overlay_ready\">\r\n                          <b-icon-funnel style=\"width:100px; height:100px;\" />\r\n                          <p id=\"check_label\">준비 완료</p>\r\n                      </div>\r\n                    </template>\r\n                  </b-overlay>\r\n                </div>\r\n              </b-col>\r\n            </b-row>\r\n          </b-container>\r\n        </b-col>\r\n      </b-row>\r\n\r\n      <b-row id=\"end_content\">\r\n        <b-col sm=\"8\">\r\n          <textarea id=\"chat_area\" v-model=\"textarea\" disabled></textarea>\r\n          <div></div>\r\n          <input id=\"message_area\" v-model=\"message\" v-on:keyup.enter=\"sending_message\"/>\r\n          <b-button pill id=\"sending\" v-on:click=\"sending_message\"> 보내기 </b-button>\r\n        </b-col>\r\n        <b-col>\r\n          <b-button pill class=\"game_start\" v-on:click=\"game_start\" v-if=\"this.$route.params.is_master === 'true' \"> 게임 시작 </b-button>\r\n          <b-button pill class=\"game_start\" v-on:click=\"game_ready\" v-else> {{ this.toggle_game_start }} </b-button>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n</template>\r\n\r\n<script>\r\nimport io from 'socket.io-client';\r\n\r\n\r\n// 다른 곳에서도 쓸 수 있게 전역 선언\r\nvar socket;\r\n\r\nexport default {\r\n  name : 'game_lobby',\r\n\r\n  created() {\r\n    //this.$route.params.room_address:this.$route.params.port\r\n    socket = io(`http://192.168.0.102:3000`);\r\n    // console.log(params);\r\n    // console.log(params.nick_name);\r\n    //console.log(\"server in\");\r\n    //console.log(this.$route.params);\r\n    let msg;\r\n    //마스터 인 입장만 count를 가지고 있으므로\r\n    if ( this.$route.params.is_master === 'true' ) {\r\n      msg = {\r\n        user_name : this.$route.params.nick_name,\r\n        room_pw   : this.$route.params.room_pw,\r\n        count     : this.$route.params.count,\r\n        is_master : this.$route.params.is_master,\r\n        is_ready  : false,\r\n        msg       : this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\r\n      };\r\n      //console.log(\"master\");\r\n    } else {\r\n      msg = {\r\n        user_name : this.$route.params.nick_name,\r\n        room_pw   : this.$route.params.room_pw,\r\n        is_master : this.$route.params.is_master,\r\n        is_ready  : false,\r\n        msg       : this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\r\n      }\r\n      //console.log(\"entras\");\r\n    }\r\n   \r\n    // 입장했음을 알림\r\n    socket.emit(\"enter\", msg);\r\n\r\n    // 방 정보를 받음 - 입장 했을 때 자신에게만 한 번 전송\r\n    socket.on(\"announce_room_name\", (room_data) => {\r\n      this.room_name = room_data.room_name;\r\n      this.my_key = room_data.my_key;\r\n      //console.log(this.my_key);\r\n    })\r\n\r\n\r\n    //다른 채팅이 있는지 확인\r\n    socket.on(\"chat\", (data) => {\r\n      switch ( data.type ) {\r\n        case \"announce\" :\r\n          this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\r\n          break;\r\n        case \"normal\" :\r\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\r\n          break;\r\n      }\r\n      //console.log(\"chat :: \");\r\n      //console.log(data);\r\n    });\r\n\r\n    // 다른 플레이어가 입장시 / 색깔 선택 시 정보를 받음\r\n    socket.on(\"all_player\", (data) => {\r\n      //console.log(data);\r\n      this.users = data;\r\n    });\r\n\r\n    //입장시 방이 가득 찼는지 확인\r\n    socket.on(\"pull_room\", () => {\r\n        //console.log(res + \"방이 가득 찼습니다.\");\r\n        alert(\"방이 가득 찼습니다. 뒤로 돌아갑니다\");\r\n        // master 면 create 로\r\n        if( this.$route.params.is_master === 'true' ){\r\n          this.$router.push({\r\n            name: 'create_lobby',\r\n            params : {\r\n                count : this.$route.params.count\r\n            }\r\n          });\r\n        }\r\n        // entrans 면 enter 로\r\n        else {\r\n          this.$router.push({\r\n            name: 'enter_lobby',\r\n          });\r\n        }\r\n        \r\n        \r\n    });\r\n\r\n    // 마스터가 아닌데 방이 없는 곳에 들어갈 경우\r\n    socket.on(\"no_room\", () => {\r\n      alert(\"방이 아직 생성되지 않았거나 잘못된 주소입니다. 주소를 확인해주세요\");\r\n      alert(\"뒤로 돌아갑니다.\");\r\n      this.$router.push({\r\n          name: 'enter_lobby'\r\n      });\r\n    })\r\n\r\n    // 비밀번호가 잘못 된 경우\r\n    socket.on(\"wrong_pw\", () => {\r\n      alert(\"비밀번호가 잘못되었습니다. 비밀번호를 확인해주세요\");\r\n      this.$router.push({\r\n        name: 'enter_lobby'\r\n      });\r\n    });\r\n\r\n    // 게임 시작으로 인해 모두 방으로 이동\r\n    socket.on(\"everyone_move_to_board\", () => {\r\n      this.$router.push({\r\n              name: 'game_board',\r\n              params : {\r\n                  users : JSON.stringify(this.users),\r\n              }\r\n        })\r\n    });\r\n\r\n  },\r\n  data() {\r\n    return  {\r\n      users : '',\r\n      textarea : '',\r\n      message : '',\r\n      room_name : '',\r\n      my_key : '',\r\n      my_name : this.$route.params.nick_name,\r\n      color_button : 'inline-block',\r\n      back_button : 'none',\r\n      toggle_game_start : \"준비완료\",\r\n    }\r\n  },\r\n  methods : {\r\n    // 고른 색을 서버에 알림\r\n    choose_color : function(color, my_name, my_key) {\r\n\r\n        this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\r\n        this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\r\n        let data = {\r\n          user_name   : my_name,\r\n          user_color  : color,\r\n          user_key    : my_key\r\n        }\r\n        //선택한 값을 서버에 전송\r\n        socket.emit(\"edit_color\", data);\r\n\r\n    },\r\n\r\n    sending_message : function(){\r\n      if( this.message !== '' ){\r\n        let msg = {\r\n          speaker : this.my_name,\r\n          msg : this.message,\r\n          type : \"normal\"\r\n        }\r\n        //console.log(msg);\r\n        this.message = '';\r\n        socket.emit(\"chat\", msg);\r\n      }\r\n    },\r\n\r\n    back_choose_color : function() {\r\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\r\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\r\n      let data = {\r\n          user_name   : this.my_name,\r\n          user_color  : '',\r\n          user_key    : this.my_key\r\n        }\r\n      //선택한 값을 서버에 전송\r\n      socket.emit(\"edit_color\", data);\r\n    },\r\n\r\n    game_start : function() {\r\n\r\n      var ready_player = 0;\r\n      // 준비 완료 시 데이터를 갱신하므로 is_ready 값이 true 인 수를 셈\r\n      for( var i = 0 ; i < this.users.length; i++){\r\n        if ( this.users[i].is_ready === true ) {\r\n          ready_player++;\r\n        }\r\n      }\r\n      // master는 is_ready 값이 false 이므로 +1 \r\n      // 방최대 인원까지 모두 모여야 게임 시작 가능하게 함\r\n      if( ready_player + 1 == this.users.length && this.users.length == this.$route.params.count ){\r\n        console.log(\"게임 시작 준비 완료\");\r\n        console.log(socket);\r\n\r\n        socket.emit(\"move_to_board_everyone\");\r\n\r\n      }\r\n      else {\r\n        alert(\"모든 플레이어가 준비 완료상태가 되어야 합니다.\");\r\n      }\r\n\r\n    },\r\n\r\n    game_ready : function(){\r\n      var is_select_color = false;\r\n      for( var i = 0 ; i < this.users.length; i++){\r\n        if( this.users[i].user_key === this.my_key ){\r\n          if( this.users[i].user_color != '' ){\r\n            is_select_color = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if( !is_select_color ) {\r\n        alert(\"색을 먼저 선택해주세요!\");\r\n        return;\r\n      }\r\n\r\n      this.toggle_game_start = this.toggle_game_start === '준비완료' ? '시작대기' : '준비완료';\r\n      var ready_var;\r\n\r\n      if ( this.toggle_game_start === '준비완료' ){\r\n        ready_var = false;\r\n      }else {\r\n        ready_var = true;\r\n      }\r\n      \r\n      let data = {\r\n        is_ready : ready_var,\r\n        user_key : this.my_key\r\n      };\r\n\r\n      socket.emit(\"lobby_ready\", data);\r\n    }\r\n      \r\n\r\n  },\r\n}\r\n\r\nexport { socket };\r\n</script>\r\n\r\n<style scoped src=\"@/assets/css/game_lobby.css\"></style>"]},"metadata":{},"sourceType":"module"}