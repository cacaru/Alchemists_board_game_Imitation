{"ast":null,"code":"'use strict';\n\nconst tls = require('tls');\n\nmodule.exports = (options = {}, connect = tls.connect) => new Promise((resolve, reject) => {\n  let timeout = false;\n  let socket;\n\n  const callback = async () => {\n    await socketPromise;\n    socket.off('timeout', onTimeout);\n    socket.off('error', reject);\n\n    if (options.resolveSocket) {\n      resolve({\n        alpnProtocol: socket.alpnProtocol,\n        socket,\n        timeout\n      });\n\n      if (timeout) {\n        await Promise.resolve();\n        socket.emit('timeout');\n      }\n    } else {\n      socket.destroy();\n      resolve({\n        alpnProtocol: socket.alpnProtocol,\n        timeout\n      });\n    }\n  };\n\n  const onTimeout = async () => {\n    timeout = true;\n    callback();\n  };\n\n  const socketPromise = (async () => {\n    try {\n      socket = await connect(options, callback);\n      socket.on('error', reject);\n      socket.once('timeout', onTimeout);\n    } catch (error) {\n      reject(error);\n    }\n  })();\n});","map":{"version":3,"names":["tls","require","module","exports","options","connect","Promise","resolve","reject","timeout","socket","callback","socketPromise","off","onTimeout","resolveSocket","alpnProtocol","emit","destroy","on","once","error"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/resolve-alpn/index.js"],"sourcesContent":["'use strict';\nconst tls = require('tls');\n\nmodule.exports = (options = {}, connect = tls.connect) => new Promise((resolve, reject) => {\n\tlet timeout = false;\n\n\tlet socket;\n\n\tconst callback = async () => {\n\t\tawait socketPromise;\n\n\t\tsocket.off('timeout', onTimeout);\n\t\tsocket.off('error', reject);\n\n\t\tif (options.resolveSocket) {\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, socket, timeout});\n\n\t\t\tif (timeout) {\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tsocket.emit('timeout');\n\t\t\t}\n\t\t} else {\n\t\t\tsocket.destroy();\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, timeout});\n\t\t}\n\t};\n\n\tconst onTimeout = async () => {\n\t\ttimeout = true;\n\t\tcallback();\n\t};\n\n\tconst socketPromise = (async () => {\n\t\ttry {\n\t\t\tsocket = await connect(options, callback);\n\n\t\t\tsocket.on('error', reject);\n\t\t\tsocket.once('timeout', onTimeout);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t})();\n});\n"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,OAAO,GAAG,EAAX,EAAeC,OAAO,GAAGL,GAAG,CAACK,OAA7B,KAAyC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC1F,IAAIC,OAAO,GAAG,KAAd;EAEA,IAAIC,MAAJ;;EAEA,MAAMC,QAAQ,GAAG,YAAY;IAC5B,MAAMC,aAAN;IAEAF,MAAM,CAACG,GAAP,CAAW,SAAX,EAAsBC,SAAtB;IACAJ,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBL,MAApB;;IAEA,IAAIJ,OAAO,CAACW,aAAZ,EAA2B;MAC1BR,OAAO,CAAC;QAACS,YAAY,EAAEN,MAAM,CAACM,YAAtB;QAAoCN,MAApC;QAA4CD;MAA5C,CAAD,CAAP;;MAEA,IAAIA,OAAJ,EAAa;QACZ,MAAMH,OAAO,CAACC,OAAR,EAAN;QACAG,MAAM,CAACO,IAAP,CAAY,SAAZ;MACA;IACD,CAPD,MAOO;MACNP,MAAM,CAACQ,OAAP;MACAX,OAAO,CAAC;QAACS,YAAY,EAAEN,MAAM,CAACM,YAAtB;QAAoCP;MAApC,CAAD,CAAP;IACA;EACD,CAjBD;;EAmBA,MAAMK,SAAS,GAAG,YAAY;IAC7BL,OAAO,GAAG,IAAV;IACAE,QAAQ;EACR,CAHD;;EAKA,MAAMC,aAAa,GAAG,CAAC,YAAY;IAClC,IAAI;MACHF,MAAM,GAAG,MAAML,OAAO,CAACD,OAAD,EAAUO,QAAV,CAAtB;MAEAD,MAAM,CAACS,EAAP,CAAU,OAAV,EAAmBX,MAAnB;MACAE,MAAM,CAACU,IAAP,CAAY,SAAZ,EAAuBN,SAAvB;IACA,CALD,CAKE,OAAOO,KAAP,EAAc;MACfb,MAAM,CAACa,KAAD,CAAN;IACA;EACD,CATqB,GAAtB;AAUA,CAvCyD,CAA1D"},"metadata":{},"sourceType":"script"}