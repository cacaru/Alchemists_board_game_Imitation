{"ast":null,"code":"\"use strict\"; // imported from https://github.com/socketio/engine.io-parser/tree/2.2.x\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePayloadAsBinary = exports.encodePayloadAsBinary = exports.decodePayload = exports.encodePayload = exports.decodeBase64Packet = exports.decodePacket = exports.encodeBase64Packet = exports.encodePacket = exports.packets = exports.protocol = void 0;\n/**\n * Module dependencies.\n */\n\nvar utf8 = require('./utf8');\n/**\n * Current protocol version.\n */\n\n\nexports.protocol = 3;\n\nconst hasBinary = packets => {\n  for (const packet of packets) {\n    if (packet.data instanceof ArrayBuffer || ArrayBuffer.isView(packet.data)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Packet types.\n */\n\n\nexports.packets = {\n  open: 0 // non-ws\n  ,\n  close: 1 // non-ws\n  ,\n  ping: 2,\n  pong: 3,\n  message: 4,\n  upgrade: 5,\n  noop: 6\n};\nvar packetslist = Object.keys(exports.packets);\n/**\n * Premade error packet.\n */\n\nvar err = {\n  type: 'error',\n  data: 'parser error'\n};\nconst EMPTY_BUFFER = Buffer.concat([]);\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nfunction encodePacket(packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  if (Buffer.isBuffer(packet.data)) {\n    return encodeBuffer(packet, supportsBinary, callback);\n  } else if (packet.data && (packet.data.buffer || packet.data) instanceof ArrayBuffer) {\n    return encodeBuffer({\n      type: packet.type,\n      data: arrayBufferToBuffer(packet.data)\n    }, supportsBinary, callback);\n  } // Sending data as a utf-8 string\n\n\n  var encoded = exports.packets[packet.type]; // data fragment is optional\n\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), {\n      strict: false\n    }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n}\n\nexports.encodePacket = encodePacket;\n;\n/**\n * Encode Buffer data\n */\n\nfunction encodeBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var typeBuffer = Buffer.allocUnsafe(1);\n  typeBuffer[0] = exports.packets[packet.type];\n  return callback(Buffer.concat([typeBuffer, data]));\n}\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\n\nfunction encodeBase64Packet(packet, callback) {\n  var data = Buffer.isBuffer(packet.data) ? packet.data : arrayBufferToBuffer(packet.data);\n  var message = 'b' + exports.packets[packet.type];\n  message += data.toString('base64');\n  return callback(message);\n}\n\nexports.encodeBase64Packet = encodeBase64Packet;\n;\n/**\n * Decodes a packet. Data also available as an ArrayBuffer if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nfunction decodePacket(data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n\n  var type; // String data\n\n  if (typeof data === 'string') {\n    type = data.charAt(0);\n\n    if (type === 'b') {\n      return decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n\n      if (data === false) {\n        return err;\n      }\n    }\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return {\n        type: packetslist[type],\n        data: data.substring(1)\n      };\n    } else {\n      return {\n        type: packetslist[type]\n      };\n    }\n  } // Binary data\n\n\n  if (binaryType === 'arraybuffer') {\n    // wrap Buffer/ArrayBuffer data into an Uint8Array\n    var intArray = new Uint8Array(data);\n    type = intArray[0];\n    return {\n      type: packetslist[type],\n      data: intArray.buffer.slice(1)\n    };\n  }\n\n  if (data instanceof ArrayBuffer) {\n    data = arrayBufferToBuffer(data);\n  }\n\n  type = data[0];\n  return {\n    type: packetslist[type],\n    data: data.slice(1)\n  };\n}\n\nexports.decodePacket = decodePacket;\n;\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, {\n      strict: false\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return data;\n}\n/**\n * Decodes a packet encoded in a base64 string.\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\n\nfunction decodeBase64Packet(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  var data = Buffer.from(msg.substr(1), 'base64');\n\n  if (binaryType === 'arraybuffer') {\n    var abv = new Uint8Array(data.length);\n\n    for (var i = 0; i < abv.length; i++) {\n      abv[i] = data[i];\n    } // @ts-ignore\n\n\n    data = abv.buffer;\n  }\n\n  return {\n    type: type,\n    data: data\n  };\n}\n\nexports.decodeBase64Packet = decodeBase64Packet;\n;\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nfunction encodePayload(packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  if (supportsBinary && hasBinary(packets)) {\n    return encodePayloadAsBinary(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function encodeOne(packet, doneCallback) {\n    encodePacket(packet, supportsBinary, false, function (message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function (err, results) {\n    return callback(results.join(''));\n  });\n}\n\nexports.encodePayload = encodePayload;\n;\n\nfunction setLengthHeader(message) {\n  return message.length + ':' + message;\n}\n/**\n * Async array map using after\n */\n\n\nfunction map(ary, each, done) {\n  const results = new Array(ary.length);\n  let count = 0;\n\n  for (let i = 0; i < ary.length; i++) {\n    each(ary[i], (error, msg) => {\n      results[i] = msg;\n\n      if (++count === ary.length) {\n        done(null, results);\n      }\n    });\n  }\n}\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\n\nfunction decodePayload(data, binaryType, callback) {\n  if (typeof data !== 'string') {\n    return decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '',\n      n,\n      msg,\n      packet;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    } // @ts-ignore\n\n\n    if (length === '' || length != (n = Number(length))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var more = callback(packet, i + n, l);\n      if (false === more) return;\n    } // advance cursor\n\n\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n}\n\nexports.decodePayload = decodePayload;\n;\n/**\n *\n * Converts a buffer to a utf8.js encoded string\n *\n * @api private\n */\n\nfunction bufferToString(buffer) {\n  var str = '';\n\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    str += String.fromCharCode(buffer[i]);\n  }\n\n  return str;\n}\n/**\n *\n * Converts a utf8.js encoded string to a buffer\n *\n * @api private\n */\n\n\nfunction stringToBuffer(string) {\n  var buf = Buffer.allocUnsafe(string.length);\n\n  for (var i = 0, l = string.length; i < l; i++) {\n    buf.writeUInt8(string.charCodeAt(i), i);\n  }\n\n  return buf;\n}\n/**\n *\n * Converts an ArrayBuffer to a Buffer\n *\n * @api private\n */\n\n\nfunction arrayBufferToBuffer(data) {\n  // data is either an ArrayBuffer or ArrayBufferView.\n  var length = data.byteLength || data.length;\n  var offset = data.byteOffset || 0;\n  return Buffer.from(data.buffer || data, offset, length);\n}\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {Buffer} encoded payload\n * @api private\n */\n\n\nfunction encodePayloadAsBinary(packets, callback) {\n  if (!packets.length) {\n    return callback(EMPTY_BUFFER);\n  }\n\n  map(packets, encodeOneBinaryPacket, function (err, results) {\n    return callback(Buffer.concat(results));\n  });\n}\n\nexports.encodePayloadAsBinary = encodePayloadAsBinary;\n;\n\nfunction encodeOneBinaryPacket(p, doneCallback) {\n  function onBinaryPacketEncode(packet) {\n    var encodingLength = '' + packet.length;\n    var sizeBuffer;\n\n    if (typeof packet === 'string') {\n      sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);\n      sizeBuffer[0] = 0; // is a string (not true binary = 0)\n\n      for (var i = 0; i < encodingLength.length; i++) {\n        sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\n      }\n\n      sizeBuffer[sizeBuffer.length - 1] = 255;\n      return doneCallback(null, Buffer.concat([sizeBuffer, stringToBuffer(packet)]));\n    }\n\n    sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);\n    sizeBuffer[0] = 1; // is binary (true binary = 1)\n\n    for (var i = 0; i < encodingLength.length; i++) {\n      sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\n    }\n\n    sizeBuffer[sizeBuffer.length - 1] = 255;\n    doneCallback(null, Buffer.concat([sizeBuffer, packet]));\n  }\n\n  encodePacket(p, true, true, onBinaryPacketEncode);\n}\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n\n * @param {Buffer} data, callback method\n * @api public\n */\n\n\nfunction decodePayloadAsBinary(data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n  var i;\n\n  while (bufferTail.length > 0) {\n    var strLen = '';\n    var isString = bufferTail[0] === 0;\n\n    for (i = 1;; i++) {\n      if (bufferTail[i] === 255) break; // 310 = char length of Number.MAX_VALUE\n\n      if (strLen.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      strLen += '' + bufferTail[i];\n    }\n\n    bufferTail = bufferTail.slice(strLen.length + 1);\n    var msgLength = parseInt(strLen, 10);\n    var msg = bufferTail.slice(1, msgLength + 1);\n    if (isString) msg = bufferToString(msg);\n    buffers.push(msg);\n    bufferTail = bufferTail.slice(msgLength + 1);\n  }\n\n  var total = buffers.length;\n\n  for (i = 0; i < total; i++) {\n    var buffer = buffers[i];\n    callback(decodePacket(buffer, binaryType, true), i, total);\n  }\n}\n\nexports.decodePayloadAsBinary = decodePayloadAsBinary;\n;","map":{"version":3,"names":["Object","defineProperty","exports","value","decodePayloadAsBinary","encodePayloadAsBinary","decodePayload","encodePayload","decodeBase64Packet","decodePacket","encodeBase64Packet","encodePacket","packets","protocol","utf8","require","hasBinary","packet","data","ArrayBuffer","isView","open","close","ping","pong","message","upgrade","noop","packetslist","keys","err","type","EMPTY_BUFFER","Buffer","concat","supportsBinary","utf8encode","callback","isBuffer","encodeBuffer","buffer","arrayBufferToBuffer","encoded","undefined","encode","String","strict","typeBuffer","allocUnsafe","toString","binaryType","utf8decode","charAt","substr","tryDecode","Number","length","substring","intArray","Uint8Array","slice","decode","e","msg","from","abv","i","encodeOne","doneCallback","setLengthHeader","map","results","join","ary","each","done","Array","count","error","n","l","chr","more","bufferToString","str","fromCharCode","stringToBuffer","string","buf","writeUInt8","charCodeAt","byteLength","offset","byteOffset","encodeOneBinaryPacket","p","onBinaryPacketEncode","encodingLength","sizeBuffer","parseInt","bufferTail","buffers","strLen","isString","msgLength","push","total"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/engine.io/build/parser-v3/index.js"],"sourcesContent":["\"use strict\";\n// imported from https://github.com/socketio/engine.io-parser/tree/2.2.x\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodePayloadAsBinary = exports.encodePayloadAsBinary = exports.decodePayload = exports.encodePayload = exports.decodeBase64Packet = exports.decodePacket = exports.encodeBase64Packet = exports.encodePacket = exports.packets = exports.protocol = void 0;\n/**\n * Module dependencies.\n */\nvar utf8 = require('./utf8');\n/**\n * Current protocol version.\n */\nexports.protocol = 3;\nconst hasBinary = (packets) => {\n    for (const packet of packets) {\n        if (packet.data instanceof ArrayBuffer || ArrayBuffer.isView(packet.data)) {\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * Packet types.\n */\nexports.packets = {\n    open: 0 // non-ws\n    ,\n    close: 1 // non-ws\n    ,\n    ping: 2,\n    pong: 3,\n    message: 4,\n    upgrade: 5,\n    noop: 6\n};\nvar packetslist = Object.keys(exports.packets);\n/**\n * Premade error packet.\n */\nvar err = { type: 'error', data: 'parser error' };\nconst EMPTY_BUFFER = Buffer.concat([]);\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\nfunction encodePacket(packet, supportsBinary, utf8encode, callback) {\n    if (typeof supportsBinary === 'function') {\n        callback = supportsBinary;\n        supportsBinary = null;\n    }\n    if (typeof utf8encode === 'function') {\n        callback = utf8encode;\n        utf8encode = null;\n    }\n    if (Buffer.isBuffer(packet.data)) {\n        return encodeBuffer(packet, supportsBinary, callback);\n    }\n    else if (packet.data && (packet.data.buffer || packet.data) instanceof ArrayBuffer) {\n        return encodeBuffer({ type: packet.type, data: arrayBufferToBuffer(packet.data) }, supportsBinary, callback);\n    }\n    // Sending data as a utf-8 string\n    var encoded = exports.packets[packet.type];\n    // data fragment is optional\n    if (undefined !== packet.data) {\n        encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\n    }\n    return callback('' + encoded);\n}\nexports.encodePacket = encodePacket;\n;\n/**\n * Encode Buffer data\n */\nfunction encodeBuffer(packet, supportsBinary, callback) {\n    if (!supportsBinary) {\n        return encodeBase64Packet(packet, callback);\n    }\n    var data = packet.data;\n    var typeBuffer = Buffer.allocUnsafe(1);\n    typeBuffer[0] = exports.packets[packet.type];\n    return callback(Buffer.concat([typeBuffer, data]));\n}\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\nfunction encodeBase64Packet(packet, callback) {\n    var data = Buffer.isBuffer(packet.data) ? packet.data : arrayBufferToBuffer(packet.data);\n    var message = 'b' + exports.packets[packet.type];\n    message += data.toString('base64');\n    return callback(message);\n}\nexports.encodeBase64Packet = encodeBase64Packet;\n;\n/**\n * Decodes a packet. Data also available as an ArrayBuffer if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\nfunction decodePacket(data, binaryType, utf8decode) {\n    if (data === undefined) {\n        return err;\n    }\n    var type;\n    // String data\n    if (typeof data === 'string') {\n        type = data.charAt(0);\n        if (type === 'b') {\n            return decodeBase64Packet(data.substr(1), binaryType);\n        }\n        if (utf8decode) {\n            data = tryDecode(data);\n            if (data === false) {\n                return err;\n            }\n        }\n        if (Number(type) != type || !packetslist[type]) {\n            return err;\n        }\n        if (data.length > 1) {\n            return { type: packetslist[type], data: data.substring(1) };\n        }\n        else {\n            return { type: packetslist[type] };\n        }\n    }\n    // Binary data\n    if (binaryType === 'arraybuffer') {\n        // wrap Buffer/ArrayBuffer data into an Uint8Array\n        var intArray = new Uint8Array(data);\n        type = intArray[0];\n        return { type: packetslist[type], data: intArray.buffer.slice(1) };\n    }\n    if (data instanceof ArrayBuffer) {\n        data = arrayBufferToBuffer(data);\n    }\n    type = data[0];\n    return { type: packetslist[type], data: data.slice(1) };\n}\nexports.decodePacket = decodePacket;\n;\nfunction tryDecode(data) {\n    try {\n        data = utf8.decode(data, { strict: false });\n    }\n    catch (e) {\n        return false;\n    }\n    return data;\n}\n/**\n * Decodes a packet encoded in a base64 string.\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\nfunction decodeBase64Packet(msg, binaryType) {\n    var type = packetslist[msg.charAt(0)];\n    var data = Buffer.from(msg.substr(1), 'base64');\n    if (binaryType === 'arraybuffer') {\n        var abv = new Uint8Array(data.length);\n        for (var i = 0; i < abv.length; i++) {\n            abv[i] = data[i];\n        }\n        // @ts-ignore\n        data = abv.buffer;\n    }\n    return { type: type, data: data };\n}\nexports.decodeBase64Packet = decodeBase64Packet;\n;\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\nfunction encodePayload(packets, supportsBinary, callback) {\n    if (typeof supportsBinary === 'function') {\n        callback = supportsBinary;\n        supportsBinary = null;\n    }\n    if (supportsBinary && hasBinary(packets)) {\n        return encodePayloadAsBinary(packets, callback);\n    }\n    if (!packets.length) {\n        return callback('0:');\n    }\n    function encodeOne(packet, doneCallback) {\n        encodePacket(packet, supportsBinary, false, function (message) {\n            doneCallback(null, setLengthHeader(message));\n        });\n    }\n    map(packets, encodeOne, function (err, results) {\n        return callback(results.join(''));\n    });\n}\nexports.encodePayload = encodePayload;\n;\nfunction setLengthHeader(message) {\n    return message.length + ':' + message;\n}\n/**\n * Async array map using after\n */\nfunction map(ary, each, done) {\n    const results = new Array(ary.length);\n    let count = 0;\n    for (let i = 0; i < ary.length; i++) {\n        each(ary[i], (error, msg) => {\n            results[i] = msg;\n            if (++count === ary.length) {\n                done(null, results);\n            }\n        });\n    }\n}\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\nfunction decodePayload(data, binaryType, callback) {\n    if (typeof data !== 'string') {\n        return decodePayloadAsBinary(data, binaryType, callback);\n    }\n    if (typeof binaryType === 'function') {\n        callback = binaryType;\n        binaryType = null;\n    }\n    if (data === '') {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n    }\n    var length = '', n, msg, packet;\n    for (var i = 0, l = data.length; i < l; i++) {\n        var chr = data.charAt(i);\n        if (chr !== ':') {\n            length += chr;\n            continue;\n        }\n        // @ts-ignore\n        if (length === '' || (length != (n = Number(length)))) {\n            // parser error - ignoring payload\n            return callback(err, 0, 1);\n        }\n        msg = data.substr(i + 1, n);\n        if (length != msg.length) {\n            // parser error - ignoring payload\n            return callback(err, 0, 1);\n        }\n        if (msg.length) {\n            packet = decodePacket(msg, binaryType, false);\n            if (err.type === packet.type && err.data === packet.data) {\n                // parser error in individual packet - ignoring payload\n                return callback(err, 0, 1);\n            }\n            var more = callback(packet, i + n, l);\n            if (false === more)\n                return;\n        }\n        // advance cursor\n        i += n;\n        length = '';\n    }\n    if (length !== '') {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n    }\n}\nexports.decodePayload = decodePayload;\n;\n/**\n *\n * Converts a buffer to a utf8.js encoded string\n *\n * @api private\n */\nfunction bufferToString(buffer) {\n    var str = '';\n    for (var i = 0, l = buffer.length; i < l; i++) {\n        str += String.fromCharCode(buffer[i]);\n    }\n    return str;\n}\n/**\n *\n * Converts a utf8.js encoded string to a buffer\n *\n * @api private\n */\nfunction stringToBuffer(string) {\n    var buf = Buffer.allocUnsafe(string.length);\n    for (var i = 0, l = string.length; i < l; i++) {\n        buf.writeUInt8(string.charCodeAt(i), i);\n    }\n    return buf;\n}\n/**\n *\n * Converts an ArrayBuffer to a Buffer\n *\n * @api private\n */\nfunction arrayBufferToBuffer(data) {\n    // data is either an ArrayBuffer or ArrayBufferView.\n    var length = data.byteLength || data.length;\n    var offset = data.byteOffset || 0;\n    return Buffer.from(data.buffer || data, offset, length);\n}\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {Buffer} encoded payload\n * @api private\n */\nfunction encodePayloadAsBinary(packets, callback) {\n    if (!packets.length) {\n        return callback(EMPTY_BUFFER);\n    }\n    map(packets, encodeOneBinaryPacket, function (err, results) {\n        return callback(Buffer.concat(results));\n    });\n}\nexports.encodePayloadAsBinary = encodePayloadAsBinary;\n;\nfunction encodeOneBinaryPacket(p, doneCallback) {\n    function onBinaryPacketEncode(packet) {\n        var encodingLength = '' + packet.length;\n        var sizeBuffer;\n        if (typeof packet === 'string') {\n            sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);\n            sizeBuffer[0] = 0; // is a string (not true binary = 0)\n            for (var i = 0; i < encodingLength.length; i++) {\n                sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\n            }\n            sizeBuffer[sizeBuffer.length - 1] = 255;\n            return doneCallback(null, Buffer.concat([sizeBuffer, stringToBuffer(packet)]));\n        }\n        sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);\n        sizeBuffer[0] = 1; // is binary (true binary = 1)\n        for (var i = 0; i < encodingLength.length; i++) {\n            sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\n        }\n        sizeBuffer[sizeBuffer.length - 1] = 255;\n        doneCallback(null, Buffer.concat([sizeBuffer, packet]));\n    }\n    encodePacket(p, true, true, onBinaryPacketEncode);\n}\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n\n * @param {Buffer} data, callback method\n * @api public\n */\nfunction decodePayloadAsBinary(data, binaryType, callback) {\n    if (typeof binaryType === 'function') {\n        callback = binaryType;\n        binaryType = null;\n    }\n    var bufferTail = data;\n    var buffers = [];\n    var i;\n    while (bufferTail.length > 0) {\n        var strLen = '';\n        var isString = bufferTail[0] === 0;\n        for (i = 1;; i++) {\n            if (bufferTail[i] === 255)\n                break;\n            // 310 = char length of Number.MAX_VALUE\n            if (strLen.length > 310) {\n                return callback(err, 0, 1);\n            }\n            strLen += '' + bufferTail[i];\n        }\n        bufferTail = bufferTail.slice(strLen.length + 1);\n        var msgLength = parseInt(strLen, 10);\n        var msg = bufferTail.slice(1, msgLength + 1);\n        if (isString)\n            msg = bufferToString(msg);\n        buffers.push(msg);\n        bufferTail = bufferTail.slice(msgLength + 1);\n    }\n    var total = buffers.length;\n    for (i = 0; i < total; i++) {\n        var buffer = buffers[i];\n        callback(decodePacket(buffer, binaryType, true), i, total);\n    }\n}\nexports.decodePayloadAsBinary = decodePayloadAsBinary;\n;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}