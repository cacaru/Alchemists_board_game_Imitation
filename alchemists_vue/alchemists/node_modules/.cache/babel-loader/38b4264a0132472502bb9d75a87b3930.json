{"ast":null,"code":"import { Server } from \"socket.io\";\nexport function create_socket_server(nick_name) {\n  console.log(nick_name);\n  const io = new Server(); //* 웹소켓 연결 시 \n\n  io.on('connection', socket => {\n    const req = socket.request; // 웹소켓과는 달리 req객체를 따로 뽑아야함 \n    //* ip 정보 얻기\n\n    const ip = req.headers['x-forwarded-for'];\n    console.log('새로운 클라이언트 접속!', ip, socket.id, req.ip); // socket.id 는 소켓 연결된 고유한 클라이언트 식별자라고 보면된다. 채팅방의 입장한 고유한 사람 \n    //* 연결 종료 시 \n\n    socket.on('disconnect', () => {\n      console.log('클라이언트 접속 해제', ip, socket.id);\n      clearInterval(socket.interval);\n    }); //* 에러 시 \n\n    socket.on('error', error => {\n      console.error(error);\n    }); //* 클라이언트로부터 메시지 \n\n    socket.on('reply', data => {\n      console.log(data);\n    }); //* 클라이언트로 메세지 보내기 \n\n    socket.interval = setInterval(() => {\n      // 3초마다 클라이언트로 메시지 전송 \n      socket.emit('news', 'Hello Socket.IO');\n    }, 3000);\n  });\n  io.listen(3000);\n}","map":{"version":3,"names":["Server","create_socket_server","nick_name","console","log","io","on","socket","req","request","ip","headers","id","clearInterval","interval","error","data","setInterval","emit","listen"],"sources":["E:/web/alchemists_vue/alchemists/src/assets/script/game_server.js"],"sourcesContent":["import { Server } from \"socket.io\";\r\n\r\nexport function create_socket_server(nick_name) {\r\n    console.log(nick_name);\r\n\r\n    const io = new Server();\r\n\r\n    //* 웹소켓 연결 시 \r\n    io.on('connection', (socket) => { \r\n        const req = socket.request; \r\n        // 웹소켓과는 달리 req객체를 따로 뽑아야함 \r\n\r\n        //* ip 정보 얻기\r\n        const ip = req.headers['x-forwarded-for'];\r\n        console.log('새로운 클라이언트 접속!', ip, socket.id, req.ip); \r\n        // socket.id 는 소켓 연결된 고유한 클라이언트 식별자라고 보면된다. 채팅방의 입장한 고유한 사람 \r\n\r\n        //* 연결 종료 시 \r\n        socket.on('disconnect', () => { \r\n            console.log('클라이언트 접속 해제', ip, socket.id); \r\n            clearInterval(socket.interval); \r\n        }); \r\n        //* 에러 시 \r\n        socket.on('error', (error) => { \r\n            console.error(error); \r\n        }); \r\n        //* 클라이언트로부터 메시지 \r\n        socket.on('reply', (data) => { \r\n            console.log(data); \r\n        }); \r\n        //* 클라이언트로 메세지 보내기 \r\n        socket.interval = setInterval(() => { \r\n            // 3초마다 클라이언트로 메시지 전송 \r\n            socket.emit('news', 'Hello Socket.IO'); }, 3000); \r\n    }); \r\n    \r\n    io.listen(3000);\r\n\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AAEA,OAAO,SAASC,oBAAT,CAA8BC,SAA9B,EAAyC;EAC5CC,OAAO,CAACC,GAAR,CAAYF,SAAZ;EAEA,MAAMG,EAAE,GAAG,IAAIL,MAAJ,EAAX,CAH4C,CAK5C;;EACAK,EAAE,CAACC,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;IAC5B,MAAMC,GAAG,GAAGD,MAAM,CAACE,OAAnB,CAD4B,CAE5B;IAEA;;IACA,MAAMC,EAAE,GAAGF,GAAG,CAACG,OAAJ,CAAY,iBAAZ,CAAX;IACAR,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BM,EAA7B,EAAiCH,MAAM,CAACK,EAAxC,EAA4CJ,GAAG,CAACE,EAAhD,EAN4B,CAO5B;IAEA;;IACAH,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,MAAM;MAC1BH,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BM,EAA3B,EAA+BH,MAAM,CAACK,EAAtC;MACAC,aAAa,CAACN,MAAM,CAACO,QAAR,CAAb;IACH,CAHD,EAV4B,CAc5B;;IACAP,MAAM,CAACD,EAAP,CAAU,OAAV,EAAoBS,KAAD,IAAW;MAC1BZ,OAAO,CAACY,KAAR,CAAcA,KAAd;IACH,CAFD,EAf4B,CAkB5B;;IACAR,MAAM,CAACD,EAAP,CAAU,OAAV,EAAoBU,IAAD,IAAU;MACzBb,OAAO,CAACC,GAAR,CAAYY,IAAZ;IACH,CAFD,EAnB4B,CAsB5B;;IACAT,MAAM,CAACO,QAAP,GAAkBG,WAAW,CAAC,MAAM;MAChC;MACAV,MAAM,CAACW,IAAP,CAAY,MAAZ,EAAoB,iBAApB;IAAyC,CAFhB,EAEkB,IAFlB,CAA7B;EAGH,CA1BD;EA4BAb,EAAE,CAACc,MAAH,CAAU,IAAV;AAEH"},"metadata":{},"sourceType":"module"}