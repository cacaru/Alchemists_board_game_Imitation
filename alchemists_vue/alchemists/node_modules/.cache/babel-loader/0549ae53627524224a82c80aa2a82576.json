{"ast":null,"code":"export function create_socket_server(nick_name) {\n  console.log(nick_name);\n\n  const SocketIO = require('vue-3-socket.io');\n\n  module.exports = server => {\n    // 서버 연결, path는 프론트와 일치시켜준다. \n    const io = SocketIO(server, {\n      path: '/game_lobby.vue'\n    }); //* 웹소켓 연결 시 \n\n    io.on('connection', socket => {\n      const req = socket.request; // 웹소켓과는 달리 req객체를 따로 뽑아야함 \n      //* ip 정보 얻기\n\n      const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n      console.log('새로운 클라이언트 접속!', ip, socket.id, req.ip); // socket.id 는 소켓 연결된 고유한 클라이언트 식별자라고 보면된다. 채팅방의 입장한 고유한 사람 \n      //* 연결 종료 시 \n\n      socket.on('disconnect', () => {\n        console.log('클라이언트 접속 해제', ip, socket.id);\n        clearInterval(socket.interval);\n      }); //* 에러 시 \n\n      socket.on('error', error => {\n        console.error(error);\n      }); //* 클라이언트로부터 메시지 \n\n      socket.on('reply', data => {\n        console.log(data);\n      }); //* 클라이언트로 메세지 보내기 \n\n      socket.interval = setInterval(() => {\n        // 3초마다 클라이언트로 메시지 전송 \n        socket.emit('news', 'Hello Socket.IO');\n      }, 3000);\n    });\n  };\n}","map":{"version":3,"names":["create_socket_server","nick_name","console","log","SocketIO","require","module","exports","server","io","path","on","socket","req","request","ip","headers","connection","remoteAddress","id","clearInterval","interval","error","data","setInterval","emit"],"sources":["E:/web/alchemists_vue/alchemists/src/assets/script/game_server.js"],"sourcesContent":["export function create_socket_server(nick_name) {\r\n    console.log(nick_name);\r\n    const SocketIO = require('vue-3-socket.io');\r\n\r\n    module.exports = (server) => { \r\n        // 서버 연결, path는 프론트와 일치시켜준다. \r\n        const io = SocketIO(server, { path: '/game_lobby.vue' }); \r\n    \r\n        //* 웹소켓 연결 시 \r\n        io.on('connection', (socket) => { \r\n            const req = socket.request; \r\n            // 웹소켓과는 달리 req객체를 따로 뽑아야함 \r\n    \r\n            //* ip 정보 얻기\r\n            const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress; \r\n            console.log('새로운 클라이언트 접속!', ip, socket.id, req.ip); \r\n            // socket.id 는 소켓 연결된 고유한 클라이언트 식별자라고 보면된다. 채팅방의 입장한 고유한 사람 \r\n    \r\n            //* 연결 종료 시 \r\n            socket.on('disconnect', () => { \r\n                console.log('클라이언트 접속 해제', ip, socket.id); \r\n                clearInterval(socket.interval); \r\n            }); \r\n            //* 에러 시 \r\n            socket.on('error', (error) => { \r\n                console.error(error); \r\n            }); \r\n            //* 클라이언트로부터 메시지 \r\n            socket.on('reply', (data) => { \r\n                console.log(data); \r\n            }); \r\n            //* 클라이언트로 메세지 보내기 \r\n            socket.interval = setInterval(() => { \r\n                // 3초마다 클라이언트로 메시지 전송 \r\n                socket.emit('news', 'Hello Socket.IO'); }, 3000); \r\n            }); \r\n        };\r\n    \r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,SAA9B,EAAyC;EAC5CC,OAAO,CAACC,GAAR,CAAYF,SAAZ;;EACA,MAAMG,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;EAEAC,MAAM,CAACC,OAAP,GAAkBC,MAAD,IAAY;IACzB;IACA,MAAMC,EAAE,GAAGL,QAAQ,CAACI,MAAD,EAAS;MAAEE,IAAI,EAAE;IAAR,CAAT,CAAnB,CAFyB,CAIzB;;IACAD,EAAE,CAACE,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;MAC5B,MAAMC,GAAG,GAAGD,MAAM,CAACE,OAAnB,CAD4B,CAE5B;MAEA;;MACA,MAAMC,EAAE,GAAGF,GAAG,CAACG,OAAJ,CAAY,iBAAZ,KAAkCH,GAAG,CAACI,UAAJ,CAAeC,aAA5D;MACAhB,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BY,EAA7B,EAAiCH,MAAM,CAACO,EAAxC,EAA4CN,GAAG,CAACE,EAAhD,EAN4B,CAO5B;MAEA;;MACAH,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,MAAM;QAC1BT,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BY,EAA3B,EAA+BH,MAAM,CAACO,EAAtC;QACAC,aAAa,CAACR,MAAM,CAACS,QAAR,CAAb;MACH,CAHD,EAV4B,CAc5B;;MACAT,MAAM,CAACD,EAAP,CAAU,OAAV,EAAoBW,KAAD,IAAW;QAC1BpB,OAAO,CAACoB,KAAR,CAAcA,KAAd;MACH,CAFD,EAf4B,CAkB5B;;MACAV,MAAM,CAACD,EAAP,CAAU,OAAV,EAAoBY,IAAD,IAAU;QACzBrB,OAAO,CAACC,GAAR,CAAYoB,IAAZ;MACH,CAFD,EAnB4B,CAsB5B;;MACAX,MAAM,CAACS,QAAP,GAAkBG,WAAW,CAAC,MAAM;QAChC;QACAZ,MAAM,CAACa,IAAP,CAAY,MAAZ,EAAoB,iBAApB;MAAyC,CAFhB,EAEkB,IAFlB,CAA7B;IAGC,CA1BL;EA2BC,CAhCL;AAkCH"},"metadata":{},"sourceType":"module"}