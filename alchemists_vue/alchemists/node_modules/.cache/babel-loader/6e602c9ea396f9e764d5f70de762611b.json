{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport process from 'node:process';\nimport { promisify, inspect } from 'node:util';\nimport { URL, URLSearchParams } from 'node:url';\nimport { checkServerIdentity } from 'node:tls'; // DO NOT use destructuring for `https.request` and `http.request` as it's not compatible with `nock`.\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport is, { assert } from '@sindresorhus/is';\nimport lowercaseKeys from 'lowercase-keys';\nimport CacheableLookup from 'cacheable-lookup';\nimport http2wrapper from 'http2-wrapper';\nimport { isFormDataLike } from 'form-data-encoder';\nimport parseLinkHeader from './parse-link-header.js';\nconst [major, minor] = process.versions.node.split('.').map(v => Number(v));\n\nfunction validateSearchParameters(searchParameters) {\n  // eslint-disable-next-line guard-for-in\n  for (const key in searchParameters) {\n    const value = searchParameters[key];\n    assert.any([is.string, is.number, is.boolean, is.null_, is.undefined], value);\n  }\n}\n\nconst globalCache = new Map();\nlet globalDnsCache;\n\nconst getGlobalDnsCache = () => {\n  if (globalDnsCache) {\n    return globalDnsCache;\n  }\n\n  globalDnsCache = new CacheableLookup();\n  return globalDnsCache;\n};\n\nconst defaultInternals = {\n  request: undefined,\n  agent: {\n    http: undefined,\n    https: undefined,\n    http2: undefined\n  },\n  h2session: undefined,\n  decompress: true,\n  timeout: {\n    connect: undefined,\n    lookup: undefined,\n    read: undefined,\n    request: undefined,\n    response: undefined,\n    secureConnect: undefined,\n    send: undefined,\n    socket: undefined\n  },\n  prefixUrl: '',\n  body: undefined,\n  form: undefined,\n  json: undefined,\n  cookieJar: undefined,\n  ignoreInvalidCookies: false,\n  searchParams: undefined,\n  dnsLookup: undefined,\n  dnsCache: undefined,\n  context: {},\n  hooks: {\n    init: [],\n    beforeRequest: [],\n    beforeError: [],\n    beforeRedirect: [],\n    beforeRetry: [],\n    afterResponse: []\n  },\n  followRedirect: true,\n  maxRedirects: 10,\n  cache: undefined,\n  throwHttpErrors: true,\n  username: '',\n  password: '',\n  http2: false,\n  allowGetBody: false,\n  headers: {\n    'user-agent': 'got (https://github.com/sindresorhus/got)'\n  },\n  methodRewriting: false,\n  dnsLookupIpVersion: undefined,\n  parseJson: JSON.parse,\n  stringifyJson: JSON.stringify,\n  retry: {\n    limit: 2,\n    methods: ['GET', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE'],\n    statusCodes: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],\n    errorCodes: ['ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND', 'ENETUNREACH', 'EAI_AGAIN'],\n    maxRetryAfter: undefined,\n    calculateDelay: ({\n      computedValue\n    }) => computedValue,\n    backoffLimit: Number.POSITIVE_INFINITY,\n    noise: 100\n  },\n  localAddress: undefined,\n  method: 'GET',\n  createConnection: undefined,\n  cacheOptions: {\n    shared: undefined,\n    cacheHeuristic: undefined,\n    immutableMinTimeToLive: undefined,\n    ignoreCargoCult: undefined\n  },\n  https: {\n    alpnProtocols: undefined,\n    rejectUnauthorized: undefined,\n    checkServerIdentity: undefined,\n    certificateAuthority: undefined,\n    key: undefined,\n    certificate: undefined,\n    passphrase: undefined,\n    pfx: undefined,\n    ciphers: undefined,\n    honorCipherOrder: undefined,\n    minVersion: undefined,\n    maxVersion: undefined,\n    signatureAlgorithms: undefined,\n    tlsSessionLifetime: undefined,\n    dhparam: undefined,\n    ecdhCurve: undefined,\n    certificateRevocationLists: undefined\n  },\n  encoding: undefined,\n  resolveBodyOnly: false,\n  isStream: false,\n  responseType: 'text',\n  url: undefined,\n  pagination: {\n    transform(response) {\n      if (response.request.options.responseType === 'json') {\n        return response.body;\n      }\n\n      return JSON.parse(response.body);\n    },\n\n    paginate({\n      response\n    }) {\n      const rawLinkHeader = response.headers.link;\n\n      if (typeof rawLinkHeader !== 'string' || rawLinkHeader.trim() === '') {\n        return false;\n      }\n\n      const parsed = parseLinkHeader(rawLinkHeader);\n      const next = parsed.find(entry => entry.parameters.rel === 'next' || entry.parameters.rel === '\"next\"');\n\n      if (next) {\n        return {\n          url: new URL(next.reference, response.url)\n        };\n      }\n\n      return false;\n    },\n\n    filter: () => true,\n    shouldContinue: () => true,\n    countLimit: Number.POSITIVE_INFINITY,\n    backoff: 0,\n    requestLimit: 10000,\n    stackAllItems: false\n  },\n  setHost: true,\n  maxHeaderSize: undefined\n};\n\nconst cloneInternals = internals => {\n  const {\n    hooks,\n    retry\n  } = internals;\n  const result = { ...internals,\n    context: { ...internals.context\n    },\n    cacheOptions: { ...internals.cacheOptions\n    },\n    https: { ...internals.https\n    },\n    agent: { ...internals.agent\n    },\n    headers: { ...internals.headers\n    },\n    retry: { ...retry,\n      errorCodes: [...retry.errorCodes],\n      methods: [...retry.methods],\n      statusCodes: [...retry.statusCodes]\n    },\n    timeout: { ...internals.timeout\n    },\n    hooks: {\n      init: [...hooks.init],\n      beforeRequest: [...hooks.beforeRequest],\n      beforeError: [...hooks.beforeError],\n      beforeRedirect: [...hooks.beforeRedirect],\n      beforeRetry: [...hooks.beforeRetry],\n      afterResponse: [...hooks.afterResponse]\n    },\n    searchParams: internals.searchParams ? new URLSearchParams(internals.searchParams) : undefined,\n    pagination: { ...internals.pagination\n    }\n  };\n\n  if (result.url !== undefined) {\n    result.prefixUrl = '';\n  }\n\n  return result;\n};\n\nconst cloneRaw = raw => {\n  const {\n    hooks,\n    retry\n  } = raw;\n  const result = { ...raw\n  };\n\n  if (is.object(raw.context)) {\n    result.context = { ...raw.context\n    };\n  }\n\n  if (is.object(raw.cacheOptions)) {\n    result.cacheOptions = { ...raw.cacheOptions\n    };\n  }\n\n  if (is.object(raw.https)) {\n    result.https = { ...raw.https\n    };\n  }\n\n  if (is.object(raw.cacheOptions)) {\n    result.cacheOptions = { ...result.cacheOptions\n    };\n  }\n\n  if (is.object(raw.agent)) {\n    result.agent = { ...raw.agent\n    };\n  }\n\n  if (is.object(raw.headers)) {\n    result.headers = { ...raw.headers\n    };\n  }\n\n  if (is.object(retry)) {\n    result.retry = { ...retry\n    };\n\n    if (is.array(retry.errorCodes)) {\n      result.retry.errorCodes = [...retry.errorCodes];\n    }\n\n    if (is.array(retry.methods)) {\n      result.retry.methods = [...retry.methods];\n    }\n\n    if (is.array(retry.statusCodes)) {\n      result.retry.statusCodes = [...retry.statusCodes];\n    }\n  }\n\n  if (is.object(raw.timeout)) {\n    result.timeout = { ...raw.timeout\n    };\n  }\n\n  if (is.object(hooks)) {\n    result.hooks = { ...hooks\n    };\n\n    if (is.array(hooks.init)) {\n      result.hooks.init = [...hooks.init];\n    }\n\n    if (is.array(hooks.beforeRequest)) {\n      result.hooks.beforeRequest = [...hooks.beforeRequest];\n    }\n\n    if (is.array(hooks.beforeError)) {\n      result.hooks.beforeError = [...hooks.beforeError];\n    }\n\n    if (is.array(hooks.beforeRedirect)) {\n      result.hooks.beforeRedirect = [...hooks.beforeRedirect];\n    }\n\n    if (is.array(hooks.beforeRetry)) {\n      result.hooks.beforeRetry = [...hooks.beforeRetry];\n    }\n\n    if (is.array(hooks.afterResponse)) {\n      result.hooks.afterResponse = [...hooks.afterResponse];\n    }\n  } // TODO: raw.searchParams\n\n\n  if (is.object(raw.pagination)) {\n    result.pagination = { ...raw.pagination\n    };\n  }\n\n  return result;\n};\n\nconst getHttp2TimeoutOption = internals => {\n  const delays = [internals.timeout.socket, internals.timeout.connect, internals.timeout.lookup, internals.timeout.request, internals.timeout.secureConnect].filter(delay => typeof delay === 'number');\n\n  if (delays.length > 0) {\n    return Math.min(...delays);\n  }\n\n  return undefined;\n};\n\nconst init = (options, withOptions, self) => {\n  const initHooks = options.hooks?.init;\n\n  if (initHooks) {\n    for (const hook of initHooks) {\n      hook(withOptions, self);\n    }\n  }\n};\n\nexport default class Options {\n  constructor(input, options, defaults) {\n    Object.defineProperty(this, \"_unixOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_internals\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_merging\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_init\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    assert.any([is.string, is.urlInstance, is.object, is.undefined], input);\n    assert.any([is.object, is.undefined], options);\n    assert.any([is.object, is.undefined], defaults);\n\n    if (input instanceof Options || options instanceof Options) {\n      throw new TypeError('The defaults must be passed as the third argument');\n    }\n\n    this._internals = cloneInternals(defaults?._internals ?? defaults ?? defaultInternals);\n    this._init = [...(defaults?._init ?? [])];\n    this._merging = false;\n    this._unixOptions = undefined; // This rule allows `finally` to be considered more important.\n    // Meaning no matter the error thrown in the `try` block,\n    // if `finally` throws then the `finally` error will be thrown.\n    //\n    // Yes, we want this. If we set `url` first, then the `url.searchParams`\n    // would get merged. Instead we set the `searchParams` first, then\n    // `url.searchParams` is overwritten as expected.\n    //\n\n    /* eslint-disable no-unsafe-finally */\n\n    try {\n      if (is.plainObject(input)) {\n        try {\n          this.merge(input);\n          this.merge(options);\n        } finally {\n          this.url = input.url;\n        }\n      } else {\n        try {\n          this.merge(options);\n        } finally {\n          if (options?.url !== undefined) {\n            if (input === undefined) {\n              this.url = options.url;\n            } else {\n              throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n            }\n          } else if (input !== undefined) {\n            this.url = input;\n          }\n        }\n      }\n    } catch (error) {\n      error.options = this;\n      throw error;\n    }\n    /* eslint-enable no-unsafe-finally */\n\n  }\n\n  merge(options) {\n    if (!options) {\n      return;\n    }\n\n    if (options instanceof Options) {\n      for (const init of options._init) {\n        this.merge(init);\n      }\n\n      return;\n    }\n\n    options = cloneRaw(options);\n    init(this, options, this);\n    init(options, options, this);\n    this._merging = true; // Always merge `isStream` first\n\n    if ('isStream' in options) {\n      this.isStream = options.isStream;\n    }\n\n    try {\n      let push = false;\n\n      for (const key in options) {\n        // `got.extend()` options\n        if (key === 'mutableDefaults' || key === 'handlers') {\n          continue;\n        } // Never merge `url`\n\n\n        if (key === 'url') {\n          continue;\n        }\n\n        if (!(key in this)) {\n          throw new Error(`Unexpected option: ${key}`);\n        } // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n\n\n        this[key] = options[key];\n        push = true;\n      }\n\n      if (push) {\n        this._init.push(options);\n      }\n    } finally {\n      this._merging = false;\n    }\n  }\n  /**\n  Custom request function.\n  The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n   @default http.request | https.request\n  */\n\n\n  get request() {\n    return this._internals.request;\n  }\n\n  set request(value) {\n    assert.any([is.function_, is.undefined], value);\n    this._internals.request = value;\n  }\n  /**\n  An object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance.\n  This is necessary because a request to one protocol might redirect to another.\n  In such a scenario, Got will switch over to the right protocol agent for you.\n   If a key is not present, it will default to a global agent.\n   @example\n  ```\n  import got from 'got';\n  import HttpAgent from 'agentkeepalive';\n   const {HttpsAgent} = HttpAgent;\n   await got('https://sindresorhus.com', {\n      agent: {\n          http: new HttpAgent(),\n          https: new HttpsAgent()\n      }\n  });\n  ```\n  */\n\n\n  get agent() {\n    return this._internals.agent;\n  }\n\n  set agent(value) {\n    assert.plainObject(value); // eslint-disable-next-line guard-for-in\n\n    for (const key in value) {\n      if (!(key in this._internals.agent)) {\n        throw new TypeError(`Unexpected agent option: ${key}`);\n      }\n\n      assert.any([is.object, is.undefined], value[key]);\n    }\n\n    if (this._merging) {\n      Object.assign(this._internals.agent, value);\n    } else {\n      this._internals.agent = { ...value\n      };\n    }\n  }\n\n  get h2session() {\n    return this._internals.h2session;\n  }\n\n  set h2session(value) {\n    this._internals.h2session = value;\n  }\n  /**\n  Decompress the response automatically.\n   This will set the `accept-encoding` header to `gzip, deflate, br` unless you set it yourself.\n   If this is disabled, a compressed response is returned as a `Buffer`.\n  This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n   @default true\n  */\n\n\n  get decompress() {\n    return this._internals.decompress;\n  }\n\n  set decompress(value) {\n    assert.boolean(value);\n    this._internals.decompress = value;\n  }\n  /**\n  Milliseconds to wait for the server to end the response before aborting the request with `got.TimeoutError` error (a.k.a. `request` property).\n  By default, there's no timeout.\n   This also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n   - `lookup` starts when a socket is assigned and ends when the hostname has been resolved.\n      Does not apply when using a Unix domain socket.\n  - `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n  - `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n  - `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n  - `response` starts when the request has been written to the socket and ends when the response headers are received.\n  - `send` starts when the socket is connected and ends with the request has been written to the socket.\n  - `request` starts when the request is initiated and ends when the response's end event fires.\n  */\n\n\n  get timeout() {\n    // We always return `Delays` here.\n    // It has to be `Delays | number`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n    return this._internals.timeout;\n  }\n\n  set timeout(value) {\n    assert.plainObject(value); // eslint-disable-next-line guard-for-in\n\n    for (const key in value) {\n      if (!(key in this._internals.timeout)) {\n        throw new Error(`Unexpected timeout option: ${key}`);\n      }\n\n      assert.any([is.number, is.undefined], value[key]);\n    }\n\n    if (this._merging) {\n      Object.assign(this._internals.timeout, value);\n    } else {\n      this._internals.timeout = { ...value\n      };\n    }\n  }\n  /**\n  When specified, `prefixUrl` will be prepended to `url`.\n  The prefix can be any valid URL, either relative or absolute.\n  A trailing slash `/` is optional - one will be added automatically.\n   __Note__: `prefixUrl` will be ignored if the `url` argument is a URL instance.\n   __Note__: Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion.\n  For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`.\n  The latter is used by browsers.\n   __Tip__: Useful when used with `got.extend()` to create niche-specific Got instances.\n   __Tip__: You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`.\n  If the URL doesn't include it anymore, it will throw.\n   @example\n  ```\n  import got from 'got';\n   await got('unicorn', {prefixUrl: 'https://cats.com'});\n  //=> 'https://cats.com/unicorn'\n   const instance = got.extend({\n      prefixUrl: 'https://google.com'\n  });\n   await instance('unicorn', {\n      hooks: {\n          beforeRequest: [\n              options => {\n                  options.prefixUrl = 'https://cats.com';\n              }\n          ]\n      }\n  });\n  //=> 'https://cats.com/unicorn'\n  ```\n  */\n\n\n  get prefixUrl() {\n    // We always return `string` here.\n    // It has to be `string | URL`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n    return this._internals.prefixUrl;\n  }\n\n  set prefixUrl(value) {\n    assert.any([is.string, is.urlInstance], value);\n\n    if (value === '') {\n      this._internals.prefixUrl = '';\n      return;\n    }\n\n    value = value.toString();\n\n    if (!value.endsWith('/')) {\n      value += '/';\n    }\n\n    if (this._internals.prefixUrl && this._internals.url) {\n      const {\n        href\n      } = this._internals.url;\n      this._internals.url.href = value + href.slice(this._internals.prefixUrl.length);\n    }\n\n    this._internals.prefixUrl = value;\n  }\n  /**\n  __Note #1__: The `body` option cannot be used with the `json` or `form` option.\n   __Note #2__: If you provide this option, `got.stream()` will be read-only.\n   __Note #3__: If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n   __Note #4__: This option is not enumerable and will not be merged with the instance defaults.\n   The `content-length` header will be automatically set if `body` is a `string` / `Buffer` / [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n   Since Got 12, the `content-length` is not automatically set when `body` is a `fs.createReadStream`.\n  */\n\n\n  get body() {\n    return this._internals.body;\n  }\n\n  set body(value) {\n    assert.any([is.string, is.buffer, is.nodeStream, is.generator, is.asyncGenerator, isFormDataLike, is.undefined], value);\n\n    if (is.nodeStream(value)) {\n      assert.truthy(value.readable);\n    }\n\n    if (value !== undefined) {\n      assert.undefined(this._internals.form);\n      assert.undefined(this._internals.json);\n    }\n\n    this._internals.body = value;\n  }\n  /**\n  The form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n   If the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n   __Note #1__: If you provide this option, `got.stream()` will be read-only.\n   __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n  */\n\n\n  get form() {\n    return this._internals.form;\n  }\n\n  set form(value) {\n    assert.any([is.plainObject, is.undefined], value);\n\n    if (value !== undefined) {\n      assert.undefined(this._internals.body);\n      assert.undefined(this._internals.json);\n    }\n\n    this._internals.form = value;\n  }\n  /**\n  JSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n   __Note #1__: If you provide this option, `got.stream()` will be read-only.\n   __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n  */\n\n\n  get json() {\n    return this._internals.json;\n  }\n\n  set json(value) {\n    if (value !== undefined) {\n      assert.undefined(this._internals.body);\n      assert.undefined(this._internals.form);\n    }\n\n    this._internals.json = value;\n  }\n  /**\n  The URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n   Properties from `options` will override properties in the parsed `url`.\n   If no protocol is specified, it will throw a `TypeError`.\n   __Note__: The query string is **not** parsed as search params.\n   @example\n  ```\n  await got('https://example.com/?query=a b'); //=> https://example.com/?query=a%20b\n  await got('https://example.com/', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n   // The query string is overridden by `searchParams`\n  await got('https://example.com/?query=a b', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n  ```\n  */\n\n\n  get url() {\n    return this._internals.url;\n  }\n\n  set url(value) {\n    assert.any([is.string, is.urlInstance, is.undefined], value);\n\n    if (value === undefined) {\n      this._internals.url = undefined;\n      return;\n    }\n\n    if (is.string(value) && value.startsWith('/')) {\n      throw new Error('`url` must not start with a slash');\n    }\n\n    const urlString = `${this.prefixUrl}${value.toString()}`;\n    const url = new URL(urlString);\n    this._internals.url = url;\n    decodeURI(urlString);\n\n    if (url.protocol === 'unix:') {\n      url.href = `http://unix${url.pathname}${url.search}`;\n    }\n\n    if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n      const error = new Error(`Unsupported protocol: ${url.protocol}`);\n      error.code = 'ERR_UNSUPPORTED_PROTOCOL';\n      throw error;\n    }\n\n    if (this._internals.username) {\n      url.username = this._internals.username;\n      this._internals.username = '';\n    }\n\n    if (this._internals.password) {\n      url.password = this._internals.password;\n      this._internals.password = '';\n    }\n\n    if (this._internals.searchParams) {\n      url.search = this._internals.searchParams.toString();\n      this._internals.searchParams = undefined;\n    }\n\n    if (url.hostname === 'unix') {\n      const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n\n      if (matches?.groups) {\n        const {\n          socketPath,\n          path\n        } = matches.groups;\n        this._unixOptions = {\n          socketPath,\n          path,\n          host: ''\n        };\n      } else {\n        this._unixOptions = undefined;\n      }\n\n      return;\n    }\n\n    this._unixOptions = undefined;\n  }\n  /**\n  Cookie support. You don't have to care about parsing or how to store them.\n   __Note__: If you provide this option, `options.headers.cookie` will be overridden.\n  */\n\n\n  get cookieJar() {\n    return this._internals.cookieJar;\n  }\n\n  set cookieJar(value) {\n    assert.any([is.object, is.undefined], value);\n\n    if (value === undefined) {\n      this._internals.cookieJar = undefined;\n      return;\n    }\n\n    let {\n      setCookie,\n      getCookieString\n    } = value;\n    assert.function_(setCookie);\n    assert.function_(getCookieString);\n    /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n\n    if (setCookie.length === 4 && getCookieString.length === 0) {\n      setCookie = promisify(setCookie.bind(value));\n      getCookieString = promisify(getCookieString.bind(value));\n      this._internals.cookieJar = {\n        setCookie,\n        getCookieString: getCookieString\n      };\n    } else {\n      this._internals.cookieJar = value;\n    }\n  }\n  /**\n  Ignore invalid cookies instead of throwing an error.\n  Only useful when the `cookieJar` option has been set. Not recommended.\n   @default false\n  */\n\n\n  get ignoreInvalidCookies() {\n    return this._internals.ignoreInvalidCookies;\n  }\n\n  set ignoreInvalidCookies(value) {\n    assert.boolean(value);\n    this._internals.ignoreInvalidCookies = value;\n  }\n  /**\n  Query string that will be added to the request URL.\n  This will override the query string in `url`.\n   If you need to pass in an array, you can do it using a `URLSearchParams` instance.\n   @example\n  ```\n  import got from 'got';\n   const searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n   await got('https://example.com', {searchParams});\n   console.log(searchParams.toString());\n  //=> 'key=a&key=b'\n  ```\n  */\n\n\n  get searchParams() {\n    if (this._internals.url) {\n      return this._internals.url.searchParams;\n    }\n\n    if (this._internals.searchParams === undefined) {\n      this._internals.searchParams = new URLSearchParams();\n    }\n\n    return this._internals.searchParams;\n  }\n\n  set searchParams(value) {\n    assert.any([is.string, is.object, is.undefined], value);\n    const url = this._internals.url;\n\n    if (value === undefined) {\n      this._internals.searchParams = undefined;\n\n      if (url) {\n        url.search = '';\n      }\n\n      return;\n    }\n\n    const searchParameters = this.searchParams;\n    let updated;\n\n    if (is.string(value)) {\n      updated = new URLSearchParams(value);\n    } else if (value instanceof URLSearchParams) {\n      updated = value;\n    } else {\n      validateSearchParameters(value);\n      updated = new URLSearchParams(); // eslint-disable-next-line guard-for-in\n\n      for (const key in value) {\n        const entry = value[key];\n\n        if (entry === null) {\n          updated.append(key, '');\n        } else if (entry === undefined) {\n          searchParameters.delete(key);\n        } else {\n          updated.append(key, entry);\n        }\n      }\n    }\n\n    if (this._merging) {\n      // These keys will be replaced\n      for (const key of updated.keys()) {\n        searchParameters.delete(key);\n      }\n\n      for (const [key, value] of updated) {\n        searchParameters.append(key, value);\n      }\n    } else if (url) {\n      url.search = searchParameters.toString();\n    } else {\n      this._internals.searchParams = searchParameters;\n    }\n  }\n\n  get searchParameters() {\n    throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n  }\n\n  set searchParameters(_value) {\n    throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n  }\n\n  get dnsLookup() {\n    return this._internals.dnsLookup;\n  }\n\n  set dnsLookup(value) {\n    assert.any([is.function_, is.undefined], value);\n    this._internals.dnsLookup = value;\n  }\n  /**\n  An instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n  Useful when making lots of requests to different *public* hostnames.\n   `CacheableLookup` uses `dns.resolver4(..)` and `dns.resolver6(...)` under the hood and fall backs to `dns.lookup(...)` when the first two fail, which may lead to additional delay.\n   __Note__: This should stay disabled when making requests to internal hostnames such as `localhost`, `database.local` etc.\n   @default false\n  */\n\n\n  get dnsCache() {\n    return this._internals.dnsCache;\n  }\n\n  set dnsCache(value) {\n    assert.any([is.object, is.boolean, is.undefined], value);\n\n    if (value === true) {\n      this._internals.dnsCache = getGlobalDnsCache();\n    } else if (value === false) {\n      this._internals.dnsCache = undefined;\n    } else {\n      this._internals.dnsCache = value;\n    }\n  }\n  /**\n  User data. `context` is shallow merged and enumerable. If it contains non-enumerable properties they will NOT be merged.\n   @example\n  ```\n  import got from 'got';\n   const instance = got.extend({\n      hooks: {\n          beforeRequest: [\n              options => {\n                  if (!options.context || !options.context.token) {\n                      throw new Error('Token required');\n                  }\n                   options.headers.token = options.context.token;\n              }\n          ]\n      }\n  });\n   const context = {\n      token: 'secret'\n  };\n   const response = await instance('https://httpbin.org/headers', {context});\n   // Let's see the headers\n  console.log(response.body);\n  ```\n  */\n\n\n  get context() {\n    return this._internals.context;\n  }\n\n  set context(value) {\n    assert.object(value);\n\n    if (this._merging) {\n      Object.assign(this._internals.context, value);\n    } else {\n      this._internals.context = { ...value\n      };\n    }\n  }\n  /**\n  Hooks allow modifications during the request lifecycle.\n  Hook functions may be async and are run serially.\n  */\n\n\n  get hooks() {\n    return this._internals.hooks;\n  }\n\n  set hooks(value) {\n    assert.object(value); // eslint-disable-next-line guard-for-in\n\n    for (const knownHookEvent in value) {\n      if (!(knownHookEvent in this._internals.hooks)) {\n        throw new Error(`Unexpected hook event: ${knownHookEvent}`);\n      }\n\n      const typedKnownHookEvent = knownHookEvent;\n      const typedValue = value;\n      const hooks = typedValue[typedKnownHookEvent];\n      assert.any([is.array, is.undefined], hooks);\n\n      if (hooks) {\n        for (const hook of hooks) {\n          assert.function_(hook);\n        }\n      }\n\n      if (this._merging) {\n        if (hooks) {\n          // @ts-expect-error FIXME\n          this._internals.hooks[typedKnownHookEvent].push(...hooks);\n        }\n      } else {\n        if (!hooks) {\n          throw new Error(`Missing hook event: ${knownHookEvent}`);\n        } // @ts-expect-error FIXME\n\n\n        this._internals.hooks[knownHookEvent] = [...hooks];\n      }\n    }\n  }\n  /**\n  Defines if redirect responses should be followed automatically.\n   Note that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`.\n  This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n   @default true\n  */\n\n\n  get followRedirect() {\n    return this._internals.followRedirect;\n  }\n\n  set followRedirect(value) {\n    assert.boolean(value);\n    this._internals.followRedirect = value;\n  }\n\n  get followRedirects() {\n    throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n  }\n\n  set followRedirects(_value) {\n    throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n  }\n  /**\n  If exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n   @default 10\n  */\n\n\n  get maxRedirects() {\n    return this._internals.maxRedirects;\n  }\n\n  set maxRedirects(value) {\n    assert.number(value);\n    this._internals.maxRedirects = value;\n  }\n  /**\n  A cache adapter instance for storing cached response data.\n   @default false\n  */\n\n\n  get cache() {\n    return this._internals.cache;\n  }\n\n  set cache(value) {\n    assert.any([is.object, is.string, is.boolean, is.undefined], value);\n\n    if (value === true) {\n      this._internals.cache = globalCache;\n    } else if (value === false) {\n      this._internals.cache = undefined;\n    } else {\n      this._internals.cache = value;\n    }\n  }\n  /**\n  Determines if a `got.HTTPError` is thrown for unsuccessful responses.\n   If this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing.\n  This may be useful if you are checking for resource availability and are expecting error responses.\n   @default true\n  */\n\n\n  get throwHttpErrors() {\n    return this._internals.throwHttpErrors;\n  }\n\n  set throwHttpErrors(value) {\n    assert.boolean(value);\n    this._internals.throwHttpErrors = value;\n  }\n\n  get username() {\n    const url = this._internals.url;\n    const value = url ? url.username : this._internals.username;\n    return decodeURIComponent(value);\n  }\n\n  set username(value) {\n    assert.string(value);\n    const url = this._internals.url;\n    const fixedValue = encodeURIComponent(value);\n\n    if (url) {\n      url.username = fixedValue;\n    } else {\n      this._internals.username = fixedValue;\n    }\n  }\n\n  get password() {\n    const url = this._internals.url;\n    const value = url ? url.password : this._internals.password;\n    return decodeURIComponent(value);\n  }\n\n  set password(value) {\n    assert.string(value);\n    const url = this._internals.url;\n    const fixedValue = encodeURIComponent(value);\n\n    if (url) {\n      url.password = fixedValue;\n    } else {\n      this._internals.password = fixedValue;\n    }\n  }\n  /**\n  If set to `true`, Got will additionally accept HTTP2 requests.\n   It will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n   __Note__: This option requires Node.js 15.10.0 or newer as HTTP/2 support on older Node.js versions is very buggy.\n   __Note__: Overriding `options.request` will disable HTTP2 support.\n   @default false\n   @example\n  ```\n  import got from 'got';\n   const {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n   console.log(headers.via);\n  //=> '2 nghttpx'\n  ```\n  */\n\n\n  get http2() {\n    return this._internals.http2;\n  }\n\n  set http2(value) {\n    assert.boolean(value);\n    this._internals.http2 = value;\n  }\n  /**\n  Set this to `true` to allow sending body for the `GET` method.\n  However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect.\n  This option is only meant to interact with non-compliant servers when you have no other choice.\n   __Note__: The [RFC 7321](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore __it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)__.\n   @default false\n  */\n\n\n  get allowGetBody() {\n    return this._internals.allowGetBody;\n  }\n\n  set allowGetBody(value) {\n    assert.boolean(value);\n    this._internals.allowGetBody = value;\n  }\n  /**\n  Request headers.\n   Existing headers will be overwritten. Headers set to `undefined` will be omitted.\n   @default {}\n  */\n\n\n  get headers() {\n    return this._internals.headers;\n  }\n\n  set headers(value) {\n    assert.plainObject(value);\n\n    if (this._merging) {\n      Object.assign(this._internals.headers, lowercaseKeys(value));\n    } else {\n      this._internals.headers = lowercaseKeys(value);\n    }\n  }\n  /**\n  Specifies if the redirects should be [rewritten as `GET`](https://tools.ietf.org/html/rfc7231#section-6.4).\n   If `false`, when sending a POST request and receiving a `302`, it will resend the body to the new location using the same HTTP method (`POST` in this case).\n   @default false\n  */\n\n\n  get methodRewriting() {\n    return this._internals.methodRewriting;\n  }\n\n  set methodRewriting(value) {\n    assert.boolean(value);\n    this._internals.methodRewriting = value;\n  }\n  /**\n  Indicates which DNS record family to use.\n   Values:\n  - `undefined`: IPv4 (if present) or IPv6\n  - `4`: Only IPv4\n  - `6`: Only IPv6\n   @default undefined\n  */\n\n\n  get dnsLookupIpVersion() {\n    return this._internals.dnsLookupIpVersion;\n  }\n\n  set dnsLookupIpVersion(value) {\n    if (value !== undefined && value !== 4 && value !== 6) {\n      throw new TypeError(`Invalid DNS lookup IP version: ${value}`);\n    }\n\n    this._internals.dnsLookupIpVersion = value;\n  }\n  /**\n  A function used to parse JSON responses.\n   @example\n  ```\n  import got from 'got';\n  import Bourne from '@hapi/bourne';\n   const parsed = await got('https://example.com', {\n      parseJson: text => Bourne.parse(text)\n  }).json();\n   console.log(parsed);\n  ```\n  */\n\n\n  get parseJson() {\n    return this._internals.parseJson;\n  }\n\n  set parseJson(value) {\n    assert.function_(value);\n    this._internals.parseJson = value;\n  }\n  /**\n  A function used to stringify the body of JSON requests.\n   @example\n  ```\n  import got from 'got';\n   await got.post('https://example.com', {\n      stringifyJson: object => JSON.stringify(object, (key, value) => {\n          if (key.startsWith('_')) {\n              return;\n          }\n           return value;\n      }),\n      json: {\n          some: 'payload',\n          _ignoreMe: 1234\n      }\n  });\n  ```\n   @example\n  ```\n  import got from 'got';\n   await got.post('https://example.com', {\n      stringifyJson: object => JSON.stringify(object, (key, value) => {\n          if (typeof value === 'number') {\n              return value.toString();\n          }\n           return value;\n      }),\n      json: {\n          some: 'payload',\n          number: 1\n      }\n  });\n  ```\n  */\n\n\n  get stringifyJson() {\n    return this._internals.stringifyJson;\n  }\n\n  set stringifyJson(value) {\n    assert.function_(value);\n    this._internals.stringifyJson = value;\n  }\n  /**\n  An object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n   Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n   The `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value.\n  The function must return a delay in milliseconds (or a Promise resolving with it) (`0` return value cancels retry).\n   By default, it retries *only* on the specified methods, status codes, and on these network errors:\n   - `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n  - `ECONNRESET`: Connection was forcibly closed by a peer.\n  - `EADDRINUSE`: Could not bind to any free port.\n  - `ECONNREFUSED`: Connection was refused by the server.\n  - `EPIPE`: The remote side of the stream being written has been closed.\n  - `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n  - `ENETUNREACH`: No internet connection.\n  - `EAI_AGAIN`: DNS lookup timed out.\n   __Note__: If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\n  __Note__: If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n  */\n\n\n  get retry() {\n    return this._internals.retry;\n  }\n\n  set retry(value) {\n    assert.plainObject(value);\n    assert.any([is.function_, is.undefined], value.calculateDelay);\n    assert.any([is.number, is.undefined], value.maxRetryAfter);\n    assert.any([is.number, is.undefined], value.limit);\n    assert.any([is.array, is.undefined], value.methods);\n    assert.any([is.array, is.undefined], value.statusCodes);\n    assert.any([is.array, is.undefined], value.errorCodes);\n    assert.any([is.number, is.undefined], value.noise);\n\n    if (value.noise && Math.abs(value.noise) > 100) {\n      throw new Error(`The maximum acceptable retry noise is +/- 100ms, got ${value.noise}`);\n    }\n\n    for (const key in value) {\n      if (!(key in this._internals.retry)) {\n        throw new Error(`Unexpected retry option: ${key}`);\n      }\n    }\n\n    if (this._merging) {\n      Object.assign(this._internals.retry, value);\n    } else {\n      this._internals.retry = { ...value\n      };\n    }\n\n    const {\n      retry\n    } = this._internals;\n    retry.methods = [...new Set(retry.methods.map(method => method.toUpperCase()))];\n    retry.statusCodes = [...new Set(retry.statusCodes)];\n    retry.errorCodes = [...new Set(retry.errorCodes)];\n  }\n  /**\n  From `http.RequestOptions`.\n   The IP address used to send the request from.\n  */\n\n\n  get localAddress() {\n    return this._internals.localAddress;\n  }\n\n  set localAddress(value) {\n    assert.any([is.string, is.undefined], value);\n    this._internals.localAddress = value;\n  }\n  /**\n  The HTTP method used to make the request.\n   @default 'GET'\n  */\n\n\n  get method() {\n    return this._internals.method;\n  }\n\n  set method(value) {\n    assert.string(value);\n    this._internals.method = value.toUpperCase();\n  }\n\n  get createConnection() {\n    return this._internals.createConnection;\n  }\n\n  set createConnection(value) {\n    assert.any([is.function_, is.undefined], value);\n    this._internals.createConnection = value;\n  }\n  /**\n  From `http-cache-semantics`\n   @default {}\n  */\n\n\n  get cacheOptions() {\n    return this._internals.cacheOptions;\n  }\n\n  set cacheOptions(value) {\n    assert.plainObject(value);\n    assert.any([is.boolean, is.undefined], value.shared);\n    assert.any([is.number, is.undefined], value.cacheHeuristic);\n    assert.any([is.number, is.undefined], value.immutableMinTimeToLive);\n    assert.any([is.boolean, is.undefined], value.ignoreCargoCult);\n\n    for (const key in value) {\n      if (!(key in this._internals.cacheOptions)) {\n        throw new Error(`Cache option \\`${key}\\` does not exist`);\n      }\n    }\n\n    if (this._merging) {\n      Object.assign(this._internals.cacheOptions, value);\n    } else {\n      this._internals.cacheOptions = { ...value\n      };\n    }\n  }\n  /**\n  Options for the advanced HTTPS API.\n  */\n\n\n  get https() {\n    return this._internals.https;\n  }\n\n  set https(value) {\n    assert.plainObject(value);\n    assert.any([is.boolean, is.undefined], value.rejectUnauthorized);\n    assert.any([is.function_, is.undefined], value.checkServerIdentity);\n    assert.any([is.string, is.object, is.array, is.undefined], value.certificateAuthority);\n    assert.any([is.string, is.object, is.array, is.undefined], value.key);\n    assert.any([is.string, is.object, is.array, is.undefined], value.certificate);\n    assert.any([is.string, is.undefined], value.passphrase);\n    assert.any([is.string, is.buffer, is.array, is.undefined], value.pfx);\n    assert.any([is.array, is.undefined], value.alpnProtocols);\n    assert.any([is.string, is.undefined], value.ciphers);\n    assert.any([is.string, is.buffer, is.undefined], value.dhparam);\n    assert.any([is.string, is.undefined], value.signatureAlgorithms);\n    assert.any([is.string, is.undefined], value.minVersion);\n    assert.any([is.string, is.undefined], value.maxVersion);\n    assert.any([is.boolean, is.undefined], value.honorCipherOrder);\n    assert.any([is.number, is.undefined], value.tlsSessionLifetime);\n    assert.any([is.string, is.undefined], value.ecdhCurve);\n    assert.any([is.string, is.buffer, is.array, is.undefined], value.certificateRevocationLists);\n\n    for (const key in value) {\n      if (!(key in this._internals.https)) {\n        throw new Error(`HTTPS option \\`${key}\\` does not exist`);\n      }\n    }\n\n    if (this._merging) {\n      Object.assign(this._internals.https, value);\n    } else {\n      this._internals.https = { ...value\n      };\n    }\n  }\n  /**\n  [Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n   To get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set `responseType` to `buffer` instead.\n  Don't set this option to `null`.\n   __Note__: This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n   @default 'utf-8'\n  */\n\n\n  get encoding() {\n    return this._internals.encoding;\n  }\n\n  set encoding(value) {\n    if (value === null) {\n      throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n    }\n\n    assert.any([is.string, is.undefined], value);\n    this._internals.encoding = value;\n  }\n  /**\n  When set to `true` the promise will return the Response body instead of the Response object.\n   @default false\n  */\n\n\n  get resolveBodyOnly() {\n    return this._internals.resolveBodyOnly;\n  }\n\n  set resolveBodyOnly(value) {\n    assert.boolean(value);\n    this._internals.resolveBodyOnly = value;\n  }\n  /**\n  Returns a `Stream` instead of a `Promise`.\n  This is equivalent to calling `got.stream(url, options?)`.\n   @default false\n  */\n\n\n  get isStream() {\n    return this._internals.isStream;\n  }\n\n  set isStream(value) {\n    assert.boolean(value);\n    this._internals.isStream = value;\n  }\n  /**\n  The parsing method.\n   The promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\n   It's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n   __Note__: When using streams, this option is ignored.\n   @example\n  ```\n  const responsePromise = got(url);\n  const bufferPromise = responsePromise.buffer();\n  const jsonPromise = responsePromise.json();\n   const [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n  // `response` is an instance of Got Response\n  // `buffer` is an instance of Buffer\n  // `json` is an object\n  ```\n   @example\n  ```\n  // This\n  const body = await got(url).json();\n   // is semantically the same as this\n  const body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n  ```\n  */\n\n\n  get responseType() {\n    return this._internals.responseType;\n  }\n\n  set responseType(value) {\n    if (value === undefined) {\n      this._internals.responseType = 'text';\n      return;\n    }\n\n    if (value !== 'text' && value !== 'buffer' && value !== 'json') {\n      throw new Error(`Invalid \\`responseType\\` option: ${value}`);\n    }\n\n    this._internals.responseType = value;\n  }\n\n  get pagination() {\n    return this._internals.pagination;\n  }\n\n  set pagination(value) {\n    assert.object(value);\n\n    if (this._merging) {\n      Object.assign(this._internals.pagination, value);\n    } else {\n      this._internals.pagination = value;\n    }\n  }\n\n  get auth() {\n    throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n  }\n\n  set auth(_value) {\n    throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n  }\n\n  get setHost() {\n    return this._internals.setHost;\n  }\n\n  set setHost(value) {\n    assert.boolean(value);\n    this._internals.setHost = value;\n  }\n\n  get maxHeaderSize() {\n    return this._internals.maxHeaderSize;\n  }\n\n  set maxHeaderSize(value) {\n    assert.any([is.number, is.undefined], value);\n    this._internals.maxHeaderSize = value;\n  } // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  toJSON() {\n    return { ...this._internals\n    };\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](_depth, options) {\n    return inspect(this._internals, options);\n  }\n\n  createNativeRequestOptions() {\n    const internals = this._internals;\n    const url = internals.url;\n    let agent;\n\n    if (url.protocol === 'https:') {\n      agent = internals.http2 ? internals.agent : internals.agent.https;\n    } else {\n      agent = internals.agent.http;\n    }\n\n    const {\n      https\n    } = internals;\n    let {\n      pfx\n    } = https;\n\n    if (is.array(pfx) && is.plainObject(pfx[0])) {\n      pfx = pfx.map(object => ({\n        buf: object.buffer,\n        passphrase: object.passphrase\n      }));\n    }\n\n    return { ...internals.cacheOptions,\n      ...this._unixOptions,\n      // HTTPS options\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      ALPNProtocols: https.alpnProtocols,\n      ca: https.certificateAuthority,\n      cert: https.certificate,\n      key: https.key,\n      passphrase: https.passphrase,\n      pfx: https.pfx,\n      rejectUnauthorized: https.rejectUnauthorized,\n      checkServerIdentity: https.checkServerIdentity ?? checkServerIdentity,\n      ciphers: https.ciphers,\n      honorCipherOrder: https.honorCipherOrder,\n      minVersion: https.minVersion,\n      maxVersion: https.maxVersion,\n      sigalgs: https.signatureAlgorithms,\n      sessionTimeout: https.tlsSessionLifetime,\n      dhparam: https.dhparam,\n      ecdhCurve: https.ecdhCurve,\n      crl: https.certificateRevocationLists,\n      // HTTP options\n      lookup: internals.dnsLookup ?? internals.dnsCache?.lookup,\n      family: internals.dnsLookupIpVersion,\n      agent,\n      setHost: internals.setHost,\n      method: internals.method,\n      maxHeaderSize: internals.maxHeaderSize,\n      localAddress: internals.localAddress,\n      headers: internals.headers,\n      createConnection: internals.createConnection,\n      timeout: internals.http2 ? getHttp2TimeoutOption(internals) : undefined,\n      // HTTP/2 options\n      h2session: internals.h2session\n    };\n  }\n\n  getRequestFunction() {\n    const url = this._internals.url;\n    const {\n      request\n    } = this._internals;\n\n    if (!request && url) {\n      return this.getFallbackRequestFunction();\n    }\n\n    return request;\n  }\n\n  getFallbackRequestFunction() {\n    const url = this._internals.url;\n\n    if (!url) {\n      return;\n    }\n\n    if (url.protocol === 'https:') {\n      if (this._internals.http2) {\n        if (major < 15 || major === 15 && minor < 10) {\n          const error = new Error('To use the `http2` option, install Node.js 15.10.0 or above');\n          error.code = 'EUNSUPPORTED';\n          throw error;\n        }\n\n        return http2wrapper.auto;\n      }\n\n      return https.request;\n    }\n\n    return http.request;\n  }\n\n  freeze() {\n    const options = this._internals;\n    Object.freeze(options);\n    Object.freeze(options.hooks);\n    Object.freeze(options.hooks.afterResponse);\n    Object.freeze(options.hooks.beforeError);\n    Object.freeze(options.hooks.beforeRedirect);\n    Object.freeze(options.hooks.beforeRequest);\n    Object.freeze(options.hooks.beforeRetry);\n    Object.freeze(options.hooks.init);\n    Object.freeze(options.https);\n    Object.freeze(options.cacheOptions);\n    Object.freeze(options.agent);\n    Object.freeze(options.headers);\n    Object.freeze(options.timeout);\n    Object.freeze(options.retry);\n    Object.freeze(options.retry.errorCodes);\n    Object.freeze(options.retry.methods);\n    Object.freeze(options.retry.statusCodes);\n    Object.freeze(options.context);\n  }\n\n}","map":{"version":3,"names":["process","promisify","inspect","URL","URLSearchParams","checkServerIdentity","http","https","is","assert","lowercaseKeys","CacheableLookup","http2wrapper","isFormDataLike","parseLinkHeader","major","minor","versions","node","split","map","v","Number","validateSearchParameters","searchParameters","key","value","any","string","number","boolean","null_","undefined","globalCache","Map","globalDnsCache","getGlobalDnsCache","defaultInternals","request","agent","http2","h2session","decompress","timeout","connect","lookup","read","response","secureConnect","send","socket","prefixUrl","body","form","json","cookieJar","ignoreInvalidCookies","searchParams","dnsLookup","dnsCache","context","hooks","init","beforeRequest","beforeError","beforeRedirect","beforeRetry","afterResponse","followRedirect","maxRedirects","cache","throwHttpErrors","username","password","allowGetBody","headers","methodRewriting","dnsLookupIpVersion","parseJson","JSON","parse","stringifyJson","stringify","retry","limit","methods","statusCodes","errorCodes","maxRetryAfter","calculateDelay","computedValue","backoffLimit","POSITIVE_INFINITY","noise","localAddress","method","createConnection","cacheOptions","shared","cacheHeuristic","immutableMinTimeToLive","ignoreCargoCult","alpnProtocols","rejectUnauthorized","certificateAuthority","certificate","passphrase","pfx","ciphers","honorCipherOrder","minVersion","maxVersion","signatureAlgorithms","tlsSessionLifetime","dhparam","ecdhCurve","certificateRevocationLists","encoding","resolveBodyOnly","isStream","responseType","url","pagination","transform","options","paginate","rawLinkHeader","link","trim","parsed","next","find","entry","parameters","rel","reference","filter","shouldContinue","countLimit","backoff","requestLimit","stackAllItems","setHost","maxHeaderSize","cloneInternals","internals","result","cloneRaw","raw","object","array","getHttp2TimeoutOption","delays","delay","length","Math","min","withOptions","self","initHooks","hook","Options","constructor","input","defaults","Object","defineProperty","enumerable","configurable","writable","urlInstance","TypeError","_internals","_init","_merging","_unixOptions","plainObject","merge","error","push","Error","function_","assign","toString","endsWith","href","slice","buffer","nodeStream","generator","asyncGenerator","truthy","readable","startsWith","urlString","decodeURI","protocol","pathname","search","code","hostname","matches","exec","groups","socketPath","path","host","setCookie","getCookieString","bind","updated","append","delete","keys","_value","knownHookEvent","typedKnownHookEvent","typedValue","followRedirects","decodeURIComponent","fixedValue","encodeURIComponent","abs","Set","toUpperCase","auth","toJSON","Symbol","for","_depth","createNativeRequestOptions","buf","ALPNProtocols","ca","cert","sigalgs","sessionTimeout","crl","family","getRequestFunction","getFallbackRequestFunction","auto","freeze"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/got/dist/source/core/options.js"],"sourcesContent":["import process from 'node:process';\nimport { promisify, inspect } from 'node:util';\nimport { URL, URLSearchParams } from 'node:url';\nimport { checkServerIdentity } from 'node:tls';\n// DO NOT use destructuring for `https.request` and `http.request` as it's not compatible with `nock`.\nimport http from 'node:http';\nimport https from 'node:https';\nimport is, { assert } from '@sindresorhus/is';\nimport lowercaseKeys from 'lowercase-keys';\nimport CacheableLookup from 'cacheable-lookup';\nimport http2wrapper from 'http2-wrapper';\nimport { isFormDataLike } from 'form-data-encoder';\nimport parseLinkHeader from './parse-link-header.js';\nconst [major, minor] = process.versions.node.split('.').map(v => Number(v));\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for (const key in searchParameters) {\n        const value = searchParameters[key];\n        assert.any([is.string, is.number, is.boolean, is.null_, is.undefined], value);\n    }\n}\nconst globalCache = new Map();\nlet globalDnsCache;\nconst getGlobalDnsCache = () => {\n    if (globalDnsCache) {\n        return globalDnsCache;\n    }\n    globalDnsCache = new CacheableLookup();\n    return globalDnsCache;\n};\nconst defaultInternals = {\n    request: undefined,\n    agent: {\n        http: undefined,\n        https: undefined,\n        http2: undefined,\n    },\n    h2session: undefined,\n    decompress: true,\n    timeout: {\n        connect: undefined,\n        lookup: undefined,\n        read: undefined,\n        request: undefined,\n        response: undefined,\n        secureConnect: undefined,\n        send: undefined,\n        socket: undefined,\n    },\n    prefixUrl: '',\n    body: undefined,\n    form: undefined,\n    json: undefined,\n    cookieJar: undefined,\n    ignoreInvalidCookies: false,\n    searchParams: undefined,\n    dnsLookup: undefined,\n    dnsCache: undefined,\n    context: {},\n    hooks: {\n        init: [],\n        beforeRequest: [],\n        beforeError: [],\n        beforeRedirect: [],\n        beforeRetry: [],\n        afterResponse: [],\n    },\n    followRedirect: true,\n    maxRedirects: 10,\n    cache: undefined,\n    throwHttpErrors: true,\n    username: '',\n    password: '',\n    http2: false,\n    allowGetBody: false,\n    headers: {\n        'user-agent': 'got (https://github.com/sindresorhus/got)',\n    },\n    methodRewriting: false,\n    dnsLookupIpVersion: undefined,\n    parseJson: JSON.parse,\n    stringifyJson: JSON.stringify,\n    retry: {\n        limit: 2,\n        methods: [\n            'GET',\n            'PUT',\n            'HEAD',\n            'DELETE',\n            'OPTIONS',\n            'TRACE',\n        ],\n        statusCodes: [\n            408,\n            413,\n            429,\n            500,\n            502,\n            503,\n            504,\n            521,\n            522,\n            524,\n        ],\n        errorCodes: [\n            'ETIMEDOUT',\n            'ECONNRESET',\n            'EADDRINUSE',\n            'ECONNREFUSED',\n            'EPIPE',\n            'ENOTFOUND',\n            'ENETUNREACH',\n            'EAI_AGAIN',\n        ],\n        maxRetryAfter: undefined,\n        calculateDelay: ({ computedValue }) => computedValue,\n        backoffLimit: Number.POSITIVE_INFINITY,\n        noise: 100,\n    },\n    localAddress: undefined,\n    method: 'GET',\n    createConnection: undefined,\n    cacheOptions: {\n        shared: undefined,\n        cacheHeuristic: undefined,\n        immutableMinTimeToLive: undefined,\n        ignoreCargoCult: undefined,\n    },\n    https: {\n        alpnProtocols: undefined,\n        rejectUnauthorized: undefined,\n        checkServerIdentity: undefined,\n        certificateAuthority: undefined,\n        key: undefined,\n        certificate: undefined,\n        passphrase: undefined,\n        pfx: undefined,\n        ciphers: undefined,\n        honorCipherOrder: undefined,\n        minVersion: undefined,\n        maxVersion: undefined,\n        signatureAlgorithms: undefined,\n        tlsSessionLifetime: undefined,\n        dhparam: undefined,\n        ecdhCurve: undefined,\n        certificateRevocationLists: undefined,\n    },\n    encoding: undefined,\n    resolveBodyOnly: false,\n    isStream: false,\n    responseType: 'text',\n    url: undefined,\n    pagination: {\n        transform(response) {\n            if (response.request.options.responseType === 'json') {\n                return response.body;\n            }\n            return JSON.parse(response.body);\n        },\n        paginate({ response }) {\n            const rawLinkHeader = response.headers.link;\n            if (typeof rawLinkHeader !== 'string' || rawLinkHeader.trim() === '') {\n                return false;\n            }\n            const parsed = parseLinkHeader(rawLinkHeader);\n            const next = parsed.find(entry => entry.parameters.rel === 'next' || entry.parameters.rel === '\"next\"');\n            if (next) {\n                return {\n                    url: new URL(next.reference, response.url),\n                };\n            }\n            return false;\n        },\n        filter: () => true,\n        shouldContinue: () => true,\n        countLimit: Number.POSITIVE_INFINITY,\n        backoff: 0,\n        requestLimit: 10000,\n        stackAllItems: false,\n    },\n    setHost: true,\n    maxHeaderSize: undefined,\n};\nconst cloneInternals = (internals) => {\n    const { hooks, retry } = internals;\n    const result = {\n        ...internals,\n        context: { ...internals.context },\n        cacheOptions: { ...internals.cacheOptions },\n        https: { ...internals.https },\n        agent: { ...internals.agent },\n        headers: { ...internals.headers },\n        retry: {\n            ...retry,\n            errorCodes: [...retry.errorCodes],\n            methods: [...retry.methods],\n            statusCodes: [...retry.statusCodes],\n        },\n        timeout: { ...internals.timeout },\n        hooks: {\n            init: [...hooks.init],\n            beforeRequest: [...hooks.beforeRequest],\n            beforeError: [...hooks.beforeError],\n            beforeRedirect: [...hooks.beforeRedirect],\n            beforeRetry: [...hooks.beforeRetry],\n            afterResponse: [...hooks.afterResponse],\n        },\n        searchParams: internals.searchParams ? new URLSearchParams(internals.searchParams) : undefined,\n        pagination: { ...internals.pagination },\n    };\n    if (result.url !== undefined) {\n        result.prefixUrl = '';\n    }\n    return result;\n};\nconst cloneRaw = (raw) => {\n    const { hooks, retry } = raw;\n    const result = { ...raw };\n    if (is.object(raw.context)) {\n        result.context = { ...raw.context };\n    }\n    if (is.object(raw.cacheOptions)) {\n        result.cacheOptions = { ...raw.cacheOptions };\n    }\n    if (is.object(raw.https)) {\n        result.https = { ...raw.https };\n    }\n    if (is.object(raw.cacheOptions)) {\n        result.cacheOptions = { ...result.cacheOptions };\n    }\n    if (is.object(raw.agent)) {\n        result.agent = { ...raw.agent };\n    }\n    if (is.object(raw.headers)) {\n        result.headers = { ...raw.headers };\n    }\n    if (is.object(retry)) {\n        result.retry = { ...retry };\n        if (is.array(retry.errorCodes)) {\n            result.retry.errorCodes = [...retry.errorCodes];\n        }\n        if (is.array(retry.methods)) {\n            result.retry.methods = [...retry.methods];\n        }\n        if (is.array(retry.statusCodes)) {\n            result.retry.statusCodes = [...retry.statusCodes];\n        }\n    }\n    if (is.object(raw.timeout)) {\n        result.timeout = { ...raw.timeout };\n    }\n    if (is.object(hooks)) {\n        result.hooks = {\n            ...hooks,\n        };\n        if (is.array(hooks.init)) {\n            result.hooks.init = [...hooks.init];\n        }\n        if (is.array(hooks.beforeRequest)) {\n            result.hooks.beforeRequest = [...hooks.beforeRequest];\n        }\n        if (is.array(hooks.beforeError)) {\n            result.hooks.beforeError = [...hooks.beforeError];\n        }\n        if (is.array(hooks.beforeRedirect)) {\n            result.hooks.beforeRedirect = [...hooks.beforeRedirect];\n        }\n        if (is.array(hooks.beforeRetry)) {\n            result.hooks.beforeRetry = [...hooks.beforeRetry];\n        }\n        if (is.array(hooks.afterResponse)) {\n            result.hooks.afterResponse = [...hooks.afterResponse];\n        }\n    }\n    // TODO: raw.searchParams\n    if (is.object(raw.pagination)) {\n        result.pagination = { ...raw.pagination };\n    }\n    return result;\n};\nconst getHttp2TimeoutOption = (internals) => {\n    const delays = [internals.timeout.socket, internals.timeout.connect, internals.timeout.lookup, internals.timeout.request, internals.timeout.secureConnect].filter(delay => typeof delay === 'number');\n    if (delays.length > 0) {\n        return Math.min(...delays);\n    }\n    return undefined;\n};\nconst init = (options, withOptions, self) => {\n    const initHooks = options.hooks?.init;\n    if (initHooks) {\n        for (const hook of initHooks) {\n            hook(withOptions, self);\n        }\n    }\n};\nexport default class Options {\n    constructor(input, options, defaults) {\n        Object.defineProperty(this, \"_unixOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_internals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_merging\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_init\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        assert.any([is.string, is.urlInstance, is.object, is.undefined], input);\n        assert.any([is.object, is.undefined], options);\n        assert.any([is.object, is.undefined], defaults);\n        if (input instanceof Options || options instanceof Options) {\n            throw new TypeError('The defaults must be passed as the third argument');\n        }\n        this._internals = cloneInternals(defaults?._internals ?? defaults ?? defaultInternals);\n        this._init = [...(defaults?._init ?? [])];\n        this._merging = false;\n        this._unixOptions = undefined;\n        // This rule allows `finally` to be considered more important.\n        // Meaning no matter the error thrown in the `try` block,\n        // if `finally` throws then the `finally` error will be thrown.\n        //\n        // Yes, we want this. If we set `url` first, then the `url.searchParams`\n        // would get merged. Instead we set the `searchParams` first, then\n        // `url.searchParams` is overwritten as expected.\n        //\n        /* eslint-disable no-unsafe-finally */\n        try {\n            if (is.plainObject(input)) {\n                try {\n                    this.merge(input);\n                    this.merge(options);\n                }\n                finally {\n                    this.url = input.url;\n                }\n            }\n            else {\n                try {\n                    this.merge(options);\n                }\n                finally {\n                    if (options?.url !== undefined) {\n                        if (input === undefined) {\n                            this.url = options.url;\n                        }\n                        else {\n                            throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n                        }\n                    }\n                    else if (input !== undefined) {\n                        this.url = input;\n                    }\n                }\n            }\n        }\n        catch (error) {\n            error.options = this;\n            throw error;\n        }\n        /* eslint-enable no-unsafe-finally */\n    }\n    merge(options) {\n        if (!options) {\n            return;\n        }\n        if (options instanceof Options) {\n            for (const init of options._init) {\n                this.merge(init);\n            }\n            return;\n        }\n        options = cloneRaw(options);\n        init(this, options, this);\n        init(options, options, this);\n        this._merging = true;\n        // Always merge `isStream` first\n        if ('isStream' in options) {\n            this.isStream = options.isStream;\n        }\n        try {\n            let push = false;\n            for (const key in options) {\n                // `got.extend()` options\n                if (key === 'mutableDefaults' || key === 'handlers') {\n                    continue;\n                }\n                // Never merge `url`\n                if (key === 'url') {\n                    continue;\n                }\n                if (!(key in this)) {\n                    throw new Error(`Unexpected option: ${key}`);\n                }\n                // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n                this[key] = options[key];\n                push = true;\n            }\n            if (push) {\n                this._init.push(options);\n            }\n        }\n        finally {\n            this._merging = false;\n        }\n    }\n    /**\n    Custom request function.\n    The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n\n    @default http.request | https.request\n    */\n    get request() {\n        return this._internals.request;\n    }\n    set request(value) {\n        assert.any([is.function_, is.undefined], value);\n        this._internals.request = value;\n    }\n    /**\n    An object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance.\n    This is necessary because a request to one protocol might redirect to another.\n    In such a scenario, Got will switch over to the right protocol agent for you.\n\n    If a key is not present, it will default to a global agent.\n\n    @example\n    ```\n    import got from 'got';\n    import HttpAgent from 'agentkeepalive';\n\n    const {HttpsAgent} = HttpAgent;\n\n    await got('https://sindresorhus.com', {\n        agent: {\n            http: new HttpAgent(),\n            https: new HttpsAgent()\n        }\n    });\n    ```\n    */\n    get agent() {\n        return this._internals.agent;\n    }\n    set agent(value) {\n        assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.agent)) {\n                throw new TypeError(`Unexpected agent option: ${key}`);\n            }\n            assert.any([is.object, is.undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.agent, value);\n        }\n        else {\n            this._internals.agent = { ...value };\n        }\n    }\n    get h2session() {\n        return this._internals.h2session;\n    }\n    set h2session(value) {\n        this._internals.h2session = value;\n    }\n    /**\n    Decompress the response automatically.\n\n    This will set the `accept-encoding` header to `gzip, deflate, br` unless you set it yourself.\n\n    If this is disabled, a compressed response is returned as a `Buffer`.\n    This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n    @default true\n    */\n    get decompress() {\n        return this._internals.decompress;\n    }\n    set decompress(value) {\n        assert.boolean(value);\n        this._internals.decompress = value;\n    }\n    /**\n    Milliseconds to wait for the server to end the response before aborting the request with `got.TimeoutError` error (a.k.a. `request` property).\n    By default, there's no timeout.\n\n    This also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n    - `lookup` starts when a socket is assigned and ends when the hostname has been resolved.\n        Does not apply when using a Unix domain socket.\n    - `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n    - `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n    - `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n    - `response` starts when the request has been written to the socket and ends when the response headers are received.\n    - `send` starts when the socket is connected and ends with the request has been written to the socket.\n    - `request` starts when the request is initiated and ends when the response's end event fires.\n    */\n    get timeout() {\n        // We always return `Delays` here.\n        // It has to be `Delays | number`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.timeout;\n    }\n    set timeout(value) {\n        assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.timeout)) {\n                throw new Error(`Unexpected timeout option: ${key}`);\n            }\n            assert.any([is.number, is.undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.timeout, value);\n        }\n        else {\n            this._internals.timeout = { ...value };\n        }\n    }\n    /**\n    When specified, `prefixUrl` will be prepended to `url`.\n    The prefix can be any valid URL, either relative or absolute.\n    A trailing slash `/` is optional - one will be added automatically.\n\n    __Note__: `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n    __Note__: Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion.\n    For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`.\n    The latter is used by browsers.\n\n    __Tip__: Useful when used with `got.extend()` to create niche-specific Got instances.\n\n    __Tip__: You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`.\n    If the URL doesn't include it anymore, it will throw.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got('unicorn', {prefixUrl: 'https://cats.com'});\n    //=> 'https://cats.com/unicorn'\n\n    const instance = got.extend({\n        prefixUrl: 'https://google.com'\n    });\n\n    await instance('unicorn', {\n        hooks: {\n            beforeRequest: [\n                options => {\n                    options.prefixUrl = 'https://cats.com';\n                }\n            ]\n        }\n    });\n    //=> 'https://cats.com/unicorn'\n    ```\n    */\n    get prefixUrl() {\n        // We always return `string` here.\n        // It has to be `string | URL`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.prefixUrl;\n    }\n    set prefixUrl(value) {\n        assert.any([is.string, is.urlInstance], value);\n        if (value === '') {\n            this._internals.prefixUrl = '';\n            return;\n        }\n        value = value.toString();\n        if (!value.endsWith('/')) {\n            value += '/';\n        }\n        if (this._internals.prefixUrl && this._internals.url) {\n            const { href } = this._internals.url;\n            this._internals.url.href = value + href.slice(this._internals.prefixUrl.length);\n        }\n        this._internals.prefixUrl = value;\n    }\n    /**\n    __Note #1__: The `body` option cannot be used with the `json` or `form` option.\n\n    __Note #2__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #3__: If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n\n    __Note #4__: This option is not enumerable and will not be merged with the instance defaults.\n\n    The `content-length` header will be automatically set if `body` is a `string` / `Buffer` / [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n    Since Got 12, the `content-length` is not automatically set when `body` is a `fs.createReadStream`.\n    */\n    get body() {\n        return this._internals.body;\n    }\n    set body(value) {\n        assert.any([is.string, is.buffer, is.nodeStream, is.generator, is.asyncGenerator, isFormDataLike, is.undefined], value);\n        if (is.nodeStream(value)) {\n            assert.truthy(value.readable);\n        }\n        if (value !== undefined) {\n            assert.undefined(this._internals.form);\n            assert.undefined(this._internals.json);\n        }\n        this._internals.body = value;\n    }\n    /**\n    The form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\n    If the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get form() {\n        return this._internals.form;\n    }\n    set form(value) {\n        assert.any([is.plainObject, is.undefined], value);\n        if (value !== undefined) {\n            assert.undefined(this._internals.body);\n            assert.undefined(this._internals.json);\n        }\n        this._internals.form = value;\n    }\n    /**\n    JSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get json() {\n        return this._internals.json;\n    }\n    set json(value) {\n        if (value !== undefined) {\n            assert.undefined(this._internals.body);\n            assert.undefined(this._internals.form);\n        }\n        this._internals.json = value;\n    }\n    /**\n    The URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\n    Properties from `options` will override properties in the parsed `url`.\n\n    If no protocol is specified, it will throw a `TypeError`.\n\n    __Note__: The query string is **not** parsed as search params.\n\n    @example\n    ```\n    await got('https://example.com/?query=a b'); //=> https://example.com/?query=a%20b\n    await got('https://example.com/', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n\n    // The query string is overridden by `searchParams`\n    await got('https://example.com/?query=a b', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n    ```\n    */\n    get url() {\n        return this._internals.url;\n    }\n    set url(value) {\n        assert.any([is.string, is.urlInstance, is.undefined], value);\n        if (value === undefined) {\n            this._internals.url = undefined;\n            return;\n        }\n        if (is.string(value) && value.startsWith('/')) {\n            throw new Error('`url` must not start with a slash');\n        }\n        const urlString = `${this.prefixUrl}${value.toString()}`;\n        const url = new URL(urlString);\n        this._internals.url = url;\n        decodeURI(urlString);\n        if (url.protocol === 'unix:') {\n            url.href = `http://unix${url.pathname}${url.search}`;\n        }\n        if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n            const error = new Error(`Unsupported protocol: ${url.protocol}`);\n            error.code = 'ERR_UNSUPPORTED_PROTOCOL';\n            throw error;\n        }\n        if (this._internals.username) {\n            url.username = this._internals.username;\n            this._internals.username = '';\n        }\n        if (this._internals.password) {\n            url.password = this._internals.password;\n            this._internals.password = '';\n        }\n        if (this._internals.searchParams) {\n            url.search = this._internals.searchParams.toString();\n            this._internals.searchParams = undefined;\n        }\n        if (url.hostname === 'unix') {\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches?.groups) {\n                const { socketPath, path } = matches.groups;\n                this._unixOptions = {\n                    socketPath,\n                    path,\n                    host: '',\n                };\n            }\n            else {\n                this._unixOptions = undefined;\n            }\n            return;\n        }\n        this._unixOptions = undefined;\n    }\n    /**\n    Cookie support. You don't have to care about parsing or how to store them.\n\n    __Note__: If you provide this option, `options.headers.cookie` will be overridden.\n    */\n    get cookieJar() {\n        return this._internals.cookieJar;\n    }\n    set cookieJar(value) {\n        assert.any([is.object, is.undefined], value);\n        if (value === undefined) {\n            this._internals.cookieJar = undefined;\n            return;\n        }\n        let { setCookie, getCookieString } = value;\n        assert.function_(setCookie);\n        assert.function_(getCookieString);\n        /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n        if (setCookie.length === 4 && getCookieString.length === 0) {\n            setCookie = promisify(setCookie.bind(value));\n            getCookieString = promisify(getCookieString.bind(value));\n            this._internals.cookieJar = {\n                setCookie,\n                getCookieString: getCookieString,\n            };\n        }\n        else {\n            this._internals.cookieJar = value;\n        }\n    }\n    /**\n    Ignore invalid cookies instead of throwing an error.\n    Only useful when the `cookieJar` option has been set. Not recommended.\n\n    @default false\n    */\n    get ignoreInvalidCookies() {\n        return this._internals.ignoreInvalidCookies;\n    }\n    set ignoreInvalidCookies(value) {\n        assert.boolean(value);\n        this._internals.ignoreInvalidCookies = value;\n    }\n    /**\n    Query string that will be added to the request URL.\n    This will override the query string in `url`.\n\n    If you need to pass in an array, you can do it using a `URLSearchParams` instance.\n\n    @example\n    ```\n    import got from 'got';\n\n    const searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\n    await got('https://example.com', {searchParams});\n\n    console.log(searchParams.toString());\n    //=> 'key=a&key=b'\n    ```\n    */\n    get searchParams() {\n        if (this._internals.url) {\n            return this._internals.url.searchParams;\n        }\n        if (this._internals.searchParams === undefined) {\n            this._internals.searchParams = new URLSearchParams();\n        }\n        return this._internals.searchParams;\n    }\n    set searchParams(value) {\n        assert.any([is.string, is.object, is.undefined], value);\n        const url = this._internals.url;\n        if (value === undefined) {\n            this._internals.searchParams = undefined;\n            if (url) {\n                url.search = '';\n            }\n            return;\n        }\n        const searchParameters = this.searchParams;\n        let updated;\n        if (is.string(value)) {\n            updated = new URLSearchParams(value);\n        }\n        else if (value instanceof URLSearchParams) {\n            updated = value;\n        }\n        else {\n            validateSearchParameters(value);\n            updated = new URLSearchParams();\n            // eslint-disable-next-line guard-for-in\n            for (const key in value) {\n                const entry = value[key];\n                if (entry === null) {\n                    updated.append(key, '');\n                }\n                else if (entry === undefined) {\n                    searchParameters.delete(key);\n                }\n                else {\n                    updated.append(key, entry);\n                }\n            }\n        }\n        if (this._merging) {\n            // These keys will be replaced\n            for (const key of updated.keys()) {\n                searchParameters.delete(key);\n            }\n            for (const [key, value] of updated) {\n                searchParameters.append(key, value);\n            }\n        }\n        else if (url) {\n            url.search = searchParameters.toString();\n        }\n        else {\n            this._internals.searchParams = searchParameters;\n        }\n    }\n    get searchParameters() {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    set searchParameters(_value) {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    get dnsLookup() {\n        return this._internals.dnsLookup;\n    }\n    set dnsLookup(value) {\n        assert.any([is.function_, is.undefined], value);\n        this._internals.dnsLookup = value;\n    }\n    /**\n    An instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n    Useful when making lots of requests to different *public* hostnames.\n\n    `CacheableLookup` uses `dns.resolver4(..)` and `dns.resolver6(...)` under the hood and fall backs to `dns.lookup(...)` when the first two fail, which may lead to additional delay.\n\n    __Note__: This should stay disabled when making requests to internal hostnames such as `localhost`, `database.local` etc.\n\n    @default false\n    */\n    get dnsCache() {\n        return this._internals.dnsCache;\n    }\n    set dnsCache(value) {\n        assert.any([is.object, is.boolean, is.undefined], value);\n        if (value === true) {\n            this._internals.dnsCache = getGlobalDnsCache();\n        }\n        else if (value === false) {\n            this._internals.dnsCache = undefined;\n        }\n        else {\n            this._internals.dnsCache = value;\n        }\n    }\n    /**\n    User data. `context` is shallow merged and enumerable. If it contains non-enumerable properties they will NOT be merged.\n\n    @example\n    ```\n    import got from 'got';\n\n    const instance = got.extend({\n        hooks: {\n            beforeRequest: [\n                options => {\n                    if (!options.context || !options.context.token) {\n                        throw new Error('Token required');\n                    }\n\n                    options.headers.token = options.context.token;\n                }\n            ]\n        }\n    });\n\n    const context = {\n        token: 'secret'\n    };\n\n    const response = await instance('https://httpbin.org/headers', {context});\n\n    // Let's see the headers\n    console.log(response.body);\n    ```\n    */\n    get context() {\n        return this._internals.context;\n    }\n    set context(value) {\n        assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.context, value);\n        }\n        else {\n            this._internals.context = { ...value };\n        }\n    }\n    /**\n    Hooks allow modifications during the request lifecycle.\n    Hook functions may be async and are run serially.\n    */\n    get hooks() {\n        return this._internals.hooks;\n    }\n    set hooks(value) {\n        assert.object(value);\n        // eslint-disable-next-line guard-for-in\n        for (const knownHookEvent in value) {\n            if (!(knownHookEvent in this._internals.hooks)) {\n                throw new Error(`Unexpected hook event: ${knownHookEvent}`);\n            }\n            const typedKnownHookEvent = knownHookEvent;\n            const typedValue = value;\n            const hooks = typedValue[typedKnownHookEvent];\n            assert.any([is.array, is.undefined], hooks);\n            if (hooks) {\n                for (const hook of hooks) {\n                    assert.function_(hook);\n                }\n            }\n            if (this._merging) {\n                if (hooks) {\n                    // @ts-expect-error FIXME\n                    this._internals.hooks[typedKnownHookEvent].push(...hooks);\n                }\n            }\n            else {\n                if (!hooks) {\n                    throw new Error(`Missing hook event: ${knownHookEvent}`);\n                }\n                // @ts-expect-error FIXME\n                this._internals.hooks[knownHookEvent] = [...hooks];\n            }\n        }\n    }\n    /**\n    Defines if redirect responses should be followed automatically.\n\n    Note that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`.\n    This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n    @default true\n    */\n    get followRedirect() {\n        return this._internals.followRedirect;\n    }\n    set followRedirect(value) {\n        assert.boolean(value);\n        this._internals.followRedirect = value;\n    }\n    get followRedirects() {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    set followRedirects(_value) {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    /**\n    If exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n    @default 10\n    */\n    get maxRedirects() {\n        return this._internals.maxRedirects;\n    }\n    set maxRedirects(value) {\n        assert.number(value);\n        this._internals.maxRedirects = value;\n    }\n    /**\n    A cache adapter instance for storing cached response data.\n\n    @default false\n    */\n    get cache() {\n        return this._internals.cache;\n    }\n    set cache(value) {\n        assert.any([is.object, is.string, is.boolean, is.undefined], value);\n        if (value === true) {\n            this._internals.cache = globalCache;\n        }\n        else if (value === false) {\n            this._internals.cache = undefined;\n        }\n        else {\n            this._internals.cache = value;\n        }\n    }\n    /**\n    Determines if a `got.HTTPError` is thrown for unsuccessful responses.\n\n    If this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing.\n    This may be useful if you are checking for resource availability and are expecting error responses.\n\n    @default true\n    */\n    get throwHttpErrors() {\n        return this._internals.throwHttpErrors;\n    }\n    set throwHttpErrors(value) {\n        assert.boolean(value);\n        this._internals.throwHttpErrors = value;\n    }\n    get username() {\n        const url = this._internals.url;\n        const value = url ? url.username : this._internals.username;\n        return decodeURIComponent(value);\n    }\n    set username(value) {\n        assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.username = fixedValue;\n        }\n        else {\n            this._internals.username = fixedValue;\n        }\n    }\n    get password() {\n        const url = this._internals.url;\n        const value = url ? url.password : this._internals.password;\n        return decodeURIComponent(value);\n    }\n    set password(value) {\n        assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.password = fixedValue;\n        }\n        else {\n            this._internals.password = fixedValue;\n        }\n    }\n    /**\n    If set to `true`, Got will additionally accept HTTP2 requests.\n\n    It will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n\n    __Note__: This option requires Node.js 15.10.0 or newer as HTTP/2 support on older Node.js versions is very buggy.\n\n    __Note__: Overriding `options.request` will disable HTTP2 support.\n\n    @default false\n\n    @example\n    ```\n    import got from 'got';\n\n    const {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n\n    console.log(headers.via);\n    //=> '2 nghttpx'\n    ```\n    */\n    get http2() {\n        return this._internals.http2;\n    }\n    set http2(value) {\n        assert.boolean(value);\n        this._internals.http2 = value;\n    }\n    /**\n    Set this to `true` to allow sending body for the `GET` method.\n    However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect.\n    This option is only meant to interact with non-compliant servers when you have no other choice.\n\n    __Note__: The [RFC 7321](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore __it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)__.\n\n    @default false\n    */\n    get allowGetBody() {\n        return this._internals.allowGetBody;\n    }\n    set allowGetBody(value) {\n        assert.boolean(value);\n        this._internals.allowGetBody = value;\n    }\n    /**\n    Request headers.\n\n    Existing headers will be overwritten. Headers set to `undefined` will be omitted.\n\n    @default {}\n    */\n    get headers() {\n        return this._internals.headers;\n    }\n    set headers(value) {\n        assert.plainObject(value);\n        if (this._merging) {\n            Object.assign(this._internals.headers, lowercaseKeys(value));\n        }\n        else {\n            this._internals.headers = lowercaseKeys(value);\n        }\n    }\n    /**\n    Specifies if the redirects should be [rewritten as `GET`](https://tools.ietf.org/html/rfc7231#section-6.4).\n\n    If `false`, when sending a POST request and receiving a `302`, it will resend the body to the new location using the same HTTP method (`POST` in this case).\n\n    @default false\n    */\n    get methodRewriting() {\n        return this._internals.methodRewriting;\n    }\n    set methodRewriting(value) {\n        assert.boolean(value);\n        this._internals.methodRewriting = value;\n    }\n    /**\n    Indicates which DNS record family to use.\n\n    Values:\n    - `undefined`: IPv4 (if present) or IPv6\n    - `4`: Only IPv4\n    - `6`: Only IPv6\n\n    @default undefined\n    */\n    get dnsLookupIpVersion() {\n        return this._internals.dnsLookupIpVersion;\n    }\n    set dnsLookupIpVersion(value) {\n        if (value !== undefined && value !== 4 && value !== 6) {\n            throw new TypeError(`Invalid DNS lookup IP version: ${value}`);\n        }\n        this._internals.dnsLookupIpVersion = value;\n    }\n    /**\n    A function used to parse JSON responses.\n\n    @example\n    ```\n    import got from 'got';\n    import Bourne from '@hapi/bourne';\n\n    const parsed = await got('https://example.com', {\n        parseJson: text => Bourne.parse(text)\n    }).json();\n\n    console.log(parsed);\n    ```\n    */\n    get parseJson() {\n        return this._internals.parseJson;\n    }\n    set parseJson(value) {\n        assert.function_(value);\n        this._internals.parseJson = value;\n    }\n    /**\n    A function used to stringify the body of JSON requests.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (key.startsWith('_')) {\n                return;\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            _ignoreMe: 1234\n        }\n    });\n    ```\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (typeof value === 'number') {\n                return value.toString();\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            number: 1\n        }\n    });\n    ```\n    */\n    get stringifyJson() {\n        return this._internals.stringifyJson;\n    }\n    set stringifyJson(value) {\n        assert.function_(value);\n        this._internals.stringifyJson = value;\n    }\n    /**\n    An object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n    Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\n    The `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value.\n    The function must return a delay in milliseconds (or a Promise resolving with it) (`0` return value cancels retry).\n\n    By default, it retries *only* on the specified methods, status codes, and on these network errors:\n\n    - `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n    - `ECONNRESET`: Connection was forcibly closed by a peer.\n    - `EADDRINUSE`: Could not bind to any free port.\n    - `ECONNREFUSED`: Connection was refused by the server.\n    - `EPIPE`: The remote side of the stream being written has been closed.\n    - `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n    - `ENETUNREACH`: No internet connection.\n    - `EAI_AGAIN`: DNS lookup timed out.\n\n    __Note__: If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\n    __Note__: If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n    */\n    get retry() {\n        return this._internals.retry;\n    }\n    set retry(value) {\n        assert.plainObject(value);\n        assert.any([is.function_, is.undefined], value.calculateDelay);\n        assert.any([is.number, is.undefined], value.maxRetryAfter);\n        assert.any([is.number, is.undefined], value.limit);\n        assert.any([is.array, is.undefined], value.methods);\n        assert.any([is.array, is.undefined], value.statusCodes);\n        assert.any([is.array, is.undefined], value.errorCodes);\n        assert.any([is.number, is.undefined], value.noise);\n        if (value.noise && Math.abs(value.noise) > 100) {\n            throw new Error(`The maximum acceptable retry noise is +/- 100ms, got ${value.noise}`);\n        }\n        for (const key in value) {\n            if (!(key in this._internals.retry)) {\n                throw new Error(`Unexpected retry option: ${key}`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.retry, value);\n        }\n        else {\n            this._internals.retry = { ...value };\n        }\n        const { retry } = this._internals;\n        retry.methods = [...new Set(retry.methods.map(method => method.toUpperCase()))];\n        retry.statusCodes = [...new Set(retry.statusCodes)];\n        retry.errorCodes = [...new Set(retry.errorCodes)];\n    }\n    /**\n    From `http.RequestOptions`.\n\n    The IP address used to send the request from.\n    */\n    get localAddress() {\n        return this._internals.localAddress;\n    }\n    set localAddress(value) {\n        assert.any([is.string, is.undefined], value);\n        this._internals.localAddress = value;\n    }\n    /**\n    The HTTP method used to make the request.\n\n    @default 'GET'\n    */\n    get method() {\n        return this._internals.method;\n    }\n    set method(value) {\n        assert.string(value);\n        this._internals.method = value.toUpperCase();\n    }\n    get createConnection() {\n        return this._internals.createConnection;\n    }\n    set createConnection(value) {\n        assert.any([is.function_, is.undefined], value);\n        this._internals.createConnection = value;\n    }\n    /**\n    From `http-cache-semantics`\n\n    @default {}\n    */\n    get cacheOptions() {\n        return this._internals.cacheOptions;\n    }\n    set cacheOptions(value) {\n        assert.plainObject(value);\n        assert.any([is.boolean, is.undefined], value.shared);\n        assert.any([is.number, is.undefined], value.cacheHeuristic);\n        assert.any([is.number, is.undefined], value.immutableMinTimeToLive);\n        assert.any([is.boolean, is.undefined], value.ignoreCargoCult);\n        for (const key in value) {\n            if (!(key in this._internals.cacheOptions)) {\n                throw new Error(`Cache option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.cacheOptions, value);\n        }\n        else {\n            this._internals.cacheOptions = { ...value };\n        }\n    }\n    /**\n    Options for the advanced HTTPS API.\n    */\n    get https() {\n        return this._internals.https;\n    }\n    set https(value) {\n        assert.plainObject(value);\n        assert.any([is.boolean, is.undefined], value.rejectUnauthorized);\n        assert.any([is.function_, is.undefined], value.checkServerIdentity);\n        assert.any([is.string, is.object, is.array, is.undefined], value.certificateAuthority);\n        assert.any([is.string, is.object, is.array, is.undefined], value.key);\n        assert.any([is.string, is.object, is.array, is.undefined], value.certificate);\n        assert.any([is.string, is.undefined], value.passphrase);\n        assert.any([is.string, is.buffer, is.array, is.undefined], value.pfx);\n        assert.any([is.array, is.undefined], value.alpnProtocols);\n        assert.any([is.string, is.undefined], value.ciphers);\n        assert.any([is.string, is.buffer, is.undefined], value.dhparam);\n        assert.any([is.string, is.undefined], value.signatureAlgorithms);\n        assert.any([is.string, is.undefined], value.minVersion);\n        assert.any([is.string, is.undefined], value.maxVersion);\n        assert.any([is.boolean, is.undefined], value.honorCipherOrder);\n        assert.any([is.number, is.undefined], value.tlsSessionLifetime);\n        assert.any([is.string, is.undefined], value.ecdhCurve);\n        assert.any([is.string, is.buffer, is.array, is.undefined], value.certificateRevocationLists);\n        for (const key in value) {\n            if (!(key in this._internals.https)) {\n                throw new Error(`HTTPS option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.https, value);\n        }\n        else {\n            this._internals.https = { ...value };\n        }\n    }\n    /**\n    [Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\n    To get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set `responseType` to `buffer` instead.\n    Don't set this option to `null`.\n\n    __Note__: This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n\n    @default 'utf-8'\n    */\n    get encoding() {\n        return this._internals.encoding;\n    }\n    set encoding(value) {\n        if (value === null) {\n            throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n        }\n        assert.any([is.string, is.undefined], value);\n        this._internals.encoding = value;\n    }\n    /**\n    When set to `true` the promise will return the Response body instead of the Response object.\n\n    @default false\n    */\n    get resolveBodyOnly() {\n        return this._internals.resolveBodyOnly;\n    }\n    set resolveBodyOnly(value) {\n        assert.boolean(value);\n        this._internals.resolveBodyOnly = value;\n    }\n    /**\n    Returns a `Stream` instead of a `Promise`.\n    This is equivalent to calling `got.stream(url, options?)`.\n\n    @default false\n    */\n    get isStream() {\n        return this._internals.isStream;\n    }\n    set isStream(value) {\n        assert.boolean(value);\n        this._internals.isStream = value;\n    }\n    /**\n    The parsing method.\n\n    The promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\n\n    It's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n\n    __Note__: When using streams, this option is ignored.\n\n    @example\n    ```\n    const responsePromise = got(url);\n    const bufferPromise = responsePromise.buffer();\n    const jsonPromise = responsePromise.json();\n\n    const [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n    // `response` is an instance of Got Response\n    // `buffer` is an instance of Buffer\n    // `json` is an object\n    ```\n\n    @example\n    ```\n    // This\n    const body = await got(url).json();\n\n    // is semantically the same as this\n    const body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n    ```\n    */\n    get responseType() {\n        return this._internals.responseType;\n    }\n    set responseType(value) {\n        if (value === undefined) {\n            this._internals.responseType = 'text';\n            return;\n        }\n        if (value !== 'text' && value !== 'buffer' && value !== 'json') {\n            throw new Error(`Invalid \\`responseType\\` option: ${value}`);\n        }\n        this._internals.responseType = value;\n    }\n    get pagination() {\n        return this._internals.pagination;\n    }\n    set pagination(value) {\n        assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.pagination, value);\n        }\n        else {\n            this._internals.pagination = value;\n        }\n    }\n    get auth() {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    set auth(_value) {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    get setHost() {\n        return this._internals.setHost;\n    }\n    set setHost(value) {\n        assert.boolean(value);\n        this._internals.setHost = value;\n    }\n    get maxHeaderSize() {\n        return this._internals.maxHeaderSize;\n    }\n    set maxHeaderSize(value) {\n        assert.any([is.number, is.undefined], value);\n        this._internals.maxHeaderSize = value;\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    toJSON() {\n        return { ...this._internals };\n    }\n    [Symbol.for('nodejs.util.inspect.custom')](_depth, options) {\n        return inspect(this._internals, options);\n    }\n    createNativeRequestOptions() {\n        const internals = this._internals;\n        const url = internals.url;\n        let agent;\n        if (url.protocol === 'https:') {\n            agent = internals.http2 ? internals.agent : internals.agent.https;\n        }\n        else {\n            agent = internals.agent.http;\n        }\n        const { https } = internals;\n        let { pfx } = https;\n        if (is.array(pfx) && is.plainObject(pfx[0])) {\n            pfx = pfx.map(object => ({\n                buf: object.buffer,\n                passphrase: object.passphrase,\n            }));\n        }\n        return {\n            ...internals.cacheOptions,\n            ...this._unixOptions,\n            // HTTPS options\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            ALPNProtocols: https.alpnProtocols,\n            ca: https.certificateAuthority,\n            cert: https.certificate,\n            key: https.key,\n            passphrase: https.passphrase,\n            pfx: https.pfx,\n            rejectUnauthorized: https.rejectUnauthorized,\n            checkServerIdentity: https.checkServerIdentity ?? checkServerIdentity,\n            ciphers: https.ciphers,\n            honorCipherOrder: https.honorCipherOrder,\n            minVersion: https.minVersion,\n            maxVersion: https.maxVersion,\n            sigalgs: https.signatureAlgorithms,\n            sessionTimeout: https.tlsSessionLifetime,\n            dhparam: https.dhparam,\n            ecdhCurve: https.ecdhCurve,\n            crl: https.certificateRevocationLists,\n            // HTTP options\n            lookup: internals.dnsLookup ?? internals.dnsCache?.lookup,\n            family: internals.dnsLookupIpVersion,\n            agent,\n            setHost: internals.setHost,\n            method: internals.method,\n            maxHeaderSize: internals.maxHeaderSize,\n            localAddress: internals.localAddress,\n            headers: internals.headers,\n            createConnection: internals.createConnection,\n            timeout: internals.http2 ? getHttp2TimeoutOption(internals) : undefined,\n            // HTTP/2 options\n            h2session: internals.h2session,\n        };\n    }\n    getRequestFunction() {\n        const url = this._internals.url;\n        const { request } = this._internals;\n        if (!request && url) {\n            return this.getFallbackRequestFunction();\n        }\n        return request;\n    }\n    getFallbackRequestFunction() {\n        const url = this._internals.url;\n        if (!url) {\n            return;\n        }\n        if (url.protocol === 'https:') {\n            if (this._internals.http2) {\n                if (major < 15 || (major === 15 && minor < 10)) {\n                    const error = new Error('To use the `http2` option, install Node.js 15.10.0 or above');\n                    error.code = 'EUNSUPPORTED';\n                    throw error;\n                }\n                return http2wrapper.auto;\n            }\n            return https.request;\n        }\n        return http.request;\n    }\n    freeze() {\n        const options = this._internals;\n        Object.freeze(options);\n        Object.freeze(options.hooks);\n        Object.freeze(options.hooks.afterResponse);\n        Object.freeze(options.hooks.beforeError);\n        Object.freeze(options.hooks.beforeRedirect);\n        Object.freeze(options.hooks.beforeRequest);\n        Object.freeze(options.hooks.beforeRetry);\n        Object.freeze(options.hooks.init);\n        Object.freeze(options.https);\n        Object.freeze(options.cacheOptions);\n        Object.freeze(options.agent);\n        Object.freeze(options.headers);\n        Object.freeze(options.timeout);\n        Object.freeze(options.retry);\n        Object.freeze(options.retry.errorCodes);\n        Object.freeze(options.retry.methods);\n        Object.freeze(options.retry.statusCodes);\n        Object.freeze(options.context);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}