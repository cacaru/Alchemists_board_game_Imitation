{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst checkType = (name, value, types) => {\n  const valid = types.some(type => {\n    const typeofType = typeof type;\n\n    if (typeofType === 'string') {\n      return typeof value === type;\n    }\n\n    return value instanceof type;\n  });\n\n  if (!valid) {\n    const names = types.map(type => typeof type === 'string' ? type : type.name);\n    throw new TypeError(`Expected '${name}' to be a type of ${names.join(' or ')}, got ${typeof value}`);\n  }\n};\n\nmodule.exports = checkType;","map":{"version":3,"names":["checkType","name","value","types","valid","some","type","typeofType","names","map","TypeError","join","module","exports"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/http2-wrapper/source/utils/check-type.js"],"sourcesContent":["'use strict';\n\nconst checkType = (name, value, types) => {\n\tconst valid = types.some(type => {\n\t\tconst typeofType = typeof type;\n\t\tif (typeofType === 'string') {\n\t\t\treturn typeof value === type;\n\t\t}\n\n\t\treturn value instanceof type;\n\t});\n\n\tif (!valid) {\n\t\tconst names = types.map(type => typeof type === 'string' ? type : type.name);\n\n\t\tthrow new TypeError(`Expected '${name}' to be a type of ${names.join(' or ')}, got ${typeof value}`);\n\t}\n};\n\nmodule.exports = checkType;\n"],"mappings":"AAAA;;;;AAEA,MAAMA,SAAS,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,KAAwB;EACzC,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWC,IAAI,IAAI;IAChC,MAAMC,UAAU,GAAG,OAAOD,IAA1B;;IACA,IAAIC,UAAU,KAAK,QAAnB,EAA6B;MAC5B,OAAO,OAAOL,KAAP,KAAiBI,IAAxB;IACA;;IAED,OAAOJ,KAAK,YAAYI,IAAxB;EACA,CAPa,CAAd;;EASA,IAAI,CAACF,KAAL,EAAY;IACX,MAAMI,KAAK,GAAGL,KAAK,CAACM,GAAN,CAAUH,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACL,IAAzD,CAAd;IAEA,MAAM,IAAIS,SAAJ,CAAe,aAAYT,IAAK,qBAAoBO,KAAK,CAACG,IAAN,CAAW,MAAX,CAAmB,SAAQ,OAAOT,KAAM,EAA5F,CAAN;EACA;AACD,CAfD;;AAiBAU,MAAM,CAACC,OAAP,GAAiBb,SAAjB"},"metadata":{},"sourceType":"script"}