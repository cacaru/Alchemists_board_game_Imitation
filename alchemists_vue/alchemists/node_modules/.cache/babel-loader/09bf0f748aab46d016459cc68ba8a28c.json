{"ast":null,"code":"export default {\n  name: 'game_lobby',\n\n  created() {\n    if (this.$route.params.is_restart == 'true') {} else {} //this.$route.params.room_address:this.$route.params.port\n    // console.log(params);\n    // console.log(params.nick_name);\n    //console.log(\"server in\");\n    //console.log(this.$route.params);\n\n\n    let msg; //마스터 인 입장만 count를 가지고 있으므로\n\n    if (this.$route.params.is_master === 'true') {\n      msg = {\n        user_name: this.$route.params.nick_name,\n        room_pw: this.$route.params.room_pw,\n        count: this.$route.params.count,\n        is_master: this.$route.params.is_master,\n        is_ready: false,\n        msg: this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\n      }; //console.log(\"master\");\n    } else {\n      msg = {\n        user_name: this.$route.params.nick_name,\n        room_pw: this.$route.params.room_pw,\n        is_master: this.$route.params.is_master,\n        is_ready: false,\n        msg: this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\n      }; //console.log(\"entras\");\n    } // 입장했음을 알림\n\n\n    socket.emit(\"enter\", msg); // 방 정보를 받음 - 입장 했을 때 자신에게만 한 번 전송\n\n    socket.on(\"announce_room_name\", room_data => {\n      this.room_name = room_data.room_name;\n      this.my_key = room_data.my_key; //console.log(this.my_key);\n    }); //다른 채팅이 있는지 확인\n\n    socket.on(\"chat\", data => {\n      switch (data.type) {\n        case \"announce\":\n          this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\n          break;\n\n        case \"normal\":\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\n          break;\n      } //console.log(\"chat :: \");\n      //console.log(data);\n\n    }); // 다른 플레이어가 입장시 / 색깔 선택 시 정보를 받음\n\n    socket.on(\"all_player\", data => {\n      //console.log(data);\n      this.users = data;\n    }); //입장시 방이 가득 찼는지 확인\n\n    socket.on(\"pull_room\", () => {\n      //console.log(res + \"방이 가득 찼습니다.\");\n      alert(\"방이 가득 찼습니다. 뒤로 돌아갑니다\"); // master 면 create 로\n\n      if (this.$route.params.is_master === 'true') {\n        this.$router.push({\n          name: 'create_lobby',\n          params: {\n            count: this.$route.params.count\n          }\n        });\n      } // entrans 면 enter 로\n      else {\n        this.$router.push({\n          name: 'enter_lobby'\n        });\n      }\n    }); // 마스터가 아닌데 방이 없는 곳에 들어갈 경우\n\n    socket.on(\"no_room\", () => {\n      alert(\"방이 아직 생성되지 않았거나 잘못된 주소입니다. 주소를 확인해주세요\");\n      alert(\"뒤로 돌아갑니다.\");\n      this.$router.push({\n        name: 'enter_lobby'\n      });\n    }); // 비밀번호가 잘못 된 경우\n\n    socket.on(\"wrong_pw\", () => {\n      alert(\"비밀번호가 잘못되었습니다. 비밀번호를 확인해주세요\");\n      this.$router.push({\n        name: 'enter_lobby'\n      });\n    }); // 게임 시작으로 인해 모두 방으로 이동\n\n    socket.on(\"everyone_move_to_board\", () => {\n      this.$router.push({\n        name: 'game_board'\n      });\n    });\n  },\n\n  data() {\n    return {\n      users: '',\n      textarea: '',\n      message: '',\n      room_name: '',\n      my_key: '',\n      my_name: this.$route.params.nick_name,\n      color_button: 'inline-block',\n      back_button: 'none',\n      toggle_game_start: \"준비완료\"\n    };\n  },\n\n  methods: {\n    // 고른 색을 서버에 알림\n    choose_color: function (color, my_name, my_key) {\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\n      let data = {\n        user_name: my_name,\n        user_color: color,\n        user_key: my_key\n      }; //선택한 값을 서버에 전송\n\n      socket.emit(\"edit_color\", data);\n    },\n    sending_message: function () {\n      if (this.message !== '') {\n        let msg = {\n          speaker: this.my_name,\n          msg: this.message,\n          type: \"normal\"\n        }; //console.log(msg);\n\n        this.message = '';\n        socket.emit(\"chat\", msg);\n      }\n    },\n    back_choose_color: function () {\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\n      let data = {\n        user_name: this.my_name,\n        user_color: '',\n        user_key: this.my_key\n      }; //선택한 값을 서버에 전송\n\n      socket.emit(\"edit_color\", data);\n    },\n    game_start: function () {\n      var ready_player = 0; // 준비 완료 시 데이터를 갱신하므로 is_ready 값이 true 인 수를 셈\n\n      for (var i = 0; i < this.users.length; i++) {\n        if (this.users[i].is_ready === true) {\n          ready_player++;\n        }\n      } // master는 is_ready 값이 false 이므로 +1 \n      // 방최대 인원까지 모두 모여야 게임 시작 가능하게 함\n\n\n      if (ready_player + 1 == this.users.length && this.users.length == this.$route.params.count) {\n        // console.log(\"게임 시작 준비 완료\");\n        // console.log(socket);\n        socket.emit(\"move_to_board_everyone\");\n      } else {\n        alert(\"모든 플레이어가 준비 완료상태가 되어야 합니다.\");\n      }\n    },\n    game_ready: function () {\n      var is_select_color = false;\n\n      for (var i = 0; i < this.users.length; i++) {\n        if (this.users[i].user_key === this.my_key) {\n          if (this.users[i].user_color != '') {\n            is_select_color = true;\n          }\n        }\n      }\n\n      if (!is_select_color) {\n        alert(\"색을 먼저 선택해주세요!\");\n        return;\n      }\n\n      this.toggle_game_start = this.toggle_game_start === '준비완료' ? '시작대기' : '준비완료';\n      var ready_var;\n\n      if (this.toggle_game_start === '준비완료') {\n        ready_var = false;\n      } else {\n        ready_var = true;\n      }\n\n      let data = {\n        is_ready: ready_var,\n        user_key: this.my_key\n      };\n      socket.emit(\"lobby_ready\", data);\n    }\n  }\n};","map":{"version":3,"names":["name","created","$route","params","is_restart","msg","is_master","user_name","nick_name","room_pw","count","is_ready","socket","emit","on","room_data","room_name","my_key","data","type","textarea","speaker","users","alert","$router","push","message","my_name","color_button","back_button","toggle_game_start","methods","choose_color","color","user_color","user_key","sending_message","back_choose_color","game_start","ready_player","i","length","game_ready","is_select_color","ready_var"],"sources":["E:/GitHub/personal_tranning/alchemists_vue/alchemists/src/assets/script/game_lobby.js"],"sourcesContent":["\r\n\r\nexport default {\r\n  name : 'game_lobby',\r\n\r\n  created() {\r\n    if( this.$route.params.is_restart == 'true' ) {\r\n\r\n    }\r\n    else {\r\n      \r\n    }\r\n    //this.$route.params.room_address:this.$route.params.port\r\n    // console.log(params);\r\n    // console.log(params.nick_name);\r\n    //console.log(\"server in\");\r\n    //console.log(this.$route.params);\r\n    let msg;\r\n    //마스터 인 입장만 count를 가지고 있으므로\r\n    if ( this.$route.params.is_master === 'true' ) {\r\n      msg = {\r\n        user_name : this.$route.params.nick_name,\r\n        room_pw   : this.$route.params.room_pw,\r\n        count     : this.$route.params.count,\r\n        is_master : this.$route.params.is_master,\r\n        is_ready  : false,\r\n        msg       : this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\r\n      };\r\n      //console.log(\"master\");\r\n    } else {\r\n      msg = {\r\n        user_name : this.$route.params.nick_name,\r\n        room_pw   : this.$route.params.room_pw,\r\n        is_master : this.$route.params.is_master,\r\n        is_ready  : false,\r\n        msg       : this.$route.params.nick_name + \" 가 방에 참가하였습니다.\"\r\n      }\r\n      //console.log(\"entras\");\r\n    }\r\n   \r\n    // 입장했음을 알림\r\n    socket.emit(\"enter\", msg);\r\n\r\n    // 방 정보를 받음 - 입장 했을 때 자신에게만 한 번 전송\r\n    socket.on(\"announce_room_name\", (room_data) => {\r\n      this.room_name = room_data.room_name;\r\n      this.my_key = room_data.my_key;\r\n      //console.log(this.my_key);\r\n    })\r\n\r\n\r\n    //다른 채팅이 있는지 확인\r\n    socket.on(\"chat\", (data) => {\r\n      switch ( data.type ) {\r\n        case \"announce\" :\r\n          this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\r\n          break;\r\n        case \"normal\" :\r\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\r\n          break;\r\n      }\r\n      //console.log(\"chat :: \");\r\n      //console.log(data);\r\n    });\r\n\r\n    // 다른 플레이어가 입장시 / 색깔 선택 시 정보를 받음\r\n    socket.on(\"all_player\", (data) => {\r\n      //console.log(data);\r\n      this.users = data;\r\n    });\r\n\r\n    //입장시 방이 가득 찼는지 확인\r\n    socket.on(\"pull_room\", () => {\r\n        //console.log(res + \"방이 가득 찼습니다.\");\r\n        alert(\"방이 가득 찼습니다. 뒤로 돌아갑니다\");\r\n        // master 면 create 로\r\n        if( this.$route.params.is_master === 'true' ){\r\n          this.$router.push({\r\n            name: 'create_lobby',\r\n            params : {\r\n                count : this.$route.params.count\r\n            }\r\n          });\r\n        }\r\n        // entrans 면 enter 로\r\n        else {\r\n          this.$router.push({\r\n            name: 'enter_lobby',\r\n          });\r\n        }\r\n        \r\n        \r\n    });\r\n\r\n    // 마스터가 아닌데 방이 없는 곳에 들어갈 경우\r\n    socket.on(\"no_room\", () => {\r\n      alert(\"방이 아직 생성되지 않았거나 잘못된 주소입니다. 주소를 확인해주세요\");\r\n      alert(\"뒤로 돌아갑니다.\");\r\n      this.$router.push({\r\n          name: 'enter_lobby'\r\n      });\r\n    })\r\n\r\n    // 비밀번호가 잘못 된 경우\r\n    socket.on(\"wrong_pw\", () => {\r\n      alert(\"비밀번호가 잘못되었습니다. 비밀번호를 확인해주세요\");\r\n      this.$router.push({\r\n        name: 'enter_lobby'\r\n      });\r\n    });\r\n\r\n    // 게임 시작으로 인해 모두 방으로 이동\r\n    socket.on(\"everyone_move_to_board\", () => {\r\n      this.$router.push({\r\n              name: 'game_board',\r\n        })\r\n    });\r\n\r\n  },\r\n  data() {\r\n    return  {\r\n      users : '',\r\n      textarea : '',\r\n      message : '',\r\n      room_name : '',\r\n      my_key : '',\r\n      my_name : this.$route.params.nick_name,\r\n      color_button : 'inline-block',\r\n      back_button : 'none',\r\n      toggle_game_start : \"준비완료\",\r\n    }\r\n  },\r\n  methods : {\r\n    // 고른 색을 서버에 알림\r\n    choose_color : function(color, my_name, my_key) {\r\n\r\n        this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\r\n        this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\r\n        let data = {\r\n          user_name   : my_name,\r\n          user_color  : color,\r\n          user_key    : my_key\r\n        }\r\n        //선택한 값을 서버에 전송\r\n        socket.emit(\"edit_color\", data);\r\n\r\n    },\r\n\r\n    sending_message : function(){\r\n      if( this.message !== '' ){\r\n        let msg = {\r\n          speaker : this.my_name,\r\n          msg : this.message,\r\n          type : \"normal\"\r\n        }\r\n        //console.log(msg);\r\n        this.message = '';\r\n        socket.emit(\"chat\", msg);\r\n      }\r\n    },\r\n\r\n    back_choose_color : function() {\r\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\r\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\r\n      let data = {\r\n          user_name   : this.my_name,\r\n          user_color  : '',\r\n          user_key    : this.my_key\r\n        }\r\n      //선택한 값을 서버에 전송\r\n      socket.emit(\"edit_color\", data);\r\n    },\r\n\r\n    game_start : function() {\r\n\r\n      var ready_player = 0;\r\n      // 준비 완료 시 데이터를 갱신하므로 is_ready 값이 true 인 수를 셈\r\n      for( var i = 0 ; i < this.users.length; i++){\r\n        if ( this.users[i].is_ready === true ) {\r\n          ready_player++;\r\n        }\r\n      }\r\n      // master는 is_ready 값이 false 이므로 +1 \r\n      // 방최대 인원까지 모두 모여야 게임 시작 가능하게 함\r\n      if( ready_player + 1 == this.users.length && this.users.length == this.$route.params.count ){\r\n        // console.log(\"게임 시작 준비 완료\");\r\n        // console.log(socket);\r\n\r\n        socket.emit(\"move_to_board_everyone\");\r\n\r\n      }\r\n      else {\r\n        alert(\"모든 플레이어가 준비 완료상태가 되어야 합니다.\");\r\n      }\r\n\r\n    },\r\n\r\n    game_ready : function(){\r\n      var is_select_color = false;\r\n      for( var i = 0 ; i < this.users.length; i++){\r\n        if( this.users[i].user_key === this.my_key ){\r\n          if( this.users[i].user_color != '' ){\r\n            is_select_color = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if( !is_select_color ) {\r\n        alert(\"색을 먼저 선택해주세요!\");\r\n        return;\r\n      }\r\n\r\n      this.toggle_game_start = this.toggle_game_start === '준비완료' ? '시작대기' : '준비완료';\r\n      var ready_var;\r\n\r\n      if ( this.toggle_game_start === '준비완료' ){\r\n        ready_var = false;\r\n      }else {\r\n        ready_var = true;\r\n      }\r\n      \r\n      let data = {\r\n        is_ready : ready_var,\r\n        user_key : this.my_key\r\n      };\r\n\r\n      socket.emit(\"lobby_ready\", data);\r\n    }\r\n      \r\n\r\n  },\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}