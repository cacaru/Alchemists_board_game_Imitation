{"ast":null,"code":"const app = require(\"express\")();\n\nconst server = require(\"http\").createServer(app); // http server를 socket.io server로 upgrade\n\n\nconst io = require(\"socket.io\")(server, {\n  pingTimeout: 1000,\n  cors: {\n    origin: \"http://localhost:8080\",\n    methods: [\"GET\", \"POST\"]\n  }\n}); // localhost:3000 서버에 접속하면 client로 메세지 전송\n\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello\");\n}); //connection event handler\n\nio.on(\"connection\", socket => {\n  // client로부터의 메시지가 수신되면\n  socket.on(\"chat\", data => {\n    console.log(`Message from ${data.name}: ${data.msg}`);\n    let msg = {\n      from: {\n        name: data.name,\n        avatar: data.avatar\n      },\n      msg: data.msg\n    }; // 메시지를 전송한 client를 제외한 모든 client에게 메시지를 전송한다\n\n    socket.broadcast.emit(\"chat\", msg);\n  });\n  socket.on(\"disconnect\", () => {\n    console.log(`user disconnected: ${socket.name}`);\n  });\n});\nserver.listen(3000);","map":{"version":3,"names":["app","require","server","createServer","io","pingTimeout","cors","origin","methods","get","req","res","send","on","socket","data","console","log","name","msg","from","avatar","broadcast","emit","listen"],"sources":["E:/web/alchemists_vue/alchemists/src/assets/script/game_server.js"],"sourcesContent":["const app = require(\"express\")();\r\nconst server = require(\"http\").createServer(app);\r\n// http server를 socket.io server로 upgrade\r\nconst io = require(\"socket.io\")(server, {\r\n  pingTimeout: 1000,\r\n  cors: {\r\n    origin: \"http://localhost:8080\",\r\n    methods: [\"GET\", \"POST\"],\r\n  },\r\n});\r\n\r\n// localhost:3000 서버에 접속하면 client로 메세지 전송\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Hello\");\r\n});\r\n\r\n//connection event handler\r\nio.on(\"connection\", (socket) => {\r\n  // client로부터의 메시지가 수신되면\r\n  socket.on(\"chat\", (data) => {\r\n    console.log(`Message from ${data.name}: ${data.msg}`);\r\n\r\n    let msg = {\r\n      from: {\r\n        name: data.name,\r\n        avatar: data.avatar,\r\n      },\r\n      msg: data.msg,\r\n    };\r\n\r\n    // 메시지를 전송한 client를 제외한 모든 client에게 메시지를 전송한다\r\n    socket.broadcast.emit(\"chat\", msg);\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(`user disconnected: ${socket.name}`);\r\n  });\r\n});\r\n\r\nserver.listen(3000);"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAP,EAAZ;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBE,YAAhB,CAA6BH,GAA7B,CAAf,C,CACA;;;AACA,MAAMI,EAAE,GAAGH,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAArB,EAA6B;EACtCG,WAAW,EAAE,IADyB;EAEtCC,IAAI,EAAE;IACJC,MAAM,EAAE,uBADJ;IAEJC,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR;EAFL;AAFgC,CAA7B,CAAX,C,CAQA;;;AACAR,GAAG,CAACS,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;EACzBA,GAAG,CAACC,IAAJ,CAAS,OAAT;AACD,CAFD,E,CAIA;;AACAR,EAAE,CAACS,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;EAC9B;EACAA,MAAM,CAACD,EAAP,CAAU,MAAV,EAAmBE,IAAD,IAAU;IAC1BC,OAAO,CAACC,GAAR,CAAa,gBAAeF,IAAI,CAACG,IAAK,KAAIH,IAAI,CAACI,GAAI,EAAnD;IAEA,IAAIA,GAAG,GAAG;MACRC,IAAI,EAAE;QACJF,IAAI,EAAEH,IAAI,CAACG,IADP;QAEJG,MAAM,EAAEN,IAAI,CAACM;MAFT,CADE;MAKRF,GAAG,EAAEJ,IAAI,CAACI;IALF,CAAV,CAH0B,CAW1B;;IACAL,MAAM,CAACQ,SAAP,CAAiBC,IAAjB,CAAsB,MAAtB,EAA8BJ,GAA9B;EACD,CAbD;EAeAL,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,MAAM;IAC5BG,OAAO,CAACC,GAAR,CAAa,sBAAqBH,MAAM,CAACI,IAAK,EAA9C;EACD,CAFD;AAGD,CApBD;AAsBAhB,MAAM,CAACsB,MAAP,CAAc,IAAd"},"metadata":{},"sourceType":"script"}