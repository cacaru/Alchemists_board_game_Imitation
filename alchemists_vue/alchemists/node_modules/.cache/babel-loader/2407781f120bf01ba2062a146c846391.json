{"ast":null,"code":"import { socket } from '@/components/game_lobby.vue';\nimport { default as modal_area } from '@/components/modal_area.vue';\nimport { default as personal_game_data } from '@/components/personal_game_data.vue';\nimport { default as personal_reasoning_table } from '@/components/reasoning_table.vue';\nexport default {\n  name: 'game_board',\n  components: {\n    modal_component: modal_area,\n    personal_game_data: personal_game_data,\n    personal_reasoning_table: personal_reasoning_table\n  },\n\n  created() {\n    // 게임 초기화 & 시작 트리거\n    socket.emit(\"created_data_announce\");\n  },\n\n  mounted() {\n    //최초 분배된 기본 재료 수령\n    socket.on(\"get_ingame_data\", data => {\n      this.user_data = data;\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].is_master === 'true') {\n          this.room_owner = data[i].user_name;\n        }\n\n        if (this.my_key == data[i].user_key) {\n          this.my_name = data[i].user_name;\n          this.my_color = data[i].user_color;\n        }\n      }\n\n      let msg = {\n        speaker: this.my_name,\n        msg: \"방에 입장하였습니다.\",\n        type: 'announce'\n      };\n      socket.emit(\"chat\", msg);\n    }); //채팅 on\n\n    socket.on(\"chat\", data => {\n      // console.log(\"서버에서 받아온 데이터\");\n      // console.log(data);\n      // console.log(\"받아오기 끝\");\n      switch (data.type) {\n        case \"announce\":\n          this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\n          break;\n\n        case \"normal\":\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\n          break;\n      } // 스크롤을 자동으로 내림\n\n\n      this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\n    }); // 선택할 수 있는 카드 공개\n\n    socket.on(\"ingredient_select_card_open\", data => {\n      //console.log(data);\n      this.ingredient_card_selected.card_1 = data[0];\n      this.ingredient_card_selected.card_2 = data[1];\n      this.ingredient_card_selected.card_3 = data[2];\n      this.ingredient_card_selected.card_4 = data[3];\n      this.ingredient_card_selected.card_5 = data[4];\n    }); // 변경된 게임 데이터를 받는 함수\n\n    socket.on(\"change_user_data\", data => {\n      this.user_data = data; //console.log(this.user_data);\n    }); // 변경된 final_round_order를 데이터를 받는 함수 \n\n    socket.on(\"change_final_round_order\", data => {\n      this.final_round_order = data; //console.log(this.final_round_order);\n    }); // 변경된 result_table : 추리 테이블 데이터를 받는 함수\n\n    socket.on(\"change_result_table\", data => {\n      this.result_table = data; //console.log(this.result_table);\n    }); // 몇 라운드 인지 받기\n\n    socket.on(\"change_round\", data => {\n      this.round_cont = data; // console.log(this.round_cont);\n    }); // 게임 순서를 정하는 순서의 정보 받는 함수\n\n    socket.on(\"round_order_setting_before\", data => {\n      //console.log(data);\n      let as = [];\n\n      for (let i = 0; i < data.length; i++) {\n        for (let j = 0; j < this.user_data.length; j++) {\n          if (data[i] == this.user_data[j].user_key) {\n            let choice_data = {\n              user_key: this.user_data[j].user_key,\n              user_name: this.user_data[j].user_name\n            };\n            as.push(choice_data);\n            choice_data = '';\n          }\n        }\n      }\n\n      this.round_setting_order = as; //console.log(this.round_setting_order[0].user_key);\n      //console.log(this.round_order[this.round_order_selecter].user_key);\n    }); // 게임 순서를 정하는 순서를 정하는 변수를 받는 함수 \n\n    socket.on(\"decide_round_setting_order_counter_send\", data => {\n      this.round_setting_order_counter = data;\n    }); // 라운드 진행 순서를 고른 정보를 받는 함수\n\n    socket.on(\"select_round_order_recive\", data => {\n      let btn_ele = '';\n      let btn_before_ele = '';\n\n      for (let i = 0; i < data.length; i++) {\n        // 순서에 맞는 element를 선택\n        switch (data[i].order) {\n          case 1:\n            btn_ele = this.$refs.btn_1;\n            break;\n\n          case 2:\n            btn_ele = this.$refs.btn_2;\n            break;\n\n          case 3:\n            btn_ele = this.$refs.btn_3;\n            break;\n\n          case 4:\n            btn_ele = this.$refs.btn_4;\n            break;\n\n          case 5:\n            btn_ele = this.$refs.btn_5;\n            break;\n\n          case 6:\n            btn_ele = this.$refs.btn_6;\n            break;\n\n          case 7:\n            btn_ele = this.$refs.btn_7;\n            break;\n\n          case 8:\n            btn_ele = this.$refs.btn_8;\n            break;\n        }\n\n        switch (data[i].before_order) {\n          case 1:\n            btn_before_ele = this.$refs.btn_1;\n            break;\n\n          case 2:\n            btn_before_ele = this.$refs.btn_2;\n            break;\n\n          case 3:\n            btn_before_ele = this.$refs.btn_3;\n            break;\n\n          case 4:\n            btn_before_ele = this.$refs.btn_4;\n            break;\n\n          case 5:\n            btn_before_ele = this.$refs.btn_5;\n            break;\n\n          case 6:\n            btn_before_ele = this.$refs.btn_6;\n            break;\n\n          case 7:\n            btn_before_ele = this.$refs.btn_7;\n            break;\n\n          case 8:\n            btn_before_ele = this.$refs.btn_8;\n            break;\n        } //console.log(btn_ele[0].className);\n        // 기존의 것이 있으면 기존 색 class 제거\n\n\n        if (btn_before_ele != '') {\n          let num = btn_before_ele[0].className.indexOf(data[i].user_color); // 문구 검색 결과가 있으면 제거 \n\n          if (num > 0) {\n            let str = btn_before_ele[0].className.substring(0, num - 1);\n            btn_before_ele[0].className = str;\n          } // 결과가 음수면 없는 것이므로 넘김\n\n        } // 기존의 것을 없앤 완전 초기화 상태이므로  기존의 것과 중복 되더라도 그냥 진행 가능\n        // 기존 : 5 신규 5 일 경우 위에서 이미 검사하지 않고 지웠으므로\n        // 신규 5를 다시 칠함\n        // 두 함수에서 모두 if로 구분하여 ifif중복하기 귀찮아서 그냥 무조건 지우고 무조건 색칠\n\n\n        if (btn_ele != '') {\n          btn_ele[0].className += ' ' + data[i].user_color; //console.log(btn_ele[0].className);\n        } // 변수 초기화\n\n\n        btn_before_ele = '';\n        btn_ele = '';\n      } // 내부 변수에도 값을 적용\n\n\n      this.final_round_order = data; //console.log(data);\n    }); // 라운드 진행 순서를 고르는 것이 끝났다는 알림을 받는 함수 \n\n    socket.on(\"decide_round_setting_order_end\", data => {\n      this.decide_order = !this.decide_order; // final_round_order을 고른 order에 맞게 재정렬한 값으로 재전송 받음\n\n      this.final_round_order = data;\n    }); // 판매하는 아티펙트 정보를 받는 함수\n\n    socket.on(\"can_buy_artifacts_list\", data => {\n      this.can_buy_artifacts = data;\n      console.log(this.can_buy_artifacts);\n    }); // 큐브 선택시 사용 가능 큐브가 없을 때\n\n    socket.on(\"cant_use_cube\", data => {\n      alert(data.say);\n    }); // 보드 순서 시작\n\n    socket.on(\"board_start\", start_board => {\n      // 모두 false로 만들고 선택된 보드만 true로 변경\n      this.board_1_selected = false;\n      this.board_2_selected = false;\n      this.board_3_selected = false;\n      this.board_4_selected = false;\n      this.board_5_selected = false;\n      this.board_6_selected = false;\n      this.board_7_selected = false;\n      this.board_8_selected = false; // 다른 보드 의 모달 끄기\n\n      this.sell_ingredient_modal_onoff = false;\n      this.board_order = 0;\n\n      switch (start_board) {\n        case 1:\n          //재료 선택\n          this.board_1_selected = true;\n          break;\n\n        case 2:\n          //재료 판매\n          this.board_2_selected = true;\n          this.sell_ingredient_modal_onoff = true;\n          break;\n\n        case 3:\n          // 용병에게 뭉약 판매\n          this.board_3_selected = true;\n          break;\n\n        case 4:\n          //아티펙트 구매\n          this.board_4_selected = true;\n          break;\n\n        case 5:\n          // 논문 반박\n          this.board_5_selected = true;\n          break;\n\n        case 6:\n          //논문 발표\n          this.board_6_selected = true;\n          break;\n\n        case 7:\n          //학생에게 실험\n          this.board_7_selected = true;\n          break;\n\n        case 8:\n          //교수에게 실험\n          this.board_8_selected = true;\n          break;\n\n        default:\n          console.log(\"start_board_val_err \" + start_board);\n          break;\n      } // 재료 판매 보드가 false 이면 모달을 끈다\n\n\n      if (this.board_2_selected == false) {\n        this.sell_ingredient_modal_onoff = false;\n      } // 선택되지 못한 보드가 눌렸을 경우 현재 선택된 보드만 누르게 경고를 띄워야함\n\n    }); //보드 진행 시 순서 관련 변수 업데이트\n\n    socket.on(\"change_board_order_val\", data => {\n      this.board_order = data.board_order;\n      this.board_cube_order = data.board_cube_order; // 보드 2번째( 재료판매 ) 순서 일 때 변수 입력\n\n      if (this.board_2_selected == true) {\n        if (this.final_round_order[this.board_order].user_key == this.my_key) {\n          this.my_selling_turn = true;\n        } else {\n          this.my_selling_turn = false;\n        }\n      }\n    });\n    socket.on(\"round_end\", () => {\n      // 모든 보드 포인터 끄기\n      this.board_1_selected = false;\n      this.board_2_selected = false;\n      this.board_3_selected = false;\n      this.board_4_selected = false;\n      this.board_5_selected = false;\n      this.board_6_selected = false;\n      this.board_7_selected = false;\n      this.board_8_selected = false; // overlay 켜서 다시 순서 정하기 시작\n    });\n    socket.on(\"test_ingredient_result\", data => {\n      console.log(data.test_result);\n    });\n  },\n\n  data() {\n    return {\n      user_data: '',\n      my_key: socket.id,\n      my_name: '',\n      my_color: '',\n      room_owner: '',\n      total_dicount_adventruer: 4,\n      textarea: '',\n      message: '',\n      ingredient_card_selected: {\n        card_1: '0',\n        card_2: '0',\n        card_3: '0',\n        card_4: '0',\n        card_5: '0'\n      },\n      // overlay\n      decide_order: false,\n      // overlay 완료버튼으로 나오는 modal\n      decide_order_modal: false,\n      // 현재 라운드\n      round_cont: 0,\n      // 라운드 순서를 정하는 순서 정보\n      round_setting_order: '',\n      // 라운드 순서를 정하는 순서 \n      round_setting_order_counter: 0,\n      // 해당 라운드의 순서 결정완료 후 순서\n      final_round_order: [],\n      // 라운드 준비 완료 확인 모달\n      round_order_check: false,\n      // 구매 가능한 아티펙트 변수\n      can_buy_artifacts: '',\n      // 재료조합 추리 및 결과 테이블\n      result_table: [],\n      // board 선택을 위한 변수 8개\n      board_1_selected: false,\n      board_2_selected: false,\n      board_3_selected: false,\n      board_4_selected: false,\n      board_5_selected: false,\n      board_6_selected: false,\n      board_7_selected: false,\n      board_8_selected: false,\n      // 매 보드마다 순서를 정할 변수\n      board_order: 0,\n      // 큐브 순서를 정할 변수\n      board_cube_order: 1,\n      // 2번째 보드 modal\n      sell_ingredient_modal_onoff: false,\n      // 2번쨰 보드의 현재 순서가 자신인지 확인하는 변수\n      my_selling_turn: false,\n      // 실험할 재료를 저장해둘 변수\n      test_ingredient_list: []\n    };\n  },\n\n  methods: {\n    use_chat: function () {\n      if (this.message !== '') {\n        let msg = {\n          speaker: this.my_name,\n          msg: this.message,\n          type: \"normal\"\n        }; //   console.log(\"서버에 보낼 데이터\");\n        //   console.log(msg);\n        //   console.log(\"보낼준비 끝\");\n\n        this.message = '';\n        socket.emit(\"chat\", msg);\n      }\n    },\n    draw_ingredient_card: function (cnt) {\n      let data = {\n        cnt: cnt,\n        my_key: this.my_key\n      };\n      socket.emit(\"draw_ingredient_card\", data);\n    },\n    // 인게임 라운드 진행 준비 완료를 알리는 함수\n    round_ready: function () {\n      this.round_order_check = true;\n    },\n    round_order_setting_end: function () {\n      this.round_order_check = false;\n      socket.emit(\"round_ready_on\", this.my_key);\n    },\n    round_order_setting_close: function () {\n      this.round_order_check = false;\n    },\n    // decide_order overlay의 완료 버튼\n    decide_order_modal_open: function () {\n      // 선택 순서에 따라 클릭 막기\n      if (this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key) {\n        alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\n        return;\n      }\n\n      this.decide_order_modal = !this.decide_order_modal;\n    },\n    // decide_order_modal 의 결정 버튼\n    decide_order_setting_end: function () {\n      let is_select_order = false;\n\n      for (let i = 0; i < this.final_round_order.length; i++) {\n        if (this.final_round_order[i].user_key == this.my_key) {\n          is_select_order = true;\n          break;\n        }\n      }\n\n      if (!is_select_order) {\n        alert(\"순서를 고르고 결정을 눌러주세요\");\n        this.decide_order_modal = false;\n        return;\n      } //위 if문에 안걸리면 선택한 순서가 있다는 것 이므로 진행\n      // 게임 결정 순서를 공유해야 하므로 서버에 값을 증가시키라고 전송\n\n\n      socket.emit(\"decide_round_setting_order_counter_incre\");\n      this.decide_order_modal = false;\n    },\n    select_order_btn: function (val) {\n      // 선택 순서에 따라 클릭 막기\n      if (this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key) {\n        alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\n        return;\n      } // 마지막 순서는 벌칙 존이므로 선택할 수 없다!\n\n\n      if (val == 8) {\n        alert(\"벌칙 존이라서 선택할 수 없습니다. 다른 순서를 선택해주세요.\");\n        return;\n      }\n\n      if (this.final_round_order != '') {\n        for (let i = 0; i < this.final_round_order.length; i++) {\n          if (this.final_round_order[i].user_key != this.my_key) {\n            if (val == this.final_round_order[i].order) {\n              alert(\"다른 사람이 선택한 순서는 선택 할 수 없습니다.\");\n              return;\n            }\n          }\n        }\n      }\n\n      let round_order_data = {\n        user_key: this.my_key,\n        order: val\n      }; // 버튼 선택 결과 전송\n\n      socket.emit(\"select_round_order\", round_order_data);\n    },\n    // 큐브로 순서를 선택할 때 반응\n    click_order_btn: function (n, u, user_key) {\n      if (user_key != this.my_key) {\n        alert(\"본인의 색으로 구분된 버튼만 골라주세요!\");\n        return;\n      } // 라운드가 진행중이면 클릭되선 안됨\n\n\n      for (let i = 0; i < this.user_data.length; i++) {\n        if (this.user_data[i].user_key == this.my_key) {\n          if (this.user_data[i].is_ingame == true) {\n            alert(\"라운드 진행 중에는 클릭 할 수 없습니다!\");\n            return;\n          }\n        }\n      } // 1라운드에는 용병에게 물약 판매 / 논문 발표 / 반박을 할 수 없다\n\n\n      if (this.round_cont == 1 && (n == 2 || n == 4 || n == 5)) {\n        alert(\"1라운드에는 해당 보드의 행동을 할 수 없습니다!\\n 다른 보드를 선택해주세요\");\n        return;\n      } // n :: final_round_order[유저].user_cube_data[n] :: 보드 번호\n      // u :: final_round_order[유저].user_cube_data[n][u] :: 보드 의 큐브 번호\n\n\n      let send_data = {\n        user_key: user_key,\n        cube_round_order_num: n,\n        button_order_num: u\n      }; //console.log(send_data);\n      //버튼 선택 결과 전송\n\n      socket.emit(\"select_cube\", send_data);\n    },\n    // 추리테이블 눌렀을 때 반응\n    click_reasoning_ele: function (data) {\n      let reasoning_data = {\n        user_key: this.my_key,\n        x: data.x,\n        y: data.y,\n        change_val: data.change_val\n      };\n      socket.emit(\"reasoning_table_change\", reasoning_data); //console.log(reasoning_data);\n    },\n    // 재료카드 선택 이벤트\n    pick_ingredient: function (data, index) {\n      if (this.board_1_selected == false || this.final_round_order[this.board_order].user_key != this.my_key) {\n        alert(\"아직 재료를 고를 수 없습니다.\");\n        return;\n      } // 재룤 카드 선택 이벤트는 무조건 0번에 존재하므로 \n\n\n      if (this.final_round_order[this.board_order].user_cube_data[0][this.board_cube_order].is_select == true && this.final_round_order[this.board_order].user_key == this.my_key) {\n        switch (index) {\n          case \"card_1\":\n            index = 0;\n            break;\n\n          case \"card_2\":\n            index = 1;\n            break;\n\n          case \"card_3\":\n            index = 2;\n            break;\n\n          case \"card_4\":\n            index = 3;\n            break;\n\n          case \"card_5\":\n            index = 4;\n            break;\n        } // 위의 변수를 뚫고 내려오면 현재 내가 고를 상태가 맞는것\n\n\n        let send_data = {\n          user_key: this.my_key,\n          pick_item: data,\n          cube_order: this.board_cube_order,\n          board_order: this.board_order,\n          ingredient_select_arr_order: index\n        }; //console.log(send_data);\n\n        socket.emit(\"pick_ingredient\", send_data);\n      }\n    },\n    // 판매 재료카드 선택 이벤트\n    click_sell_ingredient_check: function (name, user_key) {\n      let num = -1; // 원래 선택되어 있는지 확인하고 전부 해제 \n\n      for (let i = 0; i < this.user_data.length; i++) {\n        if (this.user_data[i].user_key == user_key) {\n          if (this.user_data[i].user_ingame_data.ingredient.card_1 > 0) {\n            num = this.$refs.sell_card_1[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_1[0].className.substring(0, num - 1);\n              this.$refs.sell_card_1[0].className = str;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_2 > 0) {\n            num = this.$refs.sell_card_2[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_2[0].className.substring(0, num - 1);\n              this.$refs.sell_card_2[0].className = str;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_3 > 0) {\n            num = this.$refs.sell_card_3[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_3[0].className.substring(0, num - 1);\n              this.$refs.sell_card_3[0].className = str;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_4 > 0) {\n            num = this.$refs.sell_card_4[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_4[0].className.substring(0, num - 1);\n              this.$refs.sell_card_4[0].className = str;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_5 > 0) {\n            num = this.$refs.sell_card_5[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_5[0].className.substring(0, num - 1);\n              this.$refs.sell_card_5[0].className = str;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_6 > 0) {\n            num = this.$refs.sell_card_6[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_6[0].className.substring(0, num - 1);\n              this.$refs.sell_card_6[0].className = str;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_7 > 0) {\n            num = this.$refs.sell_card_7[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_7[0].className.substring(0, num - 1);\n              this.$refs.sell_card_7[0].className = str;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_8 > 0) {\n            num = this.$refs.sell_card_8[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              let str = this.$refs.sell_card_8[0].className.substring(0, num - 1);\n              this.$refs.sell_card_8[0].className = str;\n            }\n          }\n\n          break;\n        }\n      } // 전부 해제한 후 선택한 것을 선택표시\n\n\n      let ref_str = '';\n\n      switch (name) {\n        case 'card_1':\n          ref_str = this.$refs.sell_card_1;\n          break;\n\n        case 'card_2':\n          ref_str = this.$refs.sell_card_2;\n          break;\n\n        case 'card_3':\n          ref_str = this.$refs.sell_card_3;\n          break;\n\n        case 'card_4':\n          ref_str = this.$refs.sell_card_4;\n          break;\n\n        case 'card_5':\n          ref_str = this.$refs.sell_card_5;\n          break;\n\n        case 'card_6':\n          ref_str = this.$refs.sell_card_6;\n          break;\n\n        case 'card_7':\n          ref_str = this.$refs.sell_card_7;\n          break;\n\n        case 'card_8':\n          ref_str = this.$refs.sell_card_8;\n          break;\n      }\n\n      ref_str[0].className += \" sell_border\";\n    },\n    // 재료 판매 이벤트\n    click_sell_ingredient: function () {\n      let num = -1;\n      let sell_item_num = 0; // 선택된 것을 확인하고 번호를 저장\n      // 반드시 한 카드의 클래스에먼 sell_border가 있을것이므로 가능\n\n      for (let i = 0; i < this.user_data.length; i++) {\n        if (this.user_data[i].user_key == this.my_key) {\n          if (this.user_data[i].user_ingame_data.ingredient.card_1 > 0) {\n            num = this.$refs.sell_card_1[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 1;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_2 > 0) {\n            num = this.$refs.sell_card_2[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 2;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_3 > 0) {\n            num = this.$refs.sell_card_3[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 3;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_4 > 0) {\n            num = this.$refs.sell_card_4[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 4;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_5 > 0) {\n            num = this.$refs.sell_card_5[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 5;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_6 > 0) {\n            num = this.$refs.sell_card_6[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 6;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_7 > 0) {\n            num = this.$refs.sell_card_7[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 7;\n            }\n          }\n\n          if (this.user_data[i].user_ingame_data.ingredient.card_8 > 0) {\n            num = this.$refs.sell_card_8[0].className.indexOf('sell_border');\n\n            if (num > 0) {\n              sell_item_num = 8;\n            }\n          }\n\n          break;\n        }\n      } //판매할 데이터를 묶어 보냄\n\n\n      let send_data = {\n        user_key: this.my_key,\n        sell_item_num: sell_item_num,\n        board_order: this.board_order,\n        cube_order: this.board_cube_order\n      }; //console.log(send_data);\n\n      socket.emit(\"sell_item_confirm\", send_data);\n    },\n    // 아티팩트 구매 가능 여부 확인 및 구매\n    buy_artifact_confirm: function (data) {\n      if (this.final_round_order[this.board_order].user_key != this.my_key || this.board_4_selected == false) {\n        alert(\"자신의 순서에만 구매할 수 있습니다\\n큐브를 두고 해당 보드의 순서가 되면 구매해 주세요\");\n        return;\n      }\n\n      let send_data = {\n        board_order: this.board_order,\n        cube_order: this.board_cube_order,\n        rank: data.rank,\n        arti_num: data.num,\n        user_key: this.my_key\n      };\n      socket.emit(\"buy_artifact_confirm\", send_data);\n    },\n    click_test_ingredient_check: function (name) {\n      // 이미 2가지가 선택되어 있으면 가장 먼저 들어온 1개를 제거하고 마지막에 들어온 한개를 진행\n      if (this.test_ingredient_list.length == 2) {\n        // 먼저 들어온 1개를 제거\n        let before_name = this.test_ingredient_list.shift();\n        let num = 0;\n\n        switch (before_name) {\n          case 'card_1':\n            num = this.$refs.test_card_1[0].className.indexOf('test_border');\n            this.$refs.test_card_1[0].className = this.$refs.test_card_1[0].className.substring(0, num - 1);\n            break;\n\n          case 'card_2':\n            num = this.$refs.test_card_2[0].className.indexOf('test_border');\n            this.$refs.test_card_2[0].className = this.$refs.test_card_2[0].className.substring(0, num - 1);\n            break;\n\n          case 'card_3':\n            num = this.$refs.test_card_3[0].className.indexOf('test_border');\n            this.$refs.test_card_3[0].className = this.$refs.test_card_3[0].className.substring(0, num - 1);\n            break;\n\n          case 'card_4':\n            num = this.$refs.test_card_4[0].className.indexOf('test_border');\n            this.$refs.test_card_4[0].className = this.$refs.test_card_4[0].className.substring(0, num - 1);\n            break;\n\n          case 'card_5':\n            num = this.$refs.test_card_5[0].className.indexOf('test_border');\n            this.$refs.test_card_5[0].className = this.$refs.test_card_5[0].className.substring(0, num - 1);\n            break;\n\n          case 'card_6':\n            num = this.$refs.test_card_6[0].className.indexOf('test_border');\n            this.$refs.test_card_6[0].className = this.$refs.test_card_6[0].className.substring(0, num - 1);\n            break;\n\n          case 'card_7':\n            num = this.$refs.test_card_7[0].className.indexOf('test_border');\n            this.$refs.test_card_7[0].className = this.$refs.test_card_7[0].className.substring(0, num - 1);\n            break;\n\n          case 'card_8':\n            num = this.$refs.test_card_8[0].className.indexOf('test_border');\n            this.$refs.test_card_8[0].className = this.$refs.test_card_8[0].className.substring(0, num - 1);\n            break;\n        }\n      } // 변수에 추가\n\n\n      this.test_ingredient_list.push(name);\n      let ref_str = '';\n\n      switch (name) {\n        case 'card_1':\n          ref_str = this.$refs.sell_card_1;\n          break;\n\n        case 'card_2':\n          ref_str = this.$refs.sell_card_2;\n          break;\n\n        case 'card_3':\n          ref_str = this.$refs.sell_card_3;\n          break;\n\n        case 'card_4':\n          ref_str = this.$refs.sell_card_4;\n          break;\n\n        case 'card_5':\n          ref_str = this.$refs.sell_card_5;\n          break;\n\n        case 'card_6':\n          ref_str = this.$refs.sell_card_6;\n          break;\n\n        case 'card_7':\n          ref_str = this.$refs.sell_card_7;\n          break;\n\n        case 'card_8':\n          ref_str = this.$refs.sell_card_8;\n          break;\n      }\n\n      ref_str[0].className += \" test_border\";\n    }\n  },\n  click_test_ingredient: function () {\n    if (this.test_ingredient_list.length != 2) {\n      alert(\"재료카드를 2장 선택해주세요!!!\");\n      return;\n    } // test_ingredient_list의 길이가 2이면 서버에게 보내고\n    // 고른 재료 차감 / 변수 초기화 / 결과는 모두에게 전송\n    // / -> 유물 카드 에 따른 효과 발동 할 부분 추가할 것 계산\n    else {\n      let board_is = 0;\n\n      if (this.board_7_selected == true) {\n        board_is = 7;\n      } else if (this.board_8_selected == true) {\n        board_is = 8;\n      }\n\n      let send_data = {\n        user_key: this.my_key,\n        card_list: this.test_ingredient_list,\n        board_order: this.board_order,\n        cube_order: this.board_cube_order,\n        stu: true,\n        pro: false,\n        board_is: board_is\n      };\n      socket.emit(\"test_ingredient_confirm\", send_data);\n    }\n  }\n};","map":{"version":3,"names":["socket","default","modal_area","personal_game_data","personal_reasoning_table","name","components","modal_component","created","emit","mounted","on","data","user_data","i","length","is_master","room_owner","user_name","my_key","user_key","my_name","my_color","user_color","msg","speaker","type","textarea","$refs","show_chat","scrollTop","scrollHeight","ingredient_card_selected","card_1","card_2","card_3","card_4","card_5","final_round_order","result_table","round_cont","as","j","choice_data","push","round_setting_order","round_setting_order_counter","btn_ele","btn_before_ele","order","btn_1","btn_2","btn_3","btn_4","btn_5","btn_6","btn_7","btn_8","before_order","num","className","indexOf","str","substring","decide_order","can_buy_artifacts","console","log","alert","say","start_board","board_1_selected","board_2_selected","board_3_selected","board_4_selected","board_5_selected","board_6_selected","board_7_selected","board_8_selected","sell_ingredient_modal_onoff","board_order","board_cube_order","my_selling_turn","test_result","id","total_dicount_adventruer","message","decide_order_modal","round_order_check","test_ingredient_list","methods","use_chat","draw_ingredient_card","cnt","round_ready","round_order_setting_end","round_order_setting_close","decide_order_modal_open","decide_order_setting_end","is_select_order","select_order_btn","val","round_order_data","click_order_btn","n","u","is_ingame","send_data","cube_round_order_num","button_order_num","click_reasoning_ele","reasoning_data","x","y","change_val","pick_ingredient","index","user_cube_data","is_select","pick_item","cube_order","ingredient_select_arr_order","click_sell_ingredient_check","user_ingame_data","ingredient","sell_card_1","sell_card_2","sell_card_3","sell_card_4","sell_card_5","card_6","sell_card_6","card_7","sell_card_7","card_8","sell_card_8","ref_str","click_sell_ingredient","sell_item_num","buy_artifact_confirm","rank","arti_num","click_test_ingredient_check","before_name","shift","test_card_1","test_card_2","test_card_3","test_card_4","test_card_5","test_card_6","test_card_7","test_card_8","click_test_ingredient","board_is","card_list","stu","pro"],"sources":["E:/GitHub/personal_tranning/alchemists_vue/alchemists/src/assets/script/game_board.js"],"sourcesContent":["import { socket } from '@/components/game_lobby.vue'\r\nimport { default as modal_area } from '@/components/modal_area.vue'\r\nimport { default as personal_game_data } from '@/components/personal_game_data.vue' \r\nimport { default as personal_reasoning_table } from '@/components/reasoning_table.vue'\r\n\r\nexport default {\r\n    name : 'game_board',\r\n    components : {\r\n        modal_component : modal_area,\r\n        personal_game_data : personal_game_data,\r\n        personal_reasoning_table : personal_reasoning_table,\r\n    },\r\n    created() {\r\n        // 게임 초기화 & 시작 트리거\r\n        socket.emit(\"created_data_announce\");\r\n    },\r\n    mounted () {\r\n         //최초 분배된 기본 재료 수령\r\n         socket.on(\"get_ingame_data\", (data) => {\r\n            this.user_data = data;\r\n            for(let i = 0; i < data.length; i++){\r\n                if( data[i].is_master === 'true' ) {\r\n                    this.room_owner = data[i].user_name;\r\n                }\r\n                if( this.my_key == data[i].user_key ){\r\n                    this.my_name = data[i].user_name;\r\n                    this.my_color = data[i].user_color;\r\n                }\r\n            }\r\n\r\n            let msg = {\r\n                speaker : this.my_name,\r\n                msg     : \"방에 입장하였습니다.\",\r\n                type    : 'announce',\r\n            }\r\n            socket.emit(\"chat\", msg);\r\n        });\r\n\r\n        //채팅 on\r\n        socket.on(\"chat\", (data) => {\r\n            // console.log(\"서버에서 받아온 데이터\");\r\n            // console.log(data);\r\n            // console.log(\"받아오기 끝\");\r\n            switch ( data.type ) {\r\n                case \"announce\" :\r\n                    this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\r\n                    break;\r\n                case \"normal\" :\r\n                    this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\r\n                    break;\r\n            }\r\n            // 스크롤을 자동으로 내림\r\n            this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\r\n        });\r\n\r\n        // 선택할 수 있는 카드 공개\r\n        socket.on(\"ingredient_select_card_open\", (data) => {\r\n            //console.log(data);\r\n            this.ingredient_card_selected.card_1 = data[0];\r\n            this.ingredient_card_selected.card_2 = data[1];\r\n            this.ingredient_card_selected.card_3 = data[2];\r\n            this.ingredient_card_selected.card_4 = data[3];\r\n            this.ingredient_card_selected.card_5 = data[4];\r\n        });\r\n\r\n        // 변경된 게임 데이터를 받는 함수\r\n        socket.on(\"change_user_data\", (data) => {\r\n            this.user_data = data;\r\n            //console.log(this.user_data);\r\n        });\r\n        // 변경된 final_round_order를 데이터를 받는 함수 \r\n        socket.on(\"change_final_round_order\", (data) => {\r\n            this.final_round_order = data;\r\n            //console.log(this.final_round_order);\r\n        });\r\n\r\n        // 변경된 result_table : 추리 테이블 데이터를 받는 함수\r\n        socket.on(\"change_result_table\", (data) => {\r\n            this.result_table = data;\r\n            //console.log(this.result_table);\r\n        });\r\n\r\n        // 몇 라운드 인지 받기\r\n        socket.on(\"change_round\", (data) => {\r\n            this.round_cont = data;\r\n            // console.log(this.round_cont);\r\n        });\r\n\r\n        // 게임 순서를 정하는 순서의 정보 받는 함수\r\n        socket.on(\"round_order_setting_before\" , (data) => {\r\n            //console.log(data);\r\n            let as = [];\r\n\r\n            for( let i = 0; i < data.length; i++) {\r\n                for( let j = 0; j < this.user_data.length; j++){\r\n                    if( data[i] == this.user_data[j].user_key ){\r\n\r\n                        let choice_data = {\r\n                            user_key  : this.user_data[j].user_key,\r\n                            user_name : this.user_data[j].user_name,\r\n                        }\r\n                        \r\n                        as.push(choice_data);\r\n                        \r\n                        choice_data = '';\r\n                    }\r\n                }\r\n            }\r\n            this.round_setting_order = as;\r\n            //console.log(this.round_setting_order[0].user_key);\r\n            //console.log(this.round_order[this.round_order_selecter].user_key);\r\n        });\r\n\r\n        // 게임 순서를 정하는 순서를 정하는 변수를 받는 함수 \r\n        socket.on(\"decide_round_setting_order_counter_send\", (data) => {\r\n            this.round_setting_order_counter = data;\r\n        });\r\n\r\n        // 라운드 진행 순서를 고른 정보를 받는 함수\r\n        socket.on(\"select_round_order_recive\", (data) => {\r\n            let btn_ele = '';\r\n            let btn_before_ele = '';\r\n            \r\n            for( let i = 0; i < data.length; i++){\r\n                 // 순서에 맞는 element를 선택\r\n                switch(data[i].order) {\r\n                    case 1 : \r\n                        btn_ele = this.$refs.btn_1;\r\n                        break;\r\n                    case 2 :\r\n                        btn_ele = this.$refs.btn_2;\r\n                        break;\r\n                    case 3 :\r\n                        btn_ele = this.$refs.btn_3;\r\n                        break;\r\n                    case 4 : \r\n                        btn_ele = this.$refs.btn_4;\r\n                        break;\r\n                    case 5 :\r\n                        btn_ele = this.$refs.btn_5;\r\n                        break;\r\n                    case 6 :\r\n                        btn_ele = this.$refs.btn_6;\r\n                        break;\r\n                    case 7 :\r\n                        btn_ele = this.$refs.btn_7;\r\n                        break;\r\n                    case 8 :\r\n                        btn_ele = this.$refs.btn_8;\r\n                        break;\r\n                }\r\n                switch( data[i].before_order ){\r\n                    case 1 : \r\n                        btn_before_ele = this.$refs.btn_1;\r\n                        break;\r\n                    case 2 :\r\n                        btn_before_ele = this.$refs.btn_2;\r\n                        break;\r\n                    case 3 :\r\n                        btn_before_ele = this.$refs.btn_3;\r\n                        break;\r\n                    case 4 : \r\n                        btn_before_ele = this.$refs.btn_4;\r\n                        break;\r\n                    case 5 :\r\n                        btn_before_ele = this.$refs.btn_5;\r\n                        break;\r\n                    case 6 :\r\n                        btn_before_ele = this.$refs.btn_6;\r\n                        break;\r\n                    case 7 :\r\n                        btn_before_ele = this.$refs.btn_7;\r\n                        break;\r\n                    case 8 :\r\n                        btn_before_ele = this.$refs.btn_8;\r\n                        break;\r\n                }\r\n                //console.log(btn_ele[0].className);\r\n                // 기존의 것이 있으면 기존 색 class 제거\r\n                if( btn_before_ele != '' ){\r\n\r\n                    let num = btn_before_ele[0].className.indexOf(data[i].user_color);\r\n                    // 문구 검색 결과가 있으면 제거 \r\n                    if ( num > 0 ){\r\n                        let str = btn_before_ele[0].className.substring(0, num-1);\r\n                        btn_before_ele[0].className = str;\r\n                    }\r\n                    // 결과가 음수면 없는 것이므로 넘김\r\n                }\r\n\r\n                // 기존의 것을 없앤 완전 초기화 상태이므로  기존의 것과 중복 되더라도 그냥 진행 가능\r\n                // 기존 : 5 신규 5 일 경우 위에서 이미 검사하지 않고 지웠으므로\r\n                // 신규 5를 다시 칠함\r\n                // 두 함수에서 모두 if로 구분하여 ifif중복하기 귀찮아서 그냥 무조건 지우고 무조건 색칠\r\n                if( btn_ele != '' ){\r\n                    btn_ele[0].className += ' ' + data[i].user_color;\r\n                    //console.log(btn_ele[0].className);\r\n                }\r\n                // 변수 초기화\r\n                btn_before_ele = '';\r\n                btn_ele = '';\r\n\r\n            }\r\n            // 내부 변수에도 값을 적용\r\n            this.final_round_order = data;\r\n            //console.log(data);\r\n        });\r\n\r\n        // 라운드 진행 순서를 고르는 것이 끝났다는 알림을 받는 함수 \r\n        socket.on(\"decide_round_setting_order_end\", (data) => {\r\n            this.decide_order = !this.decide_order;\r\n            // final_round_order을 고른 order에 맞게 재정렬한 값으로 재전송 받음\r\n            this.final_round_order = data;\r\n        });\r\n\r\n        // 판매하는 아티펙트 정보를 받는 함수\r\n        socket.on(\"can_buy_artifacts_list\", (data) => {\r\n            this.can_buy_artifacts = data;\r\n            console.log(this.can_buy_artifacts);\r\n        });\r\n\r\n        // 큐브 선택시 사용 가능 큐브가 없을 때\r\n        socket.on(\"cant_use_cube\", (data) => {\r\n            alert(data.say);\r\n        });\r\n\r\n        // 보드 순서 시작\r\n        socket.on(\"board_start\", (start_board) => {\r\n            // 모두 false로 만들고 선택된 보드만 true로 변경\r\n            this.board_1_selected = false;\r\n            this.board_2_selected = false;\r\n            this.board_3_selected = false;\r\n            this.board_4_selected = false;\r\n            this.board_5_selected = false;\r\n            this.board_6_selected = false;\r\n            this.board_7_selected = false;\r\n            this.board_8_selected = false;\r\n            // 다른 보드 의 모달 끄기\r\n            this.sell_ingredient_modal_onoff = false;\r\n            this.board_order = 0;\r\n            switch(start_board) {\r\n                case 1 : \r\n                    //재료 선택\r\n                    this.board_1_selected = true;\r\n                    break;\r\n                case 2 : \r\n                    //재료 판매\r\n                    this.board_2_selected = true;\r\n                    this.sell_ingredient_modal_onoff = true;\r\n                    break;\r\n                case 3 :\r\n                    // 용병에게 뭉약 판매\r\n                    this.board_3_selected = true;\r\n                    break;\r\n                case 4 : \r\n                    //아티펙트 구매\r\n                    this.board_4_selected = true;\r\n                    break;\r\n                case 5 :\r\n                    // 논문 반박\r\n                    this.board_5_selected = true;\r\n                    break;\r\n                case 6 :\r\n                    //논문 발표\r\n                    this.board_6_selected = true; \r\n                    break;\r\n                case 7 :\r\n                    //학생에게 실험\r\n                    this.board_7_selected = true;\r\n                    break;\r\n                case 8 :\r\n                    //교수에게 실험\r\n                    this.board_8_selected = true;\r\n                    break;\r\n                default:\r\n                    console.log(\"start_board_val_err \" + start_board);\r\n                    break;\r\n            }\r\n            \r\n            // 재료 판매 보드가 false 이면 모달을 끈다\r\n            if( this.board_2_selected == false){\r\n                this.sell_ingredient_modal_onoff = false;\r\n            }\r\n            // 선택되지 못한 보드가 눌렸을 경우 현재 선택된 보드만 누르게 경고를 띄워야함\r\n\r\n        });\r\n        \r\n        //보드 진행 시 순서 관련 변수 업데이트\r\n        socket.on(\"change_board_order_val\", (data) => {            \r\n            this.board_order = data.board_order;\r\n            this.board_cube_order = data.board_cube_order;\r\n\r\n            // 보드 2번째( 재료판매 ) 순서 일 때 변수 입력\r\n            if( this.board_2_selected == true ){\r\n                if( this.final_round_order[this.board_order].user_key == this.my_key ){\r\n                    this.my_selling_turn = true;\r\n                }else {\r\n                    this.my_selling_turn = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        socket.on(\"round_end\", () => {\r\n            // 모든 보드 포인터 끄기\r\n            this.board_1_selected = false;\r\n            this.board_2_selected = false;\r\n            this.board_3_selected = false;\r\n            this.board_4_selected = false;\r\n            this.board_5_selected = false;\r\n            this.board_6_selected = false;\r\n            this.board_7_selected = false;\r\n            this.board_8_selected = false;\r\n            \r\n            // overlay 켜서 다시 순서 정하기 시작\r\n        });\r\n\r\n        socket.on(\"test_ingredient_result\", (data) => {\r\n            console.log(data.test_result);\r\n        });\r\n\r\n    },\r\n    data() {\r\n        return  {\r\n            user_data : '', \r\n            my_key : socket.id,\r\n            my_name : '',\r\n            my_color : '',\r\n            room_owner : '',\r\n            total_dicount_adventruer : 4,\r\n            textarea : '',\r\n            message : '',\r\n            ingredient_card_selected : {\r\n                card_1 : '0',\r\n                card_2 : '0',\r\n                card_3 : '0',\r\n                card_4 : '0',\r\n                card_5 : '0',\r\n            },\r\n            // overlay\r\n            decide_order : false,\r\n            // overlay 완료버튼으로 나오는 modal\r\n            decide_order_modal : false,\r\n            // 현재 라운드\r\n            round_cont : 0,\r\n            // 라운드 순서를 정하는 순서 정보\r\n            round_setting_order : '',\r\n            // 라운드 순서를 정하는 순서 \r\n            round_setting_order_counter : 0,\r\n            // 해당 라운드의 순서 결정완료 후 순서\r\n            final_round_order : [],\r\n            // 라운드 준비 완료 확인 모달\r\n            round_order_check : false,\r\n            // 구매 가능한 아티펙트 변수\r\n            can_buy_artifacts : '',\r\n            // 재료조합 추리 및 결과 테이블\r\n            result_table : [],\r\n            // board 선택을 위한 변수 8개\r\n            board_1_selected :false,\r\n            board_2_selected :false,\r\n            board_3_selected :false,\r\n            board_4_selected :false,\r\n            board_5_selected :false,\r\n            board_6_selected :false,\r\n            board_7_selected :false,\r\n            board_8_selected :false,\r\n            // 매 보드마다 순서를 정할 변수\r\n            board_order : 0,\r\n            // 큐브 순서를 정할 변수\r\n            board_cube_order : 1,\r\n            // 2번째 보드 modal\r\n            sell_ingredient_modal_onoff : false,\r\n            // 2번쨰 보드의 현재 순서가 자신인지 확인하는 변수\r\n            my_selling_turn : false,\r\n            // 실험할 재료를 저장해둘 변수\r\n            test_ingredient_list : [],\r\n        }\r\n    },\r\n\r\n    methods : {\r\n        use_chat : function(){\r\n            if( this.message !== '' ){\r\n              let msg = {\r\n                speaker : this.my_name,\r\n                msg : this.message,\r\n                type : \"normal\"\r\n              }\r\n            //   console.log(\"서버에 보낼 데이터\");\r\n            //   console.log(msg);\r\n            //   console.log(\"보낼준비 끝\");\r\n              this.message = '';\r\n              socket.emit(\"chat\", msg);\r\n            }\r\n        },\r\n\r\n        draw_ingredient_card : function(cnt) {\r\n            let data = {\r\n                cnt : cnt,\r\n                my_key : this.my_key,\r\n            }\r\n            socket.emit(\"draw_ingredient_card\", data);\r\n        },\r\n\r\n        // 인게임 라운드 진행 준비 완료를 알리는 함수\r\n        round_ready : function() {\r\n            this.round_order_check = true;\r\n        },\r\n\r\n        round_order_setting_end : function() {\r\n            this.round_order_check = false;\r\n            socket.emit(\"round_ready_on\", this.my_key);\r\n        },\r\n        round_order_setting_close : function() {\r\n            this.round_order_check = false;\r\n        },\r\n\r\n        // decide_order overlay의 완료 버튼\r\n        decide_order_modal_open : function() {\r\n            // 선택 순서에 따라 클릭 막기\r\n            if( this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key){\r\n                alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\r\n                return;\r\n            }\r\n            this.decide_order_modal = !this.decide_order_modal;\r\n        },\r\n        \r\n        // decide_order_modal 의 결정 버튼\r\n        decide_order_setting_end : function() {\r\n            \r\n            let is_select_order = false;\r\n\r\n            for( let i = 0; i < this.final_round_order.length; i++){\r\n                if( this.final_round_order[i].user_key == this.my_key ){\r\n                    is_select_order = true;\r\n                    break;\r\n                }\r\n            }\r\n            if( !is_select_order ) {\r\n                alert(\"순서를 고르고 결정을 눌러주세요\");\r\n                this.decide_order_modal = false;\r\n                return;\r\n            }\r\n            //위 if문에 안걸리면 선택한 순서가 있다는 것 이므로 진행\r\n            // 게임 결정 순서를 공유해야 하므로 서버에 값을 증가시키라고 전송\r\n            socket.emit(\"decide_round_setting_order_counter_incre\");\r\n            this.decide_order_modal = false;\r\n        },\r\n\r\n        select_order_btn : function(val){\r\n            // 선택 순서에 따라 클릭 막기\r\n            if( this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key){\r\n                alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\r\n                return;\r\n            }\r\n\r\n            // 마지막 순서는 벌칙 존이므로 선택할 수 없다!\r\n            if( val == 8 ){\r\n                alert(\"벌칙 존이라서 선택할 수 없습니다. 다른 순서를 선택해주세요.\");\r\n                return;\r\n            }\r\n            \r\n            if( this.final_round_order != '' ){\r\n                for( let i = 0; i < this.final_round_order.length; i++ ){\r\n                    if( this.final_round_order[i].user_key != this.my_key ){\r\n                        if( val == this.final_round_order[i].order) {\r\n                            alert(\"다른 사람이 선택한 순서는 선택 할 수 없습니다.\");\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let round_order_data = {\r\n                user_key : this.my_key,\r\n                order : val\r\n            };\r\n\r\n            // 버튼 선택 결과 전송\r\n            socket.emit(\"select_round_order\", round_order_data);\r\n        },\r\n\r\n        // 큐브로 순서를 선택할 때 반응\r\n        click_order_btn : function(n, u, user_key) {\r\n            if( user_key != this.my_key ){\r\n                alert(\"본인의 색으로 구분된 버튼만 골라주세요!\");\r\n                return;\r\n            }\r\n\r\n            // 라운드가 진행중이면 클릭되선 안됨\r\n            for( let i = 0; i < this.user_data.length; i++ ) {\r\n                if( this.user_data[i].user_key == this.my_key ){\r\n                    if( this.user_data[i].is_ingame == true ){\r\n                        alert(\"라운드 진행 중에는 클릭 할 수 없습니다!\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 1라운드에는 용병에게 물약 판매 / 논문 발표 / 반박을 할 수 없다\r\n            if( this.round_cont == 1 && ( n == 2 || n == 4 || n == 5 ) ){\r\n                alert(\"1라운드에는 해당 보드의 행동을 할 수 없습니다!\\n 다른 보드를 선택해주세요\");\r\n                return;\r\n            }\r\n\r\n            // n :: final_round_order[유저].user_cube_data[n] :: 보드 번호\r\n            // u :: final_round_order[유저].user_cube_data[n][u] :: 보드 의 큐브 번호\r\n            let send_data = {\r\n                user_key : user_key,\r\n                cube_round_order_num : n,\r\n                button_order_num : u,\r\n            }\r\n            //console.log(send_data);\r\n            //버튼 선택 결과 전송\r\n            socket.emit(\"select_cube\", send_data);\r\n        },\r\n\r\n        // 추리테이블 눌렀을 때 반응\r\n        click_reasoning_ele : function(data) {\r\n            let reasoning_data = {\r\n                user_key : this.my_key,\r\n                x : data.x,\r\n                y : data.y,\r\n                change_val : data.change_val\r\n            }\r\n            socket.emit(\"reasoning_table_change\", reasoning_data);\r\n            //console.log(reasoning_data);\r\n        },\r\n\r\n        // 재료카드 선택 이벤트\r\n        pick_ingredient : function(data, index) {\r\n            if( this.board_1_selected == false || this.final_round_order[this.board_order].user_key != this.my_key){\r\n                alert(\"아직 재료를 고를 수 없습니다.\")\r\n                return;\r\n            }\r\n            // 재룤 카드 선택 이벤트는 무조건 0번에 존재하므로 \r\n            if( this.final_round_order[this.board_order].user_cube_data[0][this.board_cube_order].is_select == true\r\n                && this.final_round_order[this.board_order].user_key == this.my_key )\r\n            {\r\n                switch(index){\r\n                    case \"card_1\" : \r\n                        index = 0;\r\n                        break;\r\n                    case \"card_2\" : \r\n                        index = 1;\r\n                        break;\r\n                    case \"card_3\" : \r\n                        index = 2;\r\n                        break;\r\n                    case \"card_4\" : \r\n                        index = 3;\r\n                        break;\r\n                    case \"card_5\" :\r\n                        index = 4; \r\n                        break;\r\n                }\r\n                // 위의 변수를 뚫고 내려오면 현재 내가 고를 상태가 맞는것\r\n                let send_data = {\r\n                    user_key : this.my_key,\r\n                    pick_item : data,\r\n                    cube_order : this.board_cube_order,\r\n                    board_order : this.board_order,\r\n                    ingredient_select_arr_order : index,\r\n                }\r\n\r\n                //console.log(send_data);\r\n                socket.emit(\"pick_ingredient\", send_data);\r\n            }\r\n            \r\n        },\r\n\r\n        // 판매 재료카드 선택 이벤트\r\n        click_sell_ingredient_check : function(name, user_key) {\r\n\r\n            let num = -1;\r\n            // 원래 선택되어 있는지 확인하고 전부 해제 \r\n            for(let i = 0; i < this.user_data.length; i++){\r\n                if( this.user_data[i].user_key == user_key ){\r\n                    if( this.user_data[i].user_ingame_data.ingredient.card_1 > 0 ){\r\n                        num = this.$refs.sell_card_1[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_1[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_1[0].className = str;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_2 > 0 ){\r\n                        num = this.$refs.sell_card_2[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_2[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_2[0].className = str;\r\n                        }       \r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_3 > 0 ){\r\n                        num = this.$refs.sell_card_3[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_3[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_3[0].className = str;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_4 > 0 ){\r\n                        num = this.$refs.sell_card_4[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_4[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_4[0].className = str;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_5 > 0 ){\r\n                        num = this.$refs.sell_card_5[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_5[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_5[0].className = str;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_6 > 0 ){\r\n                        num = this.$refs.sell_card_6[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_6[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_6[0].className = str;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_7 > 0 ){\r\n                        num = this.$refs.sell_card_7[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_7[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_7[0].className = str;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_8 > 0 ){\r\n                        num = this.$refs.sell_card_8[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            let str = this.$refs.sell_card_8[0].className.substring(0, num-1);\r\n                            this.$refs.sell_card_8[0].className = str;\r\n                        }\r\n                    }\r\n                    break;     \r\n                }\r\n            }\r\n            \r\n            // 전부 해제한 후 선택한 것을 선택표시\r\n            let ref_str = '';\r\n            switch(name){\r\n                case 'card_1':\r\n                    ref_str = this.$refs.sell_card_1;\r\n                    break;\r\n                case 'card_2':\r\n                    ref_str = this.$refs.sell_card_2;\r\n                    break;\r\n                case 'card_3':\r\n                    ref_str = this.$refs.sell_card_3;\r\n                    break;\r\n                case 'card_4':\r\n                    ref_str = this.$refs.sell_card_4;\r\n                    break;\r\n                case 'card_5':\r\n                    ref_str = this.$refs.sell_card_5;\r\n                    break;\r\n                case 'card_6':\r\n                    ref_str = this.$refs.sell_card_6;\r\n                    break;\r\n                case 'card_7':\r\n                    ref_str = this.$refs.sell_card_7;\r\n                    break;\r\n                case 'card_8':\r\n                    ref_str = this.$refs.sell_card_8;\r\n                    break;\r\n            }\r\n            ref_str[0].className += \" sell_border\";\r\n        },\r\n\r\n        // 재료 판매 이벤트\r\n        click_sell_ingredient : function() {\r\n            let num = -1;\r\n            let sell_item_num = 0;\r\n            // 선택된 것을 확인하고 번호를 저장\r\n            // 반드시 한 카드의 클래스에먼 sell_border가 있을것이므로 가능\r\n            for(let i = 0; i < this.user_data.length; i++){\r\n                if( this.user_data[i].user_key == this.my_key ){\r\n                    if( this.user_data[i].user_ingame_data.ingredient.card_1 > 0 ){\r\n                        num = this.$refs.sell_card_1[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 1;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_2 > 0 ){\r\n                        num = this.$refs.sell_card_2[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 2;\r\n                        }       \r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_3 > 0 ){\r\n                        num = this.$refs.sell_card_3[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 3;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_4 > 0 ){\r\n                        num = this.$refs.sell_card_4[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 4;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_5 > 0 ){\r\n                        num = this.$refs.sell_card_5[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 5;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_6 > 0 ){\r\n                        num = this.$refs.sell_card_6[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 6;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_7 > 0 ){\r\n                        num = this.$refs.sell_card_7[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 7;\r\n                        }\r\n                    }\r\n                    if ( this.user_data[i].user_ingame_data.ingredient.card_8 > 0 ){\r\n                        num = this.$refs.sell_card_8[0].className.indexOf('sell_border');\r\n                        if( num > 0 ) {\r\n                            sell_item_num = 8;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //판매할 데이터를 묶어 보냄\r\n            let send_data = {\r\n                user_key : this.my_key,\r\n                sell_item_num : sell_item_num,\r\n                board_order : this.board_order,\r\n                cube_order : this.board_cube_order,\r\n            }\r\n            //console.log(send_data);\r\n            socket.emit(\"sell_item_confirm\", send_data);\r\n        },\r\n\r\n        // 아티팩트 구매 가능 여부 확인 및 구매\r\n        buy_artifact_confirm : function( data ) {\r\n            if( this.final_round_order[this.board_order].user_key != this.my_key ||\r\n                this.board_4_selected == false \r\n                ){\r\n                alert(\"자신의 순서에만 구매할 수 있습니다\\n큐브를 두고 해당 보드의 순서가 되면 구매해 주세요\");\r\n                return;\r\n            }\r\n            let send_data = {\r\n                board_order : this.board_order,\r\n                cube_order : this.board_cube_order,\r\n                rank : data.rank,\r\n                arti_num : data.num,\r\n                user_key : this.my_key,\r\n            }\r\n\r\n            socket.emit(\"buy_artifact_confirm\", send_data);\r\n        },\r\n\r\n        click_test_ingredient_check : function(name){\r\n\r\n            // 이미 2가지가 선택되어 있으면 가장 먼저 들어온 1개를 제거하고 마지막에 들어온 한개를 진행\r\n            if( this.test_ingredient_list.length == 2){\r\n                // 먼저 들어온 1개를 제거\r\n                let before_name = this.test_ingredient_list.shift();\r\n                let num = 0;\r\n                switch(before_name) {\r\n                    case 'card_1' :\r\n                        num = this.$refs.test_card_1[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_1[0].className = this.$refs.test_card_1[0].className.substring(0, num-1);\r\n                        break;\r\n                    case 'card_2' :\r\n                        num = this.$refs.test_card_2[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_2[0].className = this.$refs.test_card_2[0].className.substring(0, num-1);\r\n                        break;\r\n                    case 'card_3' :\r\n                        num = this.$refs.test_card_3[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_3[0].className = this.$refs.test_card_3[0].className.substring(0, num-1);\r\n                        break;\r\n                    case 'card_4' :\r\n                        num = this.$refs.test_card_4[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_4[0].className = this.$refs.test_card_4[0].className.substring(0, num-1);\r\n                        break;\r\n                    case 'card_5' :\r\n                        num = this.$refs.test_card_5[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_5[0].className = this.$refs.test_card_5[0].className.substring(0, num-1);\r\n                        break;\r\n                    case 'card_6' :\r\n                        num = this.$refs.test_card_6[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_6[0].className = this.$refs.test_card_6[0].className.substring(0, num-1);\r\n                        break;\r\n                    case 'card_7' :\r\n                        num = this.$refs.test_card_7[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_7[0].className = this.$refs.test_card_7[0].className.substring(0, num-1);\r\n                        break;\r\n                    case 'card_8' :\r\n                        num = this.$refs.test_card_8[0].className.indexOf('test_border');\r\n                        this.$refs.test_card_8[0].className = this.$refs.test_card_8[0].className.substring(0, num-1);\r\n                        break;                                  \r\n                }\r\n            }\r\n            // 변수에 추가\r\n            this.test_ingredient_list.push(name);\r\n            let ref_str = '';\r\n            switch(name){\r\n                case 'card_1':\r\n                    ref_str = this.$refs.sell_card_1;\r\n                    break;\r\n                case 'card_2':\r\n                    ref_str = this.$refs.sell_card_2;\r\n                    break;\r\n                case 'card_3':\r\n                    ref_str = this.$refs.sell_card_3;\r\n                    break;\r\n                case 'card_4':\r\n                    ref_str = this.$refs.sell_card_4;\r\n                    break;\r\n                case 'card_5':\r\n                    ref_str = this.$refs.sell_card_5;\r\n                    break;\r\n                case 'card_6':\r\n                    ref_str = this.$refs.sell_card_6;\r\n                    break;\r\n                case 'card_7':\r\n                    ref_str = this.$refs.sell_card_7;\r\n                    break;\r\n                case 'card_8':\r\n                    ref_str = this.$refs.sell_card_8;\r\n                    break;\r\n            }\r\n            ref_str[0].className += \" test_border\";\r\n        }\r\n    },\r\n\r\n    click_test_ingredient : function() {\r\n        if( this.test_ingredient_list.length != 2 ){\r\n            alert(\"재료카드를 2장 선택해주세요!!!\");\r\n            return;\r\n        }\r\n        // test_ingredient_list의 길이가 2이면 서버에게 보내고\r\n        // 고른 재료 차감 / 변수 초기화 / 결과는 모두에게 전송\r\n        // / -> 유물 카드 에 따른 효과 발동 할 부분 추가할 것 계산\r\n        else {\r\n            let board_is = 0;\r\n            if( this.board_7_selected == true ){\r\n                board_is = 7;\r\n            }else if ( this.board_8_selected == true ) {\r\n                board_is = 8;\r\n            }\r\n            let send_data = {\r\n                user_key : this.my_key,\r\n                card_list : this.test_ingredient_list,\r\n                board_order : this.board_order,\r\n                cube_order : this.board_cube_order,\r\n                stu : true,\r\n                pro : false,\r\n                board_is : board_is,\r\n            }\r\n            socket.emit(\"test_ingredient_confirm\", send_data);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}