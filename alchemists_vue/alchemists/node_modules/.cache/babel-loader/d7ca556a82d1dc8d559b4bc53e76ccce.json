{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { default as Create_lobby } from '@/components/create_lobby.vue'; // 다른 곳에서도 쓸 수 있게 전역 선언\n\nvar socket;\nexport default {\n  name: 'room_list',\n  components: {\n    Create_lobby: Create_lobby\n  },\n\n  created() {\n    if (this.$route.params.re_page == \"false\") {\n      socket = io('http://' + this.$route.params.ip + \":3000\");\n    }\n\n    console.log(this.$route.params);\n    this.enter_server();\n  },\n\n  mounted() {\n    socket.on(\"enter_room_success\", data => {\n      // router로 방 선택/ 생성 창으로 이동\n      //console.log(data);\n      this.room_list = data;\n    });\n    socket.on(\"wrong_pw\", () => {\n      alert(\"비밀번호가 틀렸습니다. \\n다시 시도해주세요\");\n    });\n    socket.on(\"ok_pw\", () => {\n      this.$router.push({\n        name: 'game_lobby',\n        params: {\n          room_name: this.want_room,\n          room_pw: this.room_pw,\n          name: this.name,\n          is_master: false\n        }\n      });\n    });\n  },\n\n  data() {\n    return {\n      name: this.$route.params.name,\n      room_list: '',\n      room_pw: '',\n      want_room: '',\n      listing: true,\n      loading: true,\n      check_pw_modal: false\n    };\n  },\n\n  methods: {\n    enter_server: async function () {\n      setTimeout(() => {\n        if (socket.id == undefined || socket.id == '') {\n          // 접속 실패로 이전화면으로 돌림\n          alert(\"접속에 실패하였습니다.\\n 주소를 다시 확인해주세요\");\n          this.$router.push({\n            name: 'first_page',\n            params: {\n              refresh: true\n            }\n          });\n        }\n\n        this.loading = false;\n        socket.emit(\"enter_room_gate\", this.$route.params.name);\n      }, 3000);\n    },\n    create_room: function () {\n      this.listing = false;\n    },\n    back_page: function () {\n      this.listing = true;\n    },\n    pw_modal_on: function (room_name) {\n      // console.log(room_name);\n      // console.log(this.room_pw);\n      this.want_room = room_name; // 방이 가득찼는지 room_list의 count와 max_count를 검사\n\n      let left_sit = 0;\n\n      for (let i = 0; i < this.room_list.length; i++) {\n        if (this.room_list[i].name == room_name) {\n          left_sit = this.room_list[i].max_count - this.room_list[i].count;\n          break;\n        }\n      }\n\n      console.log(left_sit);\n\n      if (left_sit > 0) {\n        // pw입력창 띄우기\n        this.check_pw_modal = !this.check_pw_modal;\n      } else {\n        alert(\"해당 방은 인원이 가득 찼습니다!.\\n다른 방을 찾아주세요.\");\n      }\n    },\n    enter_room: function () {\n      // console.log(this.room_pw);\n      // console.log(this.want_room);\n      let send_data = {\n        room_pw: this.room_pw,\n        room_name: this.want_room\n      };\n      console.log(send_data);\n      this.check_pw_modal = !this.check_pw_modal;\n      socket.emit(\"check_pw\", send_data);\n    }\n  }\n};\nexport { socket };","map":{"version":3,"names":["io","default","Create_lobby","socket","name","components","created","$route","params","re_page","ip","console","log","enter_server","mounted","on","data","room_list","alert","$router","push","room_name","want_room","room_pw","is_master","listing","loading","check_pw_modal","methods","setTimeout","id","undefined","refresh","emit","create_room","back_page","pw_modal_on","left_sit","i","length","max_count","count","enter_room","send_data"],"sources":["E:/GitHub/personal_tranning/alchemists_vue/alchemists/src/assets/script/room_list.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\nimport { default as Create_lobby } from '@/components/create_lobby.vue';\r\n\r\n// 다른 곳에서도 쓸 수 있게 전역 선언\r\nvar socket;\r\n\r\nexport default {\r\n    name : 'room_list',\r\n    components : {\r\n        Create_lobby : Create_lobby,\r\n    },\r\n    created() {\r\n        if( this.$route.params.re_page == \"false\" ){\r\n            socket = io('http://' + this.$route.params.ip + \":3000\");\r\n        }\r\n        console.log(this.$route.params);\r\n        this.enter_server();\r\n    },\r\n    mounted() {\r\n        socket.on(\"enter_room_success\", (data)=> {\r\n            // router로 방 선택/ 생성 창으로 이동\r\n            //console.log(data);\r\n            this.room_list = data;\r\n        });\r\n\r\n        socket.on(\"wrong_pw\", () => {\r\n            alert(\"비밀번호가 틀렸습니다. \\n다시 시도해주세요\");\r\n        });\r\n\r\n        socket.on(\"ok_pw\", () => {\r\n            this.$router.push({\r\n                name: 'game_lobby',\r\n                params: {\r\n                    room_name: this.want_room,\r\n                    room_pw: this.room_pw,\r\n                    name: this.name,\r\n                    is_master : false,\r\n                }\r\n            });\r\n        });\r\n    },\r\n    data () {\r\n        return {\r\n            name : this.$route.params.name,\r\n            room_list : '',\r\n            room_pw : '',\r\n            want_room : '',\r\n            listing : true,\r\n            loading : true,\r\n            check_pw_modal : false,\r\n        }\r\n    },\r\n    methods : {\r\n        enter_server : async function() {\r\n            setTimeout(()=>{\r\n                if( socket.id == undefined || socket.id == '' ){\r\n                    // 접속 실패로 이전화면으로 돌림\r\n                    alert(\"접속에 실패하였습니다.\\n 주소를 다시 확인해주세요\");\r\n                    this.$router.push({\r\n                        name: 'first_page',\r\n                        params : {\r\n                            refresh : true,\r\n                        }\r\n                    });\r\n                }\r\n                this.loading = false;\r\n                socket.emit(\"enter_room_gate\", this.$route.params.name);\r\n            }, 3000);\r\n            \r\n        },\r\n\r\n        create_room : function() {\r\n            this.listing = false;\r\n        },\r\n        back_page : function() {\r\n            this.listing = true;\r\n        },\r\n\r\n        pw_modal_on : function(room_name) {\r\n            // console.log(room_name);\r\n            // console.log(this.room_pw);\r\n            this.want_room = room_name;\r\n            // 방이 가득찼는지 room_list의 count와 max_count를 검사\r\n            let left_sit = 0;\r\n            for(let i = 0 ; i < this.room_list.length; i++ ){\r\n                if( this.room_list[i].name == room_name ){\r\n                    left_sit = this.room_list[i].max_count - this.room_list[i].count;\r\n                    break;\r\n                }\r\n            }\r\n            console.log(left_sit);\r\n            if( left_sit > 0 ){\r\n                // pw입력창 띄우기\r\n                this.check_pw_modal = !this.check_pw_modal;\r\n            }\r\n            else {\r\n                alert(\"해당 방은 인원이 가득 찼습니다!.\\n다른 방을 찾아주세요.\");\r\n            }\r\n        },\r\n\r\n        enter_room : function() {\r\n            // console.log(this.room_pw);\r\n            // console.log(this.want_room);\r\n            let send_data = {\r\n                room_pw : this.room_pw,\r\n                room_name : this.want_room,\r\n            };\r\n            console.log(send_data);\r\n            this.check_pw_modal = !this.check_pw_modal;\r\n            socket.emit(\"check_pw\", send_data);\r\n        }\r\n    },\r\n}\r\n\r\nexport { socket };"],"mappings":"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"},"metadata":{},"sourceType":"module"}