{"ast":null,"code":"import { socket } from '@/components/game_lobby.vue';\nimport { default as modal_area } from '@/components/modal_area.vue';\nimport { default as personal_game_data } from '@/components/personal_game_data.vue';\nexport default {\n  name: 'game_board',\n\n  created() {\n    // 게임 초기화 & 시작 트리거\n    socket.emit(\"created_data_announce\"); //최초 분배된 기본 재료 수령\n\n    socket.on(\"get_ingame_data\", data => {\n      this.user_data = data;\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].is_master === 'true') {\n          this.room_owner = data[i].user_name;\n        }\n\n        if (this.my_key == data[i].user_key) {\n          this.my_name = data[i].user_name;\n          this.my_color = data[i].user_color;\n        }\n      }\n\n      let msg = {\n        speaker: this.my_name,\n        msg: \"방에 입장하였습니다.\",\n        type: 'announce'\n      };\n      socket.emit(\"chat\", msg);\n    }); //채팅 on\n\n    socket.on(\"chat\", data => {\n      // console.log(\"서버에서 받아온 데이터\");\n      // console.log(data);\n      // console.log(\"받아오기 끝\");\n      switch (data.type) {\n        case \"announce\":\n          this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\n          break;\n\n        case \"normal\":\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\n          break;\n      } // 스크롤을 자동으로 내림\n\n\n      this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\n    }); // 선택할 수 있는 카드 공개\n\n    socket.on(\"ingredient_select_card_open\", data => {\n      //console.log(data);\n      this.ingredient_card_selected.card_1 = data[0];\n      this.ingredient_card_selected.card_2 = data[1];\n      this.ingredient_card_selected.card_3 = data[2];\n      this.ingredient_card_selected.card_4 = data[3];\n      this.ingredient_card_selected.card_5 = data[4];\n    }); // 인게임 초기 셋팅값을 전송 받는 함수\n\n    socket.on(\"draw_ingredient_card_result\", data => {\n      this.user_data = data; //console.log(this.user_data);\n    }); // 게임 순서 정하는 순서를 받는 함수\n\n    socket.on(\"round_order_setting_before\", data => {\n      //console.log(data);\n      let as = [];\n\n      for (let i = 0; i < data.length; i++) {\n        for (let j = 0; j < this.user_data.length; j++) {\n          if (data[i] == this.user_data[j].user_key) {\n            let choice_data = {\n              user_key: this.user_data[j].user_key,\n              user_name: this.user_data[j].user_name,\n              is_select: false\n            };\n            as.push(choice_data);\n            choice_data = '';\n          }\n        }\n      }\n\n      this.round_setting_order = as; //console.log(this.round_setting_order[0].user_key);\n      //console.log(this.round_order[this.round_order_selecter].user_key);\n    });\n  },\n\n  mounted() {\n    socket.on(\"select_round_order_recive\", data => {\n      let btn_ele = '';\n      let btn_before_ele = ''; // data는 모든 유저의 정보를 보냈으므로 반복문으로 돌려 모든 유저의 색을 칠해야한다. \n\n      for (let i = 0; i < data.length; i++) {\n        // 순서에 맞는 element를 선택\n        switch (data[i].order) {\n          case 1:\n            btn_ele = this.$refs.btn_1;\n            break;\n\n          case 2:\n            btn_ele = this.$refs.btn_2;\n            break;\n\n          case 3:\n            btn_ele = this.$refs.btn_3;\n            break;\n\n          case 4:\n            btn_ele = this.$refs.btn_4;\n            break;\n\n          case 5:\n            btn_ele = this.$refs.btn_5;\n            break;\n\n          case 6:\n            btn_ele = this.$refs.btn_6;\n            break;\n\n          case 7:\n            btn_ele = this.$refs.btn_7;\n            break;\n\n          case 8:\n            btn_ele = this.$refs.btn_8;\n            break;\n        }\n\n        switch (data[i].before_order) {\n          case 1:\n            btn_before_ele = this.$refs.btn_1;\n            break;\n\n          case 2:\n            btn_before_ele = this.$refs.btn_2;\n            break;\n\n          case 3:\n            btn_before_ele = this.$refs.btn_3;\n            break;\n\n          case 4:\n            btn_before_ele = this.$refs.btn_4;\n            break;\n\n          case 5:\n            btn_before_ele = this.$refs.btn_5;\n            break;\n\n          case 6:\n            btn_before_ele = this.$refs.btn_6;\n            break;\n\n          case 7:\n            btn_before_ele = this.$refs.btn_7;\n            break;\n\n          case 8:\n            btn_before_ele = this.$refs.btn_8;\n            break;\n        } //console.log(btn_ele[0].className);\n        // 기존의 것이 있으면 기존 색 class 제거\n\n\n        if (btn_before_ele != '') {\n          let num = btn_before_ele[0].className.indexOf(data[i].user_color); // 문구 검색 결과가 있으면 제거 \n\n          if (num > 0) {\n            let str = btn_before_ele[0].className.substring(0, num - 1);\n            btn_before_ele[0].className = str;\n          } // 결과가 음수면 없는 것이므로 넘김\n\n        } // 기존의 것을 없앤 완전 초기화 상태이므로  기존의 것과 중복 되더라도 그냥 진행 가능\n        // 기존 : 5 신규 5 일 경우 위에서 이미 검사하지 않고 지웠으므로\n        // 신규 5를 다시 칠함\n        // 두 함수에서 모두 if로 구분하여 ifif중복하기 귀찮아서 그냥 무조건 지우고 무조건 색칠\n\n\n        if (btn_ele != '') {\n          btn_ele[0].className += ' ' + data[i].user_color;\n          console.log(btn_ele[0].className);\n        } // 변수 초기화\n\n\n        btn_before_ele = '';\n        btn_ele = '';\n      }\n\n      this.final_round_order = data; //console.log(data);\n    });\n  },\n\n  components: {\n    modal_component: modal_area,\n    personal_game_data: personal_game_data\n  },\n\n  data() {\n    return {\n      user_data: '',\n      my_key: socket.id,\n      my_name: '',\n      my_color: '',\n      room_owner: '',\n      total_dicount_adventruer: 4,\n      textarea: '',\n      message: '',\n      ingredient_card_selected: {\n        card_1: '0',\n        card_2: '0',\n        card_3: '0',\n        card_4: '0',\n        card_5: '0'\n      },\n      decide_order: false,\n      round_setting_order: '',\n      round_setting_order_counter: 0,\n      final_round_order: ''\n    };\n  },\n\n  methods: {\n    use_chat: function () {\n      if (this.message !== '') {\n        let msg = {\n          speaker: this.my_name,\n          msg: this.message,\n          type: \"normal\"\n        }; //   console.log(\"서버에 보낼 데이터\");\n        //   console.log(msg);\n        //   console.log(\"보낼준비 끝\");\n\n        this.message = '';\n        socket.emit(\"chat\", msg);\n      }\n    },\n    draw_ingredient_card: function (cnt) {\n      let data = {\n        cnt: cnt,\n        my_key: this.my_key\n      };\n      socket.emit(\"draw_ingredient_card\", data);\n    },\n    round_ready: function () {\n      console.log(\"ready\");\n    },\n    decide_order_setting_end: function () {\n      this.round_setting_order_counter += 1;\n    },\n    select_order_btn: function (val) {\n      // 선택 순서에 따라 클릭 막기\n      if (this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key) {\n        alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\n        return;\n      } //\n\n\n      if (this.final_round_order != '') {\n        for (let i = 0; i < this.final_round_order.length; i++) {\n          if (this.final_round_order[i].user_key != this.my_key) {\n            if (val == this.final_round_order[i].order) {\n              alert(\"다른 사람이 선택한 순서는 선택 할 수 없습니다.\");\n              return;\n            }\n          }\n        }\n      }\n\n      let round_order_data = {\n        user_key: this.my_key,\n        order: val\n      }; // 버튼 선택 결과 전송\n\n      socket.emit(\"select_round_order\", round_order_data);\n    }\n  }\n};","map":{"version":3,"names":["socket","default","modal_area","personal_game_data","name","created","emit","on","data","user_data","i","length","is_master","room_owner","user_name","my_key","user_key","my_name","my_color","user_color","msg","speaker","type","textarea","$refs","show_chat","scrollTop","scrollHeight","ingredient_card_selected","card_1","card_2","card_3","card_4","card_5","as","j","choice_data","is_select","push","round_setting_order","mounted","btn_ele","btn_before_ele","order","btn_1","btn_2","btn_3","btn_4","btn_5","btn_6","btn_7","btn_8","before_order","num","className","indexOf","str","substring","console","log","final_round_order","components","modal_component","id","total_dicount_adventruer","message","decide_order","round_setting_order_counter","methods","use_chat","draw_ingredient_card","cnt","round_ready","decide_order_setting_end","select_order_btn","val","alert","round_order_data"],"sources":["E:/GitHub/personal_tranning/alchemists_vue/alchemists/src/assets/script/game_board.js"],"sourcesContent":["import { socket } from '@/components/game_lobby.vue'\r\nimport { default as modal_area } from '@/components/modal_area.vue'\r\nimport { default as personal_game_data } from '@/components/personal_game_data.vue' \r\n\r\nexport default {\r\n    name : 'game_board',\r\n    created() {\r\n        // 게임 초기화 & 시작 트리거\r\n        socket.emit(\"created_data_announce\");\r\n\r\n        //최초 분배된 기본 재료 수령\r\n        socket.on(\"get_ingame_data\", (data) => {\r\n            this.user_data = data;\r\n            for(let i = 0; i < data.length; i++){\r\n                if( data[i].is_master === 'true' ) {\r\n                    this.room_owner = data[i].user_name;\r\n                }\r\n                if( this.my_key == data[i].user_key ){\r\n                    this.my_name = data[i].user_name;\r\n                    this.my_color = data[i].user_color;\r\n                }\r\n            }\r\n\r\n            let msg = {\r\n                speaker : this.my_name,\r\n                msg     : \"방에 입장하였습니다.\",\r\n                type    : 'announce',\r\n            }\r\n            socket.emit(\"chat\", msg);\r\n        });\r\n\r\n        //채팅 on\r\n        socket.on(\"chat\", (data) => {\r\n            // console.log(\"서버에서 받아온 데이터\");\r\n            // console.log(data);\r\n            // console.log(\"받아오기 끝\");\r\n            switch ( data.type ) {\r\n                case \"announce\" :\r\n                    this.textarea += data.speaker + \" 이(가) \" + data.msg + \"\\n\";\r\n                    break;\r\n                case \"normal\" :\r\n                    this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\r\n                    break;\r\n            }\r\n            // 스크롤을 자동으로 내림\r\n            this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\r\n        });\r\n\r\n        // 선택할 수 있는 카드 공개\r\n        socket.on(\"ingredient_select_card_open\", (data) => {\r\n            //console.log(data);\r\n            this.ingredient_card_selected.card_1 = data[0];\r\n            this.ingredient_card_selected.card_2 = data[1];\r\n            this.ingredient_card_selected.card_3 = data[2];\r\n            this.ingredient_card_selected.card_4 = data[3];\r\n            this.ingredient_card_selected.card_5 = data[4];\r\n        });\r\n\r\n        // 인게임 초기 셋팅값을 전송 받는 함수\r\n        socket.on(\"draw_ingredient_card_result\", (data) => {\r\n            this.user_data = data;\r\n            //console.log(this.user_data);\r\n        });\r\n\r\n        // 게임 순서 정하는 순서를 받는 함수\r\n        socket.on(\"round_order_setting_before\" , (data) => {\r\n            //console.log(data);\r\n            let as = [];\r\n\r\n            for( let i = 0; i < data.length; i++) {\r\n                for( let j = 0; j < this.user_data.length; j++){\r\n                    if( data[i] == this.user_data[j].user_key ){\r\n\r\n                        let choice_data = {\r\n                            user_key  : this.user_data[j].user_key,\r\n                            user_name : this.user_data[j].user_name,\r\n                            is_select : false\r\n                        }\r\n                        \r\n                        as.push(choice_data);\r\n                        \r\n                        choice_data = '';\r\n                    }\r\n                }\r\n            }\r\n            this.round_setting_order = as;\r\n            //console.log(this.round_setting_order[0].user_key);\r\n            //console.log(this.round_order[this.round_order_selecter].user_key);\r\n        });\r\n\r\n    },\r\n    mounted () {\r\n        socket.on(\"select_round_order_recive\", (data) => {\r\n            let btn_ele = '';\r\n            let btn_before_ele = '';\r\n            // data는 모든 유저의 정보를 보냈으므로 반복문으로 돌려 모든 유저의 색을 칠해야한다. \r\n            \r\n            for( let i = 0; i < data.length; i++){\r\n                 // 순서에 맞는 element를 선택\r\n                switch(data[i].order) {\r\n                    case 1 : \r\n                        btn_ele = this.$refs.btn_1;\r\n                        break;\r\n                    case 2 :\r\n                        btn_ele = this.$refs.btn_2;\r\n                        break;\r\n                    case 3 :\r\n                        btn_ele = this.$refs.btn_3;\r\n                        break;\r\n                    case 4 : \r\n                        btn_ele = this.$refs.btn_4;\r\n                        break;\r\n                    case 5 :\r\n                        btn_ele = this.$refs.btn_5;\r\n                        break;\r\n                    case 6 :\r\n                        btn_ele = this.$refs.btn_6;\r\n                        break;\r\n                    case 7 :\r\n                        btn_ele = this.$refs.btn_7;\r\n                        break;\r\n                    case 8 :\r\n                        btn_ele = this.$refs.btn_8;\r\n                        break;\r\n                }\r\n                switch( data[i].before_order ){\r\n                    case 1 : \r\n                        btn_before_ele = this.$refs.btn_1;\r\n                        break;\r\n                    case 2 :\r\n                        btn_before_ele = this.$refs.btn_2;\r\n                        break;\r\n                    case 3 :\r\n                        btn_before_ele = this.$refs.btn_3;\r\n                        break;\r\n                    case 4 : \r\n                        btn_before_ele = this.$refs.btn_4;\r\n                        break;\r\n                    case 5 :\r\n                        btn_before_ele = this.$refs.btn_5;\r\n                        break;\r\n                    case 6 :\r\n                        btn_before_ele = this.$refs.btn_6;\r\n                        break;\r\n                    case 7 :\r\n                        btn_before_ele = this.$refs.btn_7;\r\n                        break;\r\n                    case 8 :\r\n                        btn_before_ele = this.$refs.btn_8;\r\n                        break;\r\n                }\r\n                //console.log(btn_ele[0].className);\r\n                // 기존의 것이 있으면 기존 색 class 제거\r\n                if( btn_before_ele != '' ){\r\n\r\n                    let num = btn_before_ele[0].className.indexOf(data[i].user_color);\r\n                    // 문구 검색 결과가 있으면 제거 \r\n                    if ( num > 0 ){\r\n                        let str = btn_before_ele[0].className.substring(0, num-1);\r\n                        btn_before_ele[0].className = str;\r\n                    }\r\n                    // 결과가 음수면 없는 것이므로 넘김\r\n                }\r\n\r\n                // 기존의 것을 없앤 완전 초기화 상태이므로  기존의 것과 중복 되더라도 그냥 진행 가능\r\n                // 기존 : 5 신규 5 일 경우 위에서 이미 검사하지 않고 지웠으므로\r\n                // 신규 5를 다시 칠함\r\n                // 두 함수에서 모두 if로 구분하여 ifif중복하기 귀찮아서 그냥 무조건 지우고 무조건 색칠\r\n                if( btn_ele != '' ){\r\n                    btn_ele[0].className += ' ' + data[i].user_color;\r\n                    console.log(btn_ele[0].className);\r\n                }\r\n                // 변수 초기화\r\n                btn_before_ele = '';\r\n                btn_ele = '';\r\n\r\n            }\r\n           \r\n            this.final_round_order = data;\r\n            //console.log(data);\r\n        });\r\n    },\r\n    components : {\r\n        modal_component : modal_area,\r\n        personal_game_data : personal_game_data,\r\n    \r\n    },\r\n    data() {\r\n        return  {\r\n            user_data : '', \r\n            my_key : socket.id,\r\n            my_name : '',\r\n            my_color : '',\r\n            room_owner : '',\r\n            total_dicount_adventruer : 4,\r\n            textarea : '',\r\n            message : '',\r\n            ingredient_card_selected : {\r\n                card_1 : '0',\r\n                card_2 : '0',\r\n                card_3 : '0',\r\n                card_4 : '0',\r\n                card_5 : '0',\r\n            },\r\n            decide_order : false,\r\n            round_setting_order : '',\r\n            round_setting_order_counter : 0,\r\n            final_round_order : '',\r\n        }\r\n    },\r\n\r\n    methods : {\r\n        use_chat : function(){\r\n            if( this.message !== '' ){\r\n              let msg = {\r\n                speaker : this.my_name,\r\n                msg : this.message,\r\n                type : \"normal\"\r\n              }\r\n            //   console.log(\"서버에 보낼 데이터\");\r\n            //   console.log(msg);\r\n            //   console.log(\"보낼준비 끝\");\r\n              this.message = '';\r\n              socket.emit(\"chat\", msg);\r\n            }\r\n        },\r\n\r\n        draw_ingredient_card : function(cnt) {\r\n            let data = {\r\n                cnt : cnt,\r\n                my_key : this.my_key,\r\n            }\r\n            socket.emit(\"draw_ingredient_card\", data);\r\n        },\r\n\r\n        round_ready : function() {\r\n            console.log(\"ready\");\r\n        },\r\n\r\n        decide_order_setting_end : function() {\r\n\r\n            this.round_setting_order_counter += 1;\r\n            \r\n        },\r\n\r\n        select_order_btn : function(val){\r\n            // 선택 순서에 따라 클릭 막기\r\n            if( this.round_setting_order[this.round_setting_order_counter].user_key != this.my_key){\r\n                alert(\"지금은 내 선택 순서가 아닙니다! 조금만 기다려주세용\");\r\n                return;\r\n            }\r\n\r\n            //\r\n            if( this.final_round_order != '' ){\r\n                for( let i = 0; i < this.final_round_order.length; i++ ){\r\n                    if( this.final_round_order[i].user_key != this.my_key ){\r\n                        if( val == this.final_round_order[i].order) {\r\n                            alert(\"다른 사람이 선택한 순서는 선택 할 수 없습니다.\");\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let round_order_data = {\r\n                user_key : this.my_key,\r\n                order : val\r\n            };\r\n\r\n            // 버튼 선택 결과 전송\r\n            socket.emit(\"select_round_order\", round_order_data);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,6BAAvB;AACA,SAASC,OAAO,IAAIC,UAApB,QAAsC,6BAAtC;AACA,SAASD,OAAO,IAAIE,kBAApB,QAA8C,qCAA9C;AAEA,eAAe;EACXC,IAAI,EAAG,YADI;;EAEXC,OAAO,GAAG;IACN;IACAL,MAAM,CAACM,IAAP,CAAY,uBAAZ,EAFM,CAIN;;IACAN,MAAM,CAACO,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;MACnC,KAAKC,SAAL,GAAiBD,IAAjB;;MACA,KAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAI,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;QAChC,IAAIF,IAAI,CAACE,CAAD,CAAJ,CAAQE,SAAR,KAAsB,MAA1B,EAAmC;UAC/B,KAAKC,UAAL,GAAkBL,IAAI,CAACE,CAAD,CAAJ,CAAQI,SAA1B;QACH;;QACD,IAAI,KAAKC,MAAL,IAAeP,IAAI,CAACE,CAAD,CAAJ,CAAQM,QAA3B,EAAqC;UACjC,KAAKC,OAAL,GAAeT,IAAI,CAACE,CAAD,CAAJ,CAAQI,SAAvB;UACA,KAAKI,QAAL,GAAgBV,IAAI,CAACE,CAAD,CAAJ,CAAQS,UAAxB;QACH;MACJ;;MAED,IAAIC,GAAG,GAAG;QACNC,OAAO,EAAG,KAAKJ,OADT;QAENG,GAAG,EAAO,aAFJ;QAGNE,IAAI,EAAM;MAHJ,CAAV;MAKAtB,MAAM,CAACM,IAAP,CAAY,MAAZ,EAAoBc,GAApB;IACH,CAlBD,EALM,CAyBN;;IACApB,MAAM,CAACO,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAU;MACxB;MACA;MACA;MACA,QAASA,IAAI,CAACc,IAAd;QACI,KAAK,UAAL;UACI,KAAKC,QAAL,IAAiBf,IAAI,CAACa,OAAL,GAAe,QAAf,GAA0Bb,IAAI,CAACY,GAA/B,GAAqC,IAAtD;UACA;;QACJ,KAAK,QAAL;UACI,KAAKG,QAAL,IAAiBf,IAAI,CAACa,OAAL,GAAe,KAAf,GAAuBb,IAAI,CAACY,GAA5B,GAAkC,IAAnD;UACA;MANR,CAJwB,CAYxB;;;MACA,KAAKI,KAAL,CAAWC,SAAX,CAAqBC,SAArB,GAAiC,KAAKF,KAAL,CAAWC,SAAX,CAAqBE,YAAtD;IACH,CAdD,EA1BM,CA0CN;;IACA3B,MAAM,CAACO,EAAP,CAAU,6BAAV,EAA0CC,IAAD,IAAU;MAC/C;MACA,KAAKoB,wBAAL,CAA8BC,MAA9B,GAAuCrB,IAAI,CAAC,CAAD,CAA3C;MACA,KAAKoB,wBAAL,CAA8BE,MAA9B,GAAuCtB,IAAI,CAAC,CAAD,CAA3C;MACA,KAAKoB,wBAAL,CAA8BG,MAA9B,GAAuCvB,IAAI,CAAC,CAAD,CAA3C;MACA,KAAKoB,wBAAL,CAA8BI,MAA9B,GAAuCxB,IAAI,CAAC,CAAD,CAA3C;MACA,KAAKoB,wBAAL,CAA8BK,MAA9B,GAAuCzB,IAAI,CAAC,CAAD,CAA3C;IACH,CAPD,EA3CM,CAoDN;;IACAR,MAAM,CAACO,EAAP,CAAU,6BAAV,EAA0CC,IAAD,IAAU;MAC/C,KAAKC,SAAL,GAAiBD,IAAjB,CAD+C,CAE/C;IACH,CAHD,EArDM,CA0DN;;IACAR,MAAM,CAACO,EAAP,CAAU,4BAAV,EAA0CC,IAAD,IAAU;MAC/C;MACA,IAAI0B,EAAE,GAAG,EAAT;;MAEA,KAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;QAClC,KAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1B,SAAL,CAAeE,MAAnC,EAA2CwB,CAAC,EAA5C,EAA+C;UAC3C,IAAI3B,IAAI,CAACE,CAAD,CAAJ,IAAW,KAAKD,SAAL,CAAe0B,CAAf,EAAkBnB,QAAjC,EAA2C;YAEvC,IAAIoB,WAAW,GAAG;cACdpB,QAAQ,EAAI,KAAKP,SAAL,CAAe0B,CAAf,EAAkBnB,QADhB;cAEdF,SAAS,EAAG,KAAKL,SAAL,CAAe0B,CAAf,EAAkBrB,SAFhB;cAGduB,SAAS,EAAG;YAHE,CAAlB;YAMAH,EAAE,CAACI,IAAH,CAAQF,WAAR;YAEAA,WAAW,GAAG,EAAd;UACH;QACJ;MACJ;;MACD,KAAKG,mBAAL,GAA2BL,EAA3B,CApB+C,CAqB/C;MACA;IACH,CAvBD;EAyBH,CAtFU;;EAuFXM,OAAO,GAAI;IACPxC,MAAM,CAACO,EAAP,CAAU,2BAAV,EAAwCC,IAAD,IAAU;MAC7C,IAAIiC,OAAO,GAAG,EAAd;MACA,IAAIC,cAAc,GAAG,EAArB,CAF6C,CAG7C;;MAEA,KAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;QAChC;QACD,QAAOF,IAAI,CAACE,CAAD,CAAJ,CAAQiC,KAAf;UACI,KAAK,CAAL;YACIF,OAAO,GAAG,KAAKjB,KAAL,CAAWoB,KAArB;YACA;;UACJ,KAAK,CAAL;YACIH,OAAO,GAAG,KAAKjB,KAAL,CAAWqB,KAArB;YACA;;UACJ,KAAK,CAAL;YACIJ,OAAO,GAAG,KAAKjB,KAAL,CAAWsB,KAArB;YACA;;UACJ,KAAK,CAAL;YACIL,OAAO,GAAG,KAAKjB,KAAL,CAAWuB,KAArB;YACA;;UACJ,KAAK,CAAL;YACIN,OAAO,GAAG,KAAKjB,KAAL,CAAWwB,KAArB;YACA;;UACJ,KAAK,CAAL;YACIP,OAAO,GAAG,KAAKjB,KAAL,CAAWyB,KAArB;YACA;;UACJ,KAAK,CAAL;YACIR,OAAO,GAAG,KAAKjB,KAAL,CAAW0B,KAArB;YACA;;UACJ,KAAK,CAAL;YACIT,OAAO,GAAG,KAAKjB,KAAL,CAAW2B,KAArB;YACA;QAxBR;;QA0BA,QAAQ3C,IAAI,CAACE,CAAD,CAAJ,CAAQ0C,YAAhB;UACI,KAAK,CAAL;YACIV,cAAc,GAAG,KAAKlB,KAAL,CAAWoB,KAA5B;YACA;;UACJ,KAAK,CAAL;YACIF,cAAc,GAAG,KAAKlB,KAAL,CAAWqB,KAA5B;YACA;;UACJ,KAAK,CAAL;YACIH,cAAc,GAAG,KAAKlB,KAAL,CAAWsB,KAA5B;YACA;;UACJ,KAAK,CAAL;YACIJ,cAAc,GAAG,KAAKlB,KAAL,CAAWuB,KAA5B;YACA;;UACJ,KAAK,CAAL;YACIL,cAAc,GAAG,KAAKlB,KAAL,CAAWwB,KAA5B;YACA;;UACJ,KAAK,CAAL;YACIN,cAAc,GAAG,KAAKlB,KAAL,CAAWyB,KAA5B;YACA;;UACJ,KAAK,CAAL;YACIP,cAAc,GAAG,KAAKlB,KAAL,CAAW0B,KAA5B;YACA;;UACJ,KAAK,CAAL;YACIR,cAAc,GAAG,KAAKlB,KAAL,CAAW2B,KAA5B;YACA;QAxBR,CA5BiC,CAsDjC;QACA;;;QACA,IAAIT,cAAc,IAAI,EAAtB,EAA0B;UAEtB,IAAIW,GAAG,GAAGX,cAAc,CAAC,CAAD,CAAd,CAAkBY,SAAlB,CAA4BC,OAA5B,CAAoC/C,IAAI,CAACE,CAAD,CAAJ,CAAQS,UAA5C,CAAV,CAFsB,CAGtB;;UACA,IAAKkC,GAAG,GAAG,CAAX,EAAc;YACV,IAAIG,GAAG,GAAGd,cAAc,CAAC,CAAD,CAAd,CAAkBY,SAAlB,CAA4BG,SAA5B,CAAsC,CAAtC,EAAyCJ,GAAG,GAAC,CAA7C,CAAV;YACAX,cAAc,CAAC,CAAD,CAAd,CAAkBY,SAAlB,GAA8BE,GAA9B;UACH,CAPqB,CAQtB;;QACH,CAjEgC,CAmEjC;QACA;QACA;QACA;;;QACA,IAAIf,OAAO,IAAI,EAAf,EAAmB;UACfA,OAAO,CAAC,CAAD,CAAP,CAAWa,SAAX,IAAwB,MAAM9C,IAAI,CAACE,CAAD,CAAJ,CAAQS,UAAtC;UACAuC,OAAO,CAACC,GAAR,CAAYlB,OAAO,CAAC,CAAD,CAAP,CAAWa,SAAvB;QACH,CA1EgC,CA2EjC;;;QACAZ,cAAc,GAAG,EAAjB;QACAD,OAAO,GAAG,EAAV;MAEH;;MAED,KAAKmB,iBAAL,GAAyBpD,IAAzB,CAtF6C,CAuF7C;IACH,CAxFD;EAyFH,CAjLU;;EAkLXqD,UAAU,EAAG;IACTC,eAAe,EAAG5D,UADT;IAETC,kBAAkB,EAAGA;EAFZ,CAlLF;;EAuLXK,IAAI,GAAG;IACH,OAAQ;MACJC,SAAS,EAAG,EADR;MAEJM,MAAM,EAAGf,MAAM,CAAC+D,EAFZ;MAGJ9C,OAAO,EAAG,EAHN;MAIJC,QAAQ,EAAG,EAJP;MAKJL,UAAU,EAAG,EALT;MAMJmD,wBAAwB,EAAG,CANvB;MAOJzC,QAAQ,EAAG,EAPP;MAQJ0C,OAAO,EAAG,EARN;MASJrC,wBAAwB,EAAG;QACvBC,MAAM,EAAG,GADc;QAEvBC,MAAM,EAAG,GAFc;QAGvBC,MAAM,EAAG,GAHc;QAIvBC,MAAM,EAAG,GAJc;QAKvBC,MAAM,EAAG;MALc,CATvB;MAgBJiC,YAAY,EAAG,KAhBX;MAiBJ3B,mBAAmB,EAAG,EAjBlB;MAkBJ4B,2BAA2B,EAAG,CAlB1B;MAmBJP,iBAAiB,EAAG;IAnBhB,CAAR;EAqBH,CA7MU;;EA+MXQ,OAAO,EAAG;IACNC,QAAQ,EAAG,YAAU;MACjB,IAAI,KAAKJ,OAAL,KAAiB,EAArB,EAAyB;QACvB,IAAI7C,GAAG,GAAG;UACRC,OAAO,EAAG,KAAKJ,OADP;UAERG,GAAG,EAAG,KAAK6C,OAFH;UAGR3C,IAAI,EAAG;QAHC,CAAV,CADuB,CAMzB;QACA;QACA;;QACE,KAAK2C,OAAL,GAAe,EAAf;QACAjE,MAAM,CAACM,IAAP,CAAY,MAAZ,EAAoBc,GAApB;MACD;IACJ,CAdK;IAgBNkD,oBAAoB,EAAG,UAASC,GAAT,EAAc;MACjC,IAAI/D,IAAI,GAAG;QACP+D,GAAG,EAAGA,GADC;QAEPxD,MAAM,EAAG,KAAKA;MAFP,CAAX;MAIAf,MAAM,CAACM,IAAP,CAAY,sBAAZ,EAAoCE,IAApC;IACH,CAtBK;IAwBNgE,WAAW,EAAG,YAAW;MACrBd,OAAO,CAACC,GAAR,CAAY,OAAZ;IACH,CA1BK;IA4BNc,wBAAwB,EAAG,YAAW;MAElC,KAAKN,2BAAL,IAAoC,CAApC;IAEH,CAhCK;IAkCNO,gBAAgB,EAAG,UAASC,GAAT,EAAa;MAC5B;MACA,IAAI,KAAKpC,mBAAL,CAAyB,KAAK4B,2BAA9B,EAA2DnD,QAA3D,IAAuE,KAAKD,MAAhF,EAAuF;QACnF6D,KAAK,CAAC,+BAAD,CAAL;QACA;MACH,CAL2B,CAO5B;;;MACA,IAAI,KAAKhB,iBAAL,IAA0B,EAA9B,EAAkC;QAC9B,KAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKkD,iBAAL,CAAuBjD,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;UACpD,IAAI,KAAKkD,iBAAL,CAAuBlD,CAAvB,EAA0BM,QAA1B,IAAsC,KAAKD,MAA/C,EAAuD;YACnD,IAAI4D,GAAG,IAAI,KAAKf,iBAAL,CAAuBlD,CAAvB,EAA0BiC,KAArC,EAA4C;cACxCiC,KAAK,CAAC,6BAAD,CAAL;cACA;YACH;UACJ;QACJ;MACJ;;MACD,IAAIC,gBAAgB,GAAG;QACnB7D,QAAQ,EAAG,KAAKD,MADG;QAEnB4B,KAAK,EAAGgC;MAFW,CAAvB,CAlB4B,CAuB5B;;MACA3E,MAAM,CAACM,IAAP,CAAY,oBAAZ,EAAkCuE,gBAAlC;IACH;EA3DK;AA/MC,CAAf"},"metadata":{},"sourceType":"module"}