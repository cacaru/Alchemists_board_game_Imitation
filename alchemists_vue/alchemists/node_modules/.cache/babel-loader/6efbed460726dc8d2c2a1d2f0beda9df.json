{"ast":null,"code":"import { socket } from '@/components/room_list.vue';\nimport { default as Chat_area } from '@/components/chat_area.vue';\nexport default {\n  name: 'game_lobby',\n  components: {\n    Chat_area: Chat_area\n  },\n\n  async mounted() {\n    //this.$route.params.room_address:this.$route.params.port\n    // console.log(params.nick_name);\n    //console.log(\"server in\");\n    //console.log(this.$route.params);\n    let msg;\n    let no_enter;\n\n    if (this.$route.params.no_enter === 'true') {\n      no_enter = true;\n    } else {\n      no_enter = false;\n    }\n\n    console.log(this.$route.params.count); //마스터 인 입장만 count를 가지고 있으므로\n\n    if (this.$route.params.is_master === 'true') {\n      msg = {\n        user_name: this.$route.params.name,\n        room_name: this.$route.params.room_name,\n        room_pw: this.$route.params.room_pw,\n        count: this.$route.params.count,\n        is_master: this.$route.params.is_master,\n        is_ready: false,\n        msg: this.$route.params.name + \" 가 방에 참가하였습니다.\",\n        no_enter: no_enter\n      }; //console.log(\"master\");\n    } else {\n      msg = {\n        user_name: this.$route.params.name,\n        room_name: this.$route.params.room_name,\n        is_master: this.$route.params.is_master,\n        is_ready: false,\n        msg: this.$route.params.name + \" 가 방에 참가하였습니다.\",\n        no_enter: no_enter\n      };\n\n      if (this.$route.params.restart_counter != null) {\n        this.timer = this.$route.params.restart_counter;\n      } //console.log(\"entras\");\n\n    }\n\n    setTimeout(() => {\n      //console.log(this.$route.params);\n      // 입장했음을 알림\n      socket.emit(\"enter\", msg);\n    }, 1000); // 방 정보를 받음 - 입장 했을 때 자신에게만 한 번 전송\n\n    socket.on(\"announce_room_name\", room_data => {\n      this.room_name = room_data.room_name;\n      this.my_key = room_data.my_key;\n      this.show_page = true; //console.log(room_data);\n    }); //다른 채팅이 있는지 확인\n\n    socket.on(\"chat\", data => {\n      switch (data.type) {\n        case \"server\":\n          this.textarea += \"[\" + data.speaker + \"]   \" + data.msg + \"\\n\";\n          break;\n\n        case \"normal\":\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\n          break;\n      } //console.log(this.textarea);\n      // console.log(\"chat :: \");\n      // console.log(this.$refs);\n      // console.log(data);\n      // 스크롤을 자동으로 내림\n\n      /*\r\n      if( this.$refs.show_chat != null && this.$refs.show_chat != undefined ){\r\n        this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\r\n      }\r\n      */\n\n    }); // 다른 플레이어가 입장시 / 색깔 선택 시 정보를 받음\n\n    socket.on(\"all_player\", data => {\n      //console.log(data);\n      this.users = data;\n      var num = -1;\n\n      for (var i = 0; i < this.users.length; i++) {\n        if (this.users[i].user_key == this.my_key) {\n          num = i; //console.log(this.users[i].is_ready);\n          //console.log(typeof(this.users[i].is_ready));\n\n          break;\n        }\n      }\n\n      this.is_master = this.users[num].is_master;\n    }); // 색을 고를 떄 같은 색이면 못고르게 하기\n\n    socket.on(\"same_color\", () => {\n      alert(\"다른 플레이어와 같은 색을 고를 수 없습니다!\\n다른 색을 골라주세요.\");\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\n    });\n    /*\r\n        //입장시 방이 가득 찼는지 확인\r\n        socket.on(\"pull_room\", () => {\r\n            //console.log(res + \"방이 가득 찼습니다.\");\r\n            alert(\"방이 가득 찼습니다. 뒤로 돌아갑니다\");\r\n            // master 면 create 로\r\n            if( this.$route.params.is_master === 'true' ){\r\n              this.$router.push({\r\n                name: 'create_lobby',\r\n                params : {\r\n                    // 이름 돌려줘야함\r\n                    count : this.$route.params.count\r\n                }\r\n              });\r\n            }\r\n            // entrans 면 enter 로\r\n            else {\r\n              this.$router.push({\r\n                // 이름 돌려줘야함\r\n                name: 'enter_lobby',\r\n              });\r\n            }\r\n            \r\n        });\r\n    \r\n        // 마스터가 아닌데 방이 없는 곳에 들어갈 경우\r\n        socket.on(\"no_room\", () => {\r\n          alert(\"방이 아직 생성되지 않았거나 잘못된 주소입니다. 주소를 확인해주세요\");\r\n          alert(\"뒤로 돌아갑니다.\");\r\n          this.$router.push({\r\n              name: 'enter_lobby'\r\n          });\r\n        })\r\n    \r\n        // 비밀번호가 잘못 된 경우\r\n        socket.on(\"wrong_pw\", () => {\r\n          alert(\"비밀번호가 잘못되었습니다. 비밀번호를 확인해주세요\");\r\n          this.$router.push({\r\n            name: 'enter_lobby'\r\n          });\r\n        });\r\n    */\n    // 게임 시작으로 인해 모두 방으로 이동\n\n    socket.on(\"everyone_move_to_board\", () => {\n      this.textarea = '';\n      this.$router.push({\n        name: 'game_board',\n        params: {\n          room_name: this.room_name\n        }\n      });\n    }); // 방 나가기\n\n    socket.on(\"move_room_list\", () => {\n      this.$router.push({\n        name: 'room_list',\n        params: {\n          name: this.name,\n          re_page: true,\n          restart_counter: this.timer\n        }\n      });\n    });\n  },\n\n  unmounted() {//console.log(\"파괴확인\");\n    //console.log(this.$refs);\n  },\n\n  data() {\n    return {\n      users: '',\n      textarea: '',\n      message: '',\n      room_name: this.$route.params.room_name,\n      my_key: '',\n      my_name: this.$route.params.name,\n      color_button: 'inline-block',\n      back_button: 'none',\n      toggle_game_start: \"준비완료\",\n      is_master: \"false\",\n      show_page: false,\n      timer: 0\n    };\n  },\n\n  methods: {\n    // 고른 색을 서버에 알림\n    choose_color: function (color) {\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\n      let data = {\n        user_name: this.my_name,\n        user_color: color,\n        user_key: this.my_key,\n        room_name: this.room_name\n      }; //선택한 값을 서버에 전송\n\n      socket.emit(\"edit_color\", data);\n    },\n    sending_message: function (data) {\n      let msg = {\n        speaker: this.my_name,\n        msg: data,\n        type: \"normal\",\n        room_name: this.room_name\n      };\n      socket.emit(\"chat\", msg);\n    },\n    back_choose_color: function () {\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\n      let data = {\n        user_name: this.my_name,\n        user_color: '',\n        user_key: this.my_key,\n        room_name: this.room_name\n      }; //선택한 값을 서버에 전송\n\n      socket.emit(\"edit_color\", data);\n    },\n    game_start: function () {\n      // 색을 선택해야 시작 가능하게 변경\n      for (let i = 0; i < this.users.length; i++) {\n        if (this.users[i].user_key == this.my_key) {\n          if (this.users[i].user_color == '' || this.users[i].user_color == undefined) {\n            alert(\"색을 먼저 골라주세요!\");\n            return;\n          }\n\n          break;\n        }\n      }\n\n      var ready_player = 0; // 준비 완료 시 데이터를 갱신하므로 is_ready 값이 true 인 수를 셈\n\n      for (var i = 0; i < this.users.length; i++) {\n        if (this.users[i].is_ready === true || this.users[i].is_ready == \"true\") {\n          ready_player++;\n        }\n      } // master는 is_ready 값이 false 이므로 +1 \n      // 방최대 인원까지 모두 모여야 게임 시작 가능하게 함\n\n\n      console.log(ready_player);\n      console.log(this.users.length);\n\n      if (ready_player + 1 == this.users.length && this.users.length == this.$route.params.count) {\n        // console.log(\"게임 시작 준비 완료\");\n        // console.log(socket);\n        socket.emit(\"move_to_board_everyone\", this.room_name);\n      } else {\n        alert(\"모든 플레이어가 준비 완료상태가 되어야 합니다.\");\n      }\n    },\n    game_ready: function () {\n      var is_select_color = false;\n\n      for (var i = 0; i < this.users.length; i++) {\n        if (this.users[i].user_key === this.my_key) {\n          if (this.users[i].user_color != '') {\n            is_select_color = true;\n          }\n        }\n      }\n\n      if (!is_select_color) {\n        alert(\"색을 먼저 선택해주세요!\");\n        return;\n      }\n\n      if (this.toggle_game_start === '준비완료') {\n        ready_var = true;\n      } else {\n        ready_var = false;\n      }\n\n      this.toggle_game_start = this.toggle_game_start === '준비완료' ? '시작대기' : '준비완료';\n      var ready_var;\n      let data = {\n        is_ready: ready_var,\n        user_key: this.my_key,\n        room_name: this.room_name\n      };\n      socket.emit(\"lobby_ready\", data);\n    },\n    room_out: function () {\n      // 서버에 방 나감을 알리고\n      let send_data = {\n        room_name: this.room_name,\n        user_key: this.my_key\n      };\n      socket.emit(\"quit_room\", send_data); // room_list로 돌아감.\n\n      this.$router.push({\n        name: 'room_list',\n        params: {\n          re_page: true,\n          name: this.my_name\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["socket","default","Chat_area","name","components","mounted","msg","no_enter","$route","params","console","log","count","is_master","user_name","room_name","room_pw","is_ready","restart_counter","timer","setTimeout","emit","on","room_data","my_key","show_page","data","type","textarea","speaker","users","num","i","length","user_key","alert","color_button","back_button","$router","push","re_page","unmounted","message","my_name","toggle_game_start","methods","choose_color","color","user_color","sending_message","back_choose_color","game_start","undefined","ready_player","game_ready","is_select_color","ready_var","room_out","send_data"],"sources":["E:/GitHub/personal_tranning/alchemists_vue/alchemists/src/assets/script/game_lobby.js"],"sourcesContent":["import { socket } from '@/components/room_list.vue'\r\nimport { default as Chat_area } from '@/components/chat_area.vue'\r\n\r\nexport default {\r\n  name : 'game_lobby',\r\n  components : {\r\n    Chat_area : Chat_area,\r\n  },\r\n  async mounted() {\r\n    //this.$route.params.room_address:this.$route.params.port\r\n    // console.log(params.nick_name);\r\n    //console.log(\"server in\");\r\n    //console.log(this.$route.params);\r\n    let msg;\r\n    let no_enter;\r\n    if (this.$route.params.no_enter === 'true'){\r\n      no_enter = true;\r\n    }\r\n    else{\r\n      no_enter = false;\r\n    }\r\n    console.log(this.$route.params.count);\r\n    //마스터 인 입장만 count를 가지고 있으므로\r\n    if ( this.$route.params.is_master === 'true' ) {\r\n      msg = {\r\n        user_name : this.$route.params.name,\r\n        room_name : this.$route.params.room_name,\r\n        room_pw   : this.$route.params.room_pw,\r\n        count     : this.$route.params.count,\r\n        is_master : this.$route.params.is_master,\r\n        is_ready  : false,\r\n        msg       : this.$route.params.name + \" 가 방에 참가하였습니다.\",\r\n        no_enter  : no_enter\r\n      };\r\n      //console.log(\"master\");\r\n    } else {\r\n      msg = {\r\n        user_name : this.$route.params.name,\r\n        room_name : this.$route.params.room_name,\r\n        is_master : this.$route.params.is_master,\r\n        is_ready  : false,\r\n        msg       : this.$route.params.name + \" 가 방에 참가하였습니다.\"  ,\r\n        no_enter  : no_enter,\r\n      }\r\n\r\n      if (this.$route.params.restart_counter != null ){\r\n        this.timer = this.$route.params.restart_counter;\r\n      }\r\n\r\n      //console.log(\"entras\");\r\n    }\r\n\r\n    setTimeout(()=>{\r\n      //console.log(this.$route.params);\r\n      // 입장했음을 알림\r\n      socket.emit(\"enter\", msg);\r\n    }, 1000);\r\n\r\n      // 방 정보를 받음 - 입장 했을 때 자신에게만 한 번 전송\r\n    socket.on(\"announce_room_name\", (room_data) => {\r\n      this.room_name = room_data.room_name;\r\n      this.my_key = room_data.my_key;\r\n\r\n      this.show_page = true;\r\n      //console.log(room_data);\r\n    });\r\n\r\n    //다른 채팅이 있는지 확인\r\n    socket.on(\"chat\", (data) => {\r\n      switch ( data.type ) {\r\n        case \"server\" :\r\n          this.textarea += \"[\" + data.speaker + \"]   \" + data.msg + \"\\n\";\r\n          break; \r\n        case \"normal\" :\r\n          this.textarea += data.speaker + \" : \" + data.msg + \"\\n\";\r\n          break;\r\n      }\r\n      //console.log(this.textarea);\r\n      // console.log(\"chat :: \");\r\n      // console.log(this.$refs);\r\n      // console.log(data);\r\n      \r\n      // 스크롤을 자동으로 내림\r\n      /*\r\n      if( this.$refs.show_chat != null && this.$refs.show_chat != undefined ){\r\n        this.$refs.show_chat.scrollTop = this.$refs.show_chat.scrollHeight;\r\n      }\r\n      */\r\n    });\r\n\r\n    // 다른 플레이어가 입장시 / 색깔 선택 시 정보를 받음\r\n    socket.on(\"all_player\", (data) => {\r\n      //console.log(data);\r\n      this.users = data;\r\n      var num = -1;\r\n      for(var i = 0 ; i < this.users.length; i++){\r\n        if( this.users[i].user_key == this.my_key ){\r\n          num = i ;\r\n          //console.log(this.users[i].is_ready);\r\n          //console.log(typeof(this.users[i].is_ready));\r\n          break;\r\n        }\r\n      }\r\n      this.is_master = this.users[num].is_master;\r\n    });\r\n\r\n    // 색을 고를 떄 같은 색이면 못고르게 하기\r\n    socket.on(\"same_color\", () => {\r\n      alert(\"다른 플레이어와 같은 색을 고를 수 없습니다!\\n다른 색을 골라주세요.\");\r\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\r\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\r\n    });\r\n/*\r\n    //입장시 방이 가득 찼는지 확인\r\n    socket.on(\"pull_room\", () => {\r\n        //console.log(res + \"방이 가득 찼습니다.\");\r\n        alert(\"방이 가득 찼습니다. 뒤로 돌아갑니다\");\r\n        // master 면 create 로\r\n        if( this.$route.params.is_master === 'true' ){\r\n          this.$router.push({\r\n            name: 'create_lobby',\r\n            params : {\r\n                // 이름 돌려줘야함\r\n                count : this.$route.params.count\r\n            }\r\n          });\r\n        }\r\n        // entrans 면 enter 로\r\n        else {\r\n          this.$router.push({\r\n            // 이름 돌려줘야함\r\n            name: 'enter_lobby',\r\n          });\r\n        }\r\n        \r\n    });\r\n\r\n    // 마스터가 아닌데 방이 없는 곳에 들어갈 경우\r\n    socket.on(\"no_room\", () => {\r\n      alert(\"방이 아직 생성되지 않았거나 잘못된 주소입니다. 주소를 확인해주세요\");\r\n      alert(\"뒤로 돌아갑니다.\");\r\n      this.$router.push({\r\n          name: 'enter_lobby'\r\n      });\r\n    })\r\n\r\n    // 비밀번호가 잘못 된 경우\r\n    socket.on(\"wrong_pw\", () => {\r\n      alert(\"비밀번호가 잘못되었습니다. 비밀번호를 확인해주세요\");\r\n      this.$router.push({\r\n        name: 'enter_lobby'\r\n      });\r\n    });\r\n*/\r\n    // 게임 시작으로 인해 모두 방으로 이동\r\n    socket.on(\"everyone_move_to_board\", () => {\r\n      this.textarea = '';\r\n      this.$router.push({\r\n              name: 'game_board',\r\n              params : {\r\n                room_name : this.room_name,\r\n              },\r\n        });\r\n    });\r\n\r\n    // 방 나가기\r\n    socket.on(\"move_room_list\", ()=>{ \r\n      this.$router.push({\r\n        name: 'room_list',\r\n        params : {\r\n          name : this.name,\r\n          re_page : true,\r\n          restart_counter : this.timer,\r\n        },\r\n      });\r\n    });\r\n\r\n  },\r\n  unmounted() {\r\n    //console.log(\"파괴확인\");\r\n    //console.log(this.$refs);\r\n  },\r\n  data() {\r\n    return  {\r\n      users : '',\r\n      textarea : '',\r\n      message : '',\r\n      room_name : this.$route.params.room_name,\r\n      my_key : '',\r\n      my_name : this.$route.params.name,\r\n      color_button : 'inline-block',\r\n      back_button : 'none',\r\n      toggle_game_start : \"준비완료\",\r\n      is_master : \"false\",\r\n      show_page : false,\r\n      timer : 0,\r\n    }\r\n  },\r\n  methods : {\r\n    // 고른 색을 서버에 알림\r\n    choose_color : function(color) {\r\n\r\n        this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\r\n        this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\r\n\r\n        let data = {\r\n          user_name   : this.my_name,\r\n          user_color  : color,\r\n          user_key    : this.my_key,\r\n          room_name   : this.room_name,\r\n        };\r\n        //선택한 값을 서버에 전송\r\n        socket.emit(\"edit_color\", data);\r\n\r\n    },\r\n\r\n    sending_message : function(data){\r\n      let msg = {\r\n        speaker : this.my_name,\r\n        msg : data,\r\n        type : \"normal\",\r\n        room_name : this.room_name,\r\n        }\r\n      socket.emit(\"chat\", msg);\r\n    },\r\n\r\n    back_choose_color : function() {\r\n      this.color_button = this.color_button === 'inline-block' ? 'none' : 'inline-block';\r\n      this.back_button = this.back_button === 'none' ? 'inline-block' : 'none';\r\n      let data = {\r\n          user_name   : this.my_name,\r\n          user_color  : '',\r\n          user_key    : this.my_key,\r\n          room_name   : this.room_name\r\n        }\r\n      //선택한 값을 서버에 전송\r\n      socket.emit(\"edit_color\", data);\r\n    },\r\n\r\n    game_start : function() {\r\n\r\n      // 색을 선택해야 시작 가능하게 변경\r\n      for(let i = 0; i < this.users.length; i++){\r\n        if( this.users[i].user_key == this.my_key ){\r\n          if (this.users[i].user_color == '' || this.users[i].user_color == undefined){\r\n            alert(\"색을 먼저 골라주세요!\");\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      var ready_player = 0;\r\n      // 준비 완료 시 데이터를 갱신하므로 is_ready 값이 true 인 수를 셈\r\n      for( var i = 0 ; i < this.users.length; i++){\r\n        if ( this.users[i].is_ready === true || this.users[i].is_ready == \"true\") {\r\n          ready_player++;\r\n        }\r\n      }\r\n      // master는 is_ready 값이 false 이므로 +1 \r\n      // 방최대 인원까지 모두 모여야 게임 시작 가능하게 함\r\n      console.log(ready_player);\r\n      console.log(this.users.length);\r\n      if( ready_player + 1 == this.users.length && this.users.length == this.$route.params.count ){\r\n        // console.log(\"게임 시작 준비 완료\");\r\n        // console.log(socket);\r\n\r\n        socket.emit(\"move_to_board_everyone\", this.room_name);\r\n\r\n      }\r\n      else {\r\n        alert(\"모든 플레이어가 준비 완료상태가 되어야 합니다.\");\r\n      }\r\n\r\n    },\r\n\r\n    game_ready : function(){\r\n      var is_select_color = false;\r\n      for( var i = 0 ; i < this.users.length; i++){\r\n        if( this.users[i].user_key === this.my_key ){\r\n          if( this.users[i].user_color != '' ){\r\n            is_select_color = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if( !is_select_color ) {\r\n        alert(\"색을 먼저 선택해주세요!\");\r\n        return;\r\n      }\r\n\r\n      if ( this.toggle_game_start === '준비완료' ){\r\n        ready_var = true;\r\n      }else {\r\n        ready_var = false;\r\n      }\r\n\r\n      this.toggle_game_start = this.toggle_game_start === '준비완료' ? '시작대기' : '준비완료';\r\n      var ready_var;\r\n      \r\n      let data = {\r\n        is_ready : ready_var,\r\n        user_key : this.my_key,\r\n        room_name : this.room_name\r\n      };\r\n\r\n      socket.emit(\"lobby_ready\", data);\r\n    },\r\n\r\n    room_out : function() {\r\n      // 서버에 방 나감을 알리고\r\n      let send_data = {\r\n        room_name : this.room_name,\r\n        user_key : this.my_key,\r\n      };\r\n      socket.emit(\"quit_room\", send_data);\r\n      // room_list로 돌아감.\r\n      this.$router.push({\r\n        name : 'room_list',\r\n        params : {\r\n          re_page : true,\r\n          name : this.my_name,\r\n        },\r\n      });\r\n    },\r\n      \r\n\r\n  },\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}