{"ast":null,"code":"'use strict';\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst Http2OverHttpX = require('./h2-over-hx.js');\n\nconst getAuthorizationHeaders = require('./get-auth-headers.js');\n\nconst getStream = request => new Promise((resolve, reject) => {\n  const onConnect = (response, socket, head) => {\n    socket.unshift(head);\n    request.off('error', reject);\n    resolve([socket, response.statusCode]);\n  };\n\n  request.once('error', reject);\n  request.once('connect', onConnect);\n});\n\nclass Http2OverHttp extends Http2OverHttpX {\n  async _getProxyStream(authority) {\n    const {\n      proxyOptions\n    } = this;\n    const {\n      url,\n      headers\n    } = this.proxyOptions;\n    const network = url.protocol === 'https:' ? https : http; // `new URL('https://localhost/httpbin.org:443')` results in\n    // a `/httpbin.org:443` path, which has an invalid leading slash.\n\n    const request = network.request({ ...proxyOptions,\n      hostname: url.hostname,\n      port: url.port,\n      path: authority,\n      headers: { ...getAuthorizationHeaders(this),\n        ...headers,\n        host: authority\n      },\n      method: 'CONNECT'\n    }).end();\n    return getStream(request);\n  }\n\n}\n\nmodule.exports = {\n  Http2OverHttp,\n  Http2OverHttps: Http2OverHttp\n};","map":{"version":3,"names":["http","require","https","Http2OverHttpX","getAuthorizationHeaders","getStream","request","Promise","resolve","reject","onConnect","response","socket","head","unshift","off","statusCode","once","Http2OverHttp","_getProxyStream","authority","proxyOptions","url","headers","network","protocol","hostname","port","path","host","method","end","module","exports","Http2OverHttps"],"sources":["E:/web/alchemists_vue/alchemists/node_modules/http2-wrapper/source/proxies/h2-over-h1.js"],"sourcesContent":["'use strict';\nconst http = require('http');\nconst https = require('https');\nconst Http2OverHttpX = require('./h2-over-hx.js');\nconst getAuthorizationHeaders = require('./get-auth-headers.js');\n\nconst getStream = request => new Promise((resolve, reject) => {\n\tconst onConnect = (response, socket, head) => {\n\t\tsocket.unshift(head);\n\n\t\trequest.off('error', reject);\n\t\tresolve([socket, response.statusCode]);\n\t};\n\n\trequest.once('error', reject);\n\trequest.once('connect', onConnect);\n});\n\nclass Http2OverHttp extends Http2OverHttpX {\n\tasync _getProxyStream(authority) {\n\t\tconst {proxyOptions} = this;\n\t\tconst {url, headers} = this.proxyOptions;\n\n\t\tconst network = url.protocol === 'https:' ? https : http;\n\n\t\t// `new URL('https://localhost/httpbin.org:443')` results in\n\t\t// a `/httpbin.org:443` path, which has an invalid leading slash.\n\t\tconst request = network.request({\n\t\t\t...proxyOptions,\n\t\t\thostname: url.hostname,\n\t\t\tport: url.port,\n\t\t\tpath: authority,\n\t\t\theaders: {\n\t\t\t\t...getAuthorizationHeaders(this),\n\t\t\t\t...headers,\n\t\t\t\thost: authority\n\t\t\t},\n\t\t\tmethod: 'CONNECT'\n\t\t}).end();\n\n\t\treturn getStream(request);\n\t}\n}\n\nmodule.exports = {\n\tHttp2OverHttp,\n\tHttp2OverHttps: Http2OverHttp\n};\n"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMG,uBAAuB,GAAGH,OAAO,CAAC,uBAAD,CAAvC;;AAEA,MAAMI,SAAS,GAAGC,OAAO,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC7D,MAAMC,SAAS,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,KAA4B;IAC7CD,MAAM,CAACE,OAAP,CAAeD,IAAf;IAEAP,OAAO,CAACS,GAAR,CAAY,OAAZ,EAAqBN,MAArB;IACAD,OAAO,CAAC,CAACI,MAAD,EAASD,QAAQ,CAACK,UAAlB,CAAD,CAAP;EACA,CALD;;EAOAV,OAAO,CAACW,IAAR,CAAa,OAAb,EAAsBR,MAAtB;EACAH,OAAO,CAACW,IAAR,CAAa,SAAb,EAAwBP,SAAxB;AACA,CAV4B,CAA7B;;AAYA,MAAMQ,aAAN,SAA4Bf,cAA5B,CAA2C;EACrB,MAAfgB,eAAe,CAACC,SAAD,EAAY;IAChC,MAAM;MAACC;IAAD,IAAiB,IAAvB;IACA,MAAM;MAACC,GAAD;MAAMC;IAAN,IAAiB,KAAKF,YAA5B;IAEA,MAAMG,OAAO,GAAGF,GAAG,CAACG,QAAJ,KAAiB,QAAjB,GAA4BvB,KAA5B,GAAoCF,IAApD,CAJgC,CAMhC;IACA;;IACA,MAAMM,OAAO,GAAGkB,OAAO,CAAClB,OAAR,CAAgB,EAC/B,GAAGe,YAD4B;MAE/BK,QAAQ,EAAEJ,GAAG,CAACI,QAFiB;MAG/BC,IAAI,EAAEL,GAAG,CAACK,IAHqB;MAI/BC,IAAI,EAAER,SAJyB;MAK/BG,OAAO,EAAE,EACR,GAAGnB,uBAAuB,CAAC,IAAD,CADlB;QAER,GAAGmB,OAFK;QAGRM,IAAI,EAAET;MAHE,CALsB;MAU/BU,MAAM,EAAE;IAVuB,CAAhB,EAWbC,GAXa,EAAhB;IAaA,OAAO1B,SAAS,CAACC,OAAD,CAAhB;EACA;;AAvByC;;AA0B3C0B,MAAM,CAACC,OAAP,GAAiB;EAChBf,aADgB;EAEhBgB,cAAc,EAAEhB;AAFA,CAAjB"},"metadata":{},"sourceType":"script"}